ParseNode = Object (
| comment pc |

accept: aVisitor = (
	"Accept a visitor by double-dispatching to a type-specific method on the visitor, e.g. visitBlockNode:.
	 All such implementations under ParseNode should answer the result of the dispatch, e.g.
		^aVisitor visitBlockNode: self"
	^self subclassResponsibility
)

addCommentToMorph: aMorph = (
	| row |
	(self comment isNil or: [self comment isEmpty]) ifTrue: [^ self].
	row := aMorph addTextRow:
		(String streamContents: [:strm | self printCommentOn: strm indent: 1]).
	row firstSubmorph color: (SyntaxMorph translateColor: #comment).
	row parseNode: (self as: CommentNode).
)

asMorphicSyntaxIn: parent = (
	| morph |
	"Default for missing implementations"
	morph := parent addColumn: #error on: self.
	morph addTextRow: self class printString.
	^morph
)

asReturnNode = (
	^ReturnNode new expr: self
)

asStatementTileSetForPlayer: aPlayer = (
	^ self convertToTileError
)

asTileForPlayer: aPlayer = (
	"Private. Better call #asTileMorphsForPlayer:."
	^ self convertToTileError
)

asTileSetForPlayer: aPlayer = (
	^ {self asTileForPlayer: aPlayer}
)

assignmentCheck: encoder at: location = (
	"For messageNodes masquerading as variables for the debugger.
	For now we let this through - ie we allow stores ev
	into args.  Should check against numArgs, though."
	^ -1
)

canBeSpecialArgument = (
	"Can I be an argument of (e.g.) ifTrue:?"
	^false
)

canCascade = (
	^false
)

comment = (
	^comment
)

comment: newComment = (
	comment := newComment
)

convertToTileError = (
	^ self error: 'Cannot convert this expression to a tile'
)

currentValueIn: aContext = (
	^nil
)

eToysExpFlattenOn: aStream = (
	self isLeaf ifTrue: [aStream nextPut: self. ^ self].
	self getAllChildren do: [:c |
		c eToysExpFlattenOn: aStream
	].
)

emitCodeForBlockValue: stack encoder: encoder = (
	"Generate code for evaluating the last statement in a block"
	^self emitCodeForValue: stack encoder: encoder
)

emitCodeForBranchOn: condition dist: dist pop: stack encoder: encoder = (
	stack pop: 1.
	dist = 0 ifTrue: [^encoder genPop].
	condition
		ifTrue: [encoder genBranchPopTrue: dist]
		ifFalse: [encoder genBranchPopFalse: dist]
)

emitCodeForEffect: stack encoder: encoder = (
	self emitCodeForValue: stack encoder: encoder.
	encoder genPop.
	stack pop: 1
)

emitCodeForJump: dist encoder: encoder = (
	dist = 0 ifFalse: [encoder genJump: dist]
)

emitCodeForReturn: stack encoder: encoder = (
	self emitCodeForValue: stack encoder: encoder.
	encoder genReturnTop
)

encodeSelector: selector = (
	^nil
)

ensureCanCascade: encoder = (
)

explanation = (
	^self class printString
)

getAllChildren = (
	self subclassResponsibility.
)

getElderSiblingOf: node = (
	self subclassResponsibility.
)

getFirstChild = (
	self subclassResponsibility.
)

getLastChild = (
	self subclassResponsibility.
)

ifNilReceiver = (
	"assuming this object is the receiver of an ifNil:, what object is being asked about?"
	^self
)

ifNilTemporary = (
	^ nil
)

ifNilValue = (
	^self
)

isArg = (
	^false
)

isAssignmentNode = (
	^false
)

isBlockNode = (
	^false
)

isBraceNode = (
	^false
)

isComplex = (
	"Used for pretty printing to determine whether to start a new line"
	^false
)

isConstantNumber = (
	^false
)

isDoIt = (
	"polymorphic with RBNodes; called by debugger"
	^ false
)

isFirstChild: childNode = (
	self subclassResponsibility.
)

isFutureNode = (
	^false
)

isImplicitReturn = (
	^false
)

isJust: node = (
	^false
)

isLastChild: childNode = (
	self subclassResponsibility.
)

isLeaf = (
	^ false.
)

isLiteralNode = (
	^ false
)

isMessage = (
	^false
)

isMessage: selSymbol receiver: rcvrPred arguments: argsPred = (
	"See comment in MessageNode."
	^false
)

isMessageNode = (
	^false
)

isOnlySubnodeOf: aSubtree in: aParseTree = (
	"Answer if the receiver only occurs within aSubtree of aParseTree, not in the rest of aParseTree.
	 Assumes that aSubtree is in fact a subnode of aParseTree."
	| isSubnode |
	isSubnode := false.
	aSubtree accept: (ParseNodeEnumerator
							ofBlock: [:node| node == self ifTrue: [isSubnode := true]]).
	isSubnode ifFalse:
		[^false].
	aParseTree accept: (ParseNodeEnumerator
							ofBlock: [:node| node == self ifTrue: [^false]]
							select: [:node| node ~= aSubtree]).
	^true
)

isReturnSelf = (
	^false
)

isReturningIf = (
	^false
)

isSelfPseudoVariable = (
	"Overridden in VariableNode."
	^false
)

isSpecialConstant = (
	^ false
)

isTemp = (
	^ false
)

isUndefTemp = (
	^ false
)

isUnusedTemp = (
	^ false
)

isVariableNode = (
	^false
)

isVariableReference = (
	^false
)

nextWordFrom: aStream setCharacter: aBlock = (
	| outStream char |
	outStream := WriteStream on: (String new: 16).
	[(aStream peekFor: Character space)
		or: [aStream peekFor: Character tab]] whileTrue.
	[aStream atEnd
		or:
			[char := aStream next.
			char = Character cr or: [char = Character space]]]
		whileFalse: [outStream nextPut: char].
	aBlock value: char.
	^ outStream contents
)

nodePrintOn: aStrm indent: nn = (
	| var aaStrm myLine |
	"Show just the sub nodes and the code."
	(aaStrm := aStrm) ifNil: [aaStrm := WriteStream on: (String new: 500)].
	nn timesRepeat: [aaStrm tab].
	aaStrm nextPutAll: self class name; space.
	myLine := self printString copyWithout: Character cr.
	myLine := myLine copyFrom: 1 to: (myLine size min: 70).
	aaStrm nextPutAll: myLine; cr.
	1 to: self class instSize do: [:ii |
		var := self instVarAt: ii.
		(var respondsTo: #asReturnNode) ifTrue: [var nodePrintOn: aaStrm indent: nn+1]].
	1 to: self class instSize do: [:ii |
		var := self instVarAt: ii.
		(var isKindOf: SequenceableCollection) ifTrue: [
				var do: [:aNode |
					(aNode respondsTo: #asReturnNode) ifTrue: [
						aNode nodePrintOn: aaStrm indent: nn+1]]]].
	^ aaStrm
)

nodesDo: aBlock = (
	self accept: (ParseNodeEnumerator ofBlock: aBlock)
)

nodesWithPrecedingStatementsDo: aBinaryBlock = (
	self accept: (ParseNodeWithPrecedingStatementEnumerator ofBlock: aBinaryBlock)
)

noop: anObject = (
)

normalize = (
	self getAllChildren do: [:child |
		child isLeaf ifTrue: [
			self replaceNode: child with: child shallowCopy.
		] ifFalse: [
			child normalize.
		].
	].
)

nowHasDef = (
)

nowHasRef = (
)

pc = (
	"Used by encoder source mapping."
	^pc ifNil: [ 0 ]
)

pc: anInteger = (
	"Used by encoder source mapping."
	pc := anInteger
)

printCommentOn: aStream indent: indent = (
	| thisComment |
	self comment == nil ifTrue: [^ self].
	1 to: self comment size
	   do: [:index |
		index > 1 ifTrue: [aStream crtab: indent].
		aStream nextPut: $".
		thisComment := self comment at: index.
		self printSingleComment: thisComment
			on: aStream
			indent: indent.
		aStream nextPut: $"]
)

printOn: aStream = (
	"Refer to the comment in Object|printOn:."
	aStream nextPut: ${.
	self printOn: aStream indent: 0.
	aStream nextPut: $}.
)

printOn: aStream indent: anInteger = (
	"If control gets here, avoid recursion loop."
	super printOn: aStream
)

printOn: aStream indent: level precedence: p = (
	self printOn: aStream indent: level
)

printSingleComment: aString on: aStream indent: indent = (
	"Print the comment string, assuming it has been indented indent tabs.
	Break the string at word breaks, given the widths in the default
	font, at 450 points."
	| readStream word position lineBreak font wordWidth tabWidth spaceWidth lastChar |
	readStream := ReadStream on: aString.
	font := TextStyle default defaultFont.
	tabWidth := TextStyle default tabWidth.
	spaceWidth := font widthOf: Character space.
	position := indent * tabWidth.
	lineBreak := 450.
	[readStream atEnd]
		whileFalse:
			[word := self nextWordFrom: readStream setCharacter: [:lc | lastChar := lc].
			wordWidth := word inject: 0 into: [:width :char | width + (font widthOf: char)].
			position := position + wordWidth.
			position > lineBreak
				ifTrue:
					[aStream skip: -1; crtab: indent.
					position := indent * tabWidth + wordWidth + spaceWidth.
					lastChar = Character cr
						ifTrue: [[readStream peekFor: Character tab] whileTrue].
					word isEmpty ifFalse: [aStream nextPutAll: word; space]]
				ifFalse:
					[aStream nextPutAll: word.
					readStream atEnd
						ifFalse:
							[position := position + spaceWidth.
							aStream space].
					lastChar = Character cr
						ifTrue:
							[aStream skip: -1; crtab: indent.
							position := indent * tabWidth.
							[readStream peekFor: Character tab] whileTrue]]]
)

printWithClosureAnalysis = (
	^String streamContents: [:str| self printWithClosureAnalysisOn: str]
)

printWithClosureAnalysisOn: aStream = (
	"Refer to the comment in Object|printOn:."
	aStream nextPut: ${.
	self printWithClosureAnalysisOn: aStream indent: 0.
	aStream nextPut: $}.
)

printWithClosureAnalysisOn: aStream indent: anInteger = (
	"If control gets here, avoid recursion loop."
	super printWithClosureAnalysisOn: aStream
)

printWithClosureAnalysisOn: aStream indent: level precedence: p = (
	self printWithClosureAnalysisOn: aStream indent: level
)

replaceNode: childNode with: newNode = (
	self subclassResponsibility.
)

shortPrintOn: aStream = (
	self printOn: aStream indent: 0
)

sizeCode: encoder forBranchOn: condition dist: dist = (
	dist = 0 ifTrue: [^encoder sizePop].
	^condition
		ifTrue: [encoder sizeBranchPopTrue: dist]
		ifFalse: [encoder sizeBranchPopFalse: dist]
)

sizeCode: encoder forJump: dist = (
	^dist = 0 ifTrue: [0] ifFalse: [encoder sizeJump: dist]
)

sizeCodeForBlockValue: encoder = (
	"Answer the size for evaluating the last statement in a block"
	^self sizeCodeForValue: encoder
)

sizeCodeForEffect: encoder = (
	^(self sizeCodeForValue: encoder) + encoder sizePop
)

sizeCodeForReturn: encoder = (
	^(self sizeCodeForValue: encoder) + encoder sizeReturnTop
)

toDoIncrement: ignored = (
	"Only meant for Messages or Assignments - else return nil"
	^ nil
)

transferAttribute: arg = (
	^ arg first.
)


----------------------------
| CodeBases CodeLimits LdFalse LdInstType LdLitIndType LdLitType LdMinus1 LdNil LdSelf LdSuper LdTempType LdThisContext LdTrue LoadLong NodeFalse NodeNil NodeSelf NodeSuper NodeThisContext NodeTrue Send SendPlus SendType StdLiterals StdSelectors StdVariables |

initialize = (
	"ParseNode initialize. VariableNode initialize"
	LdInstType := 1.
	LdTempType := 2.
	LdLitType := 3.
	LdLitIndType := 4.
	SendType := 5.
	"Back in the day the following constants corresponded to bytecodes.
	 Now they're just unique values that need to be eliminated when and if
	 things like code:type: are cleaned up."
	CodeBases := #(0 16 32 64 208 ).
	CodeLimits := #(16 16 32 32 16 ).
	LdSelf := 112.
	LdTrue := 113.
	LdFalse := 114.
	LdNil := 115.
	LdMinus1 := 116.
	LoadLong := 128.
	LdSuper := 133.
	LdThisContext := 137.
	SendPlus := 176.
	Send := 208
	"((ParseNode class >> #initialize) literals select: [:l| l isVariableBinding and: [(ParseNode classPool includesAssociation: l) and: [(self systemNavigation allCallsOn: l localTo: ParseNode) size = 1]]]) sort: [:a :b| a key <= b key]"
	"ParseNode classPool associations select: [:a| (self systemNavigation allCallsOn: a localTo: ParseNode) isEmpty]"
)

pushNilCode = (
	^LdNil
)

tempSortBlock = (
	"Answer a block that can sort a set of temporaries into a stable
	 order so that different compilations produce the same results."
	^[:t1 :t2| | be1 be2 bs1 bs2 |
	   t1 index < t2 index "simple sort by index."
	   or: [t1 index = t2 index "complex tie break"
		  and: [t1 isRemote ~= t2 isRemote
				ifTrue: [t2 isRemote] "put direct temps before indirect temps"
				ifFalse:
					[((be1 := t1 definingScope blockExtent) isNil
					  or: [(be2 := t2 definingScope blockExtent) isNil])
						ifTrue: [t1 name < t2 name] "only have the name left to go on"
						ifFalse: "put temps from outer scopes before those from inner scopes"
							[(bs1 := be1 first) < (bs2 := be2 first)
							 or: [bs1 = bs2 and: [t1 name < t2 name]]]]]]] "only have the name left to go on"
)


comment = (^'

This superclass of most compiler/decompiler classes declares common class variables, default messages, and the code emitters for jumps. Some of the class variables are initialized here; the rest are initialized in class VariableNode.
')


)
