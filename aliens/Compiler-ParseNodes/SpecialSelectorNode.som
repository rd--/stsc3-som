SpecialSelectorNode = SelectorNode (
emitCode: stack args: nArgs encoder: encoder super: supered = (
	"Generate a special selector send.
	 A super send of a special selector must be handled like a normal send.
	 This is handled in MessageNode>>sizeCodeForValue: by mapping any
	 SpecialSelectorNodes used in super sends into normal SelectorNodes."
	supered ifTrue: [self invalidSuperSendError].
	stack pop: nArgs.
	encoder genSendSpecial: code numArgs: nArgs
)

forSuperSend = (
	"Answer the receiver or a derivative, suitable for use in a super send."
	"Excuse the code negation nonsense.  It is a vestige of a very concise but now
	 obsolete back-end bytecode encoding scheme. We're working on removing it."
	^SelectorNode new
		key: key
		code: SendType negated
		index: index
)

invalidSuperSendError = (
	self error: 'special selectors can only be used for ordinary sends'
)

resetForBlockGeneration = (
	"Reset the receiver to an unassigned state such that its index
	 in the encoder's literalStream is as yet to be determined."
	index := nil
)

sizeCode: encoder args: nArgs super: supered = (
	"Size a special selector send.
	 A super send of a special selector must be handled like a normal send.
	 This is handled in MessageNode>>sizeCodeForValue: by mapping any
	 SpecialSelectorNodes used in super sends into normal SelectorNodes."
	supered ifTrue: [self invalidSuperSendError].
	^encoder sizeSendSpecial: code numArgs: nArgs
)


)
