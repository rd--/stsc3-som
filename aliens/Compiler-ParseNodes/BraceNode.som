BraceNode = ParseNode (
| elements sourceLocations emitNode |

accept: aVisitor = (
	^aVisitor visitBraceNode: self
)

analyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignmentPools = (
	elements do:
		[:node|
		node analyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignmentPools]
)

asMorphicSyntaxIn: parent = (
	| row |
	row := (parent addRow: #brace on: self) layoutInset: 1.
	row addMorphBack: (StringMorph new contents:
		(String streamContents: [:aStream | self printOn: aStream indent: 0])).
	^row
)

blockAssociationCheck: encoder = (
	"If all elements are MessageNodes of the form [block]->[block], and there is at
	 least one element, answer true.
	 Otherwise, notify encoder of an error."
	elements size = 0
		ifTrue: [^encoder notify: 'At least one case required'].
	elements with: sourceLocations do:
			[:x :loc |
			(x 	isMessage: #->
				receiver:
					[:rcvr |
					rcvr isBlockNode and: [rcvr numberOfArguments = 0]]
				arguments:
					[:arg |
					arg isBlockNode and: [arg numberOfArguments = 0]])
			  ifFalse:
				[^encoder notify: 'Association between 0-argument blocks required' at: loc]].
	^true
)

casesForwardDo: aBlock = (
	"For each case in forward order, evaluate aBlock with three arguments:
	 the key block, the value block, and whether it is the last case."
	| numCases case |
	1 to: (numCases := elements size) do:
		[:i |
		case := elements at: i.
		aBlock value: case receiver value: case arguments first value: i=numCases]
)

casesReverseDo: aBlock = (
	"For each case in reverse order, evaluate aBlock with three arguments:
	 the key block, the value block, and whether it is the last case."
	| numCases case |
	(numCases := elements size) to: 1 by: -1 do:
		[:i |
		case := elements at: i.
		aBlock value: case receiver value: case arguments first value: i=numCases]
)

deoptimize = (
	"Deoptimize the blocks in a caseOf:[otherwise:] that is being used in a cascade."
	elements do:
		[:aMessage|
		self assert: aMessage selector key == #->.
		aMessage receiver deoptimize.
		aMessage arguments first deoptimize]
)

elements = (
	^elements
)

elements: collection = (
	"Decompile."
	elements := collection
)

elements: collection sourceLocations: locations = (
	"Compile."
	elements := collection.
	sourceLocations := locations
)

emitCodeForValue: stack encoder: encoder = (
	"Hack; when sizing we have no way of knowing how much stack space is available."
	elements size <= self maxElementsForConsArray ifTrue:
		[elements do: [:node| node emitCodeForValue: stack encoder: encoder].
		 encoder genPushConsArray: elements size.
		 stack
			pop: elements size;
			push: 1.
		 ^self].
	^emitNode emitCodeForValue: stack encoder: encoder
)

getAllChildren = (
	^ elements.
)

getElderSiblingOf: node = (
	| index |
	((index := elements indexOf: node) > 1) ifTrue: [^ elements at: index - 1].
	^ nil.
)

getFirstChild = (
	elements size > 0 ifTrue: [^ elements first].
	^ nil.
)

getLastChild = (
	elements size > 0 ifTrue: [^ elements last].
	^ nil.
)

isBraceNode = (
	^true
)

isFirstChild: childNode = (
	elements size = 0 ifTrue: [^ false].
	^ childNode = elements first.
)

isLastChild: childNode = (
	elements size = 0 ifTrue: [^ false].
	^ childNode = elements last.
)

matchBraceStreamReceiver: receiver messages: messages = (
	((receiver isMessage: #braceStream: receiver: nil arguments: [:arg | arg isConstantNumber])
		and: [messages last isMessage: #braceArray receiver: nil arguments: nil])
		ifFalse: [^ nil "no match"].
	"Appears to be a long form brace construct"
	self elements: (messages allButLast collect:
		[:msg | (msg isMessage: #nextPut: receiver: nil arguments: nil)
					ifFalse: [^ nil "not a brace element"].
		msg arguments first])
)

maxElementsForConsArray = (
	"Hack; we have no way of knowing how much stack space is available during sizing"
	^8
)

numElements = (
	^ elements size
)

printOn: aStream indent: level = (
	aStream nextPut: ${.
	1 to: elements size do:
		[:i | (elements at: i) printOn: aStream indent: level.
		i < elements size ifTrue: [aStream nextPutAll: '. ']].
	aStream nextPut: $}
)

printWithClosureAnalysisOn: aStream indent: level = (
	aStream nextPut: ${.
	1 to: elements size do:
		[:i | (elements at: i) printWithClosureAnalysisOn: aStream indent: level.
		i < elements size ifTrue: [aStream nextPutAll: '. ']].
	aStream nextPut: $}
)

replaceNode: childNode with: newNode = (
	| index |
	(index := elements indexOf: childNode) > 0
		ifTrue: [elements at: index put: newNode.].
)

sizeCodeForValue: encoder = (
	"Hack; we have no way of knowing how much stack space is available."
	elements size <= self maxElementsForConsArray ifTrue:
		[^(elements inject: 0 into: [:sum :node| sum + (node sizeCodeForValue: encoder)])
		  + (encoder sizePushConsArray: elements size)].
	"Long form: (Array braceStream: N) nextPut: a; nextPut: b; ...; braceArray"
	emitNode := CascadeNode new
					receiver: (MessageNode new
								receiver: (encoder encodeVariable: #Array)
								selector: #braceStream:
								arguments: {encoder encodeLiteral: elements size}
								precedence: 3 from: encoder)
					messages: ((elements collect: [:elt |
											MessageNode new
												receiver: nil
												selector: #nextPut:
												arguments: {elt}
												precedence: 3
												from: encoder])
								copyWith: (MessageNode new
												receiver: nil
												selector: #braceArray
												arguments: #()
												precedence: 1
												from: encoder)).
	^emitNode sizeCodeForValue: encoder
)

visitBy: visitor = (
	visitor visit: self.
	elements do: [:a | a visitBy: visitor].
)


----------------------------

example = (
	"Test the {a. b. c} syntax."
	| x |
	x := {1. {2. 3}. 4}.
	^ {x first. x second first. x second last. x last. 5} as: Set
"BraceNode example Set (0 1 2 3 4 5 )"
)


comment = (^'

Used for compiling and decompiling brace constructs.

These now compile into either a fast short form for 4 elements or less:
	Array braceWith: a with: b ...
or a long form of indefinfite length:
	(Array braceStream: N) nextPut: a; nextPut: b; ...; braceArray.

The erstwhile brace assignment form is no longer supported.
')


)
