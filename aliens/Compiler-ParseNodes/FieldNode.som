FieldNode = VariableNode (
| fieldDef rcvrNode readNode writeNode |

accept: aVisitor = (
	^aVisitor visitFieldNode: self
)

assignmentCheck: encoder at: location = (
	(encoder cantStoreInto: name) ifTrue: [^location].
	fieldDef toSet ifNil:[
		encoder interactive ifTrue:[^location].
		fieldDef := fieldDef shallowCopy assignDefaultSetter.
	].
	^-1
)

emitCodeForEffect: stack encoder: encoder = (
)

emitCodeForLoad: stack forValue: forValue encoder: encoder = (
	rcvrNode emitCodeForValue: stack encoder: encoder.
	fieldDef accessKey ifNotNil:
		[super emitCodeForValue: stack encoder: encoder]
)

emitCodeForStore: stack encoder: encoder = (
	fieldDef accessKey ifNil:[
		writeNode emitCode: stack args: 1 encoder: encoder super: false.
	] ifNotNil:[
		writeNode emitCode: stack args: 2 encoder: encoder super: false.
	].
)

emitCodeForStorePop: stack encoder: encoder = (
	self emitCodeForStore: stack encoder: encoder.
	encoder genPop.
	stack pop: 1.
)

emitCodeForValue: stack encoder: encoder = (
	fieldDef accessKey ifNil:[
		rcvrNode emitCodeForValue: stack encoder: encoder.
		readNode emitCode: stack args: 0 encoder: encoder super: false.
	] ifNotNil:[
		rcvrNode emitCodeForValue: stack encoder: encoder.
		super emitCodeForValue: stack encoder: encoder.
		readNode emitCode: stack args: 1 encoder: encoder super: false.
	].
)

encodeReceiverOn: encoder = (
	"encode the receiver node"
	rcvrNode := encoder encodeVariable: 'self'.
)

fieldDef = (
	^fieldDef
)

fieldDefinition: fieldDefinition = (
	self name: fieldDefinition name key: fieldDefinition index: nil type: LdLitType
)

name: varName key: objRef index: i type: type = (
	fieldDef := objRef.
	^super name: varName key: objRef key index: nil type: LdLitType
)

resetFromCopy: aFieldNode = (
	"Reset the state of the recever to match that of the argument.
	 This is used to reset nodes that may have been repurposed
	 while generatig the compiled method for a full block."
	self assert: (fieldDef == aFieldNode fieldDef
				and: [rcvrNode == (aFieldNode instVarNamed: 'rcvrNode')
				and: [readNode == (aFieldNode instVarNamed: 'readNode')
				and: [writeNode == (aFieldNode instVarNamed: 'writeNode')]]]).
	super resetFromCopy: aFieldNode
)

sizeCodeForEffect: encoder = (
	^0
)

sizeCodeForStore: encoder = (
	rcvrNode ifNil:[self encodeReceiverOn: encoder].
	fieldDef accessKey ifNil:[
		writeNode ifNil:[writeNode := encoder encodeSelector: fieldDef toSet].
		^(rcvrNode sizeCodeForValue: encoder) +
			(writeNode sizeCode: encoder args: 1 super: false)
	].
	writeNode ifNil:[writeNode := encoder encodeSelector: #set:to:].
	^(rcvrNode sizeCodeForValue: encoder) +
		(super sizeCodeForValue: encoder) +
			(writeNode sizeCode: encoder args: 2 super: false)
)

sizeCodeForStorePop: encoder = (
	^(self sizeCodeForStore: encoder) + encoder sizePop
)

sizeCodeForValue: encoder = (
	rcvrNode ifNil:[self encodeReceiverOn: encoder].
	fieldDef accessKey ifNil:[
		readNode ifNil:[readNode := encoder encodeSelector: fieldDef toGet].
		^(rcvrNode sizeCodeForValue: encoder) +
			(readNode sizeCode: encoder args: 0 super: false)
	].
	readNode ifNil:[readNode := encoder encodeSelector: #get:].
	^(rcvrNode sizeCodeForValue: encoder) +
		(super sizeCodeForValue: encoder) +
			(readNode sizeCode: encoder args: 1 super: false)
)


)
