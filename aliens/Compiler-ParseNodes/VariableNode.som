VariableNode = LeafNode (
| name |

accept: aVisitor = (
	^aVisitor visitVariableNode: self
)

asMorphicSyntaxIn: parent = (
	^ parent addToken: self name
			type: #variable
			on: self shallowCopy	"don't hand out the prototype! See VariableNode>>initialize"
)

asStorableNode: encoder = (
	^ self
)

asTileForPlayer: aPlayer = (
	| target |
	self isSelfPseudoVariable
		ifTrue: [^ aPlayer tileToRefer].
	target := self key isVariableBinding
		ifTrue: [aPlayer environment at: self key key]
		ifFalse: [self key].
	^ TileMorph new
		setToReferTo: target;
		yourself
)

assignmentCheck: encoder at: location = (
	^(encoder cantStoreInto: name) ifTrue: [location] ifFalse: [-1]
)

beingAssignedToAnalyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignmentPools = (
	"No-op overridden by TempVariableNode"
)

currentValueIn: aContext = (
	aContext ifNil: [^nil].
	^((self variableGetterBlockIn: aContext) ifNil: [^nil]) value printString
)

emitCodeForReturn: stack encoder: encoder = (
	encoder
		if: code
		isSpecialLiteralForReturn:
			[:specialLiteral|
			"short returns"
			 encoder genReturnSpecialLiteral: specialLiteral.
			 stack push: 1 "doesnt seem right".
			 ^self].
	(self code = LdSelf or: [self code = LdSuper]) ifTrue:
		["short returns"
		 encoder genReturnReceiver.
		 stack push: 1 "doesnt seem right".
		 ^self].
	super emitCodeForReturn: stack encoder: encoder
)

emitCodeForStore: stack encoder: encoder = (
	self shouldNotImplement
)

emitCodeForStorePop: stack encoder: encoder = (
	self type ~= 1 ifTrue:
		[self halt].
	encoder genStorePopInstVar: index.
	stack pop: 1
)

emitCodeForValue: stack encoder: encoder = (
	stack push: 1.
	encoder
		if: code
		isSpecialLiteralForPush:
			[:specialLiteral|
			 ^encoder genPushSpecialLiteral: specialLiteral].
	(code = LdSelf or: [code = LdSuper]) ifTrue:
		[^encoder genPushReceiver].
	code = LdThisContext ifTrue:
		[^encoder genPushThisContext].
	self error: 'internal compiler error; should not happen'
)

explanation = (
	self isSelfPseudoVariable ifTrue: [^'the pseudo variable <self> (refers to the receiver)'].
	^(#('instance' 'temporary' 'LIT3' 'global')
			at: self type
			ifAbsent: ['UNK',self type printString]),' variable <',self name,'>'
	"LdInstType := 1.
	LdTempType := 2.
	LdLitType := 3.
	LdLitIndType := 4.
"
)

fieldOffset = (
	"Return temp or instVar offset for this variable"
	^index ifNil: [code < 256
					ifTrue: [code \\ 16]
					ifFalse: [code \\ 256]]
)

index = (
	"If index is nil, this code attempts to reconstruct the index from its encoding in code."
	index ifNotNil:
		[^index].
	code < 0 ifTrue:[^nil].
	code > 256 ifTrue:
		[self assert: index = (code \\ 256).
		^code \\ 256].
	code >= (CodeBases at: self type) ifTrue:
		[self assert: index = (code - (CodeBases at: self type)).
		^code - (CodeBases at: self type)].
	self assert: index = (code - self type).
	^code - self type
)

isImplicitReturn = (
	^ self = NodeNil
)

isSelfPseudoVariable = (
	"Answer if this ParseNode represents the 'self' pseudo-variable."
	^ key = 'self' or: [name = '{{self}}']
)

isUndeclared = (
	^false
)

isVariableNode = (
	^true
)

isVariableReference = (
	^true
)

name = (
	^ name
)

name: string = (
	"Change name"
	name := string
)

name: varName index: i type: type = (
	"Only used for initting instVar refs"
	^self name: varName key: varName index: i type: type
)

name: string key: object code: byte = (
	"Only used for initting std variables, nil, true, false, self, etc."
	name := string.
	key := object.
	code := byte
)

name: varName key: objRef index: i type: type = (
	"Only used for initting global (litInd) variables"
	^self name: varName key: objRef code: (self code: (index := i) type: type)
)

printOn: aStream indent: level = (
	aStream nextPutAll: name
)

printWithClosureAnalysisOn: aStream indent: level = (
	aStream nextPutAll: name
)

resetFromCopy: aVariableNode = (
	"Reset the state of the recever to match that of the argument.
	 This is used to reset nodes that may have been repurposed
	 while generatig the compiled method for a full block."
	self assert: name == aVariableNode name.
	super resetFromCopy: aVariableNode
)

sizeCodeForReturn: encoder = (
	encoder
		if: code
		isSpecialLiteralForReturn:
			[:specialLiteral|
			 ^encoder sizeReturnSpecialLiteral: specialLiteral].
	(self code = LdSelf or: [self code = LdSuper]) ifTrue:
		[^encoder sizeReturnReceiver].
	^super sizeCodeForReturn: encoder
)

sizeCodeForStore: encoder = (
	self shouldNotImplement
)

sizeCodeForStorePop: encoder = (
	self shouldNotImplement
)

sizeCodeForValue: encoder = (
	self reserve: encoder.
	encoder
		if: code
		isSpecialLiteralForPush:
			[:specialLiteral| "i.e. the pseudo-variables nil true & false"
			 ^encoder sizePushSpecialLiteral: specialLiteral].
	(code = LdSelf or: [code = LdSuper]) ifTrue:
		[^encoder sizePushReceiver].
	code = LdThisContext ifTrue:
		[^encoder sizePushThisContext].
	self error: 'internal compiler error; should not happen'
)

type = (
	"This code attempts to reconstruct the type from its encoding in code.
		This allows one to test, for instance, (aNode type = LdInstType)."
	| type |
	code < 0 ifTrue: [^code negated].
	code >= 256 ifTrue: [^code // 256].
	type := CodeBases findFirst: [:one | code < one].
	^type = 0 ifTrue: [5] ifFalse: [type - 1]
)

variableGetterBlockIn: aContext = (
	| temps index ivars |
	(self type = 4 and: [self key isVariableBinding]) ifTrue: [
		^[self key value]
	].
	aContext ifNil: [^nil].
	self isSelfPseudoVariable ifTrue: [^[aContext receiver]].
	self type = 1 ifTrue: [
		ivars := aContext receiver class allInstVarNames.
		index := ivars indexOf: self name ifAbsent: [^nil].
		^[aContext receiver instVarAt: index]
	].
	self type = 2 ifTrue: [
		temps := aContext tempNames.
		index := temps indexOf: self name ifAbsent: [^nil].
		^[aContext tempAt: index]
	].
	^nil
)


----------------------------

initialize = (
	| encoder |
	encoder := Encoder new.
	StdVariables := Dictionary new: 16.
	encoder
		fillDict: StdVariables
		with: VariableNode
		mapping: #('self' 'thisContext' 'super' 'nil' 'false' 'true' )
		to: (Array with: LdSelf with: LdThisContext with: LdSuper)
				, (Array with: LdNil with: LdFalse with: LdTrue).
	StdSelectors := Dictionary new: 64.
	encoder
		fillDict: StdSelectors
		with: SpecialSelectorNode
		mapping: ((1 to: Smalltalk specialSelectorSize) collect:
							[:i | Smalltalk specialSelectorAt: i])
		to: (1 to: Smalltalk specialSelectorSize) asArray.
	StdLiterals := PluggableDictionary new equalBlock: #literalEqual:. "This is at least as fast as a block and eliminates a recompileAll dependency. eem 10/8/2019"
	encoder
		fillDict: StdLiterals
		with: LiteralNode
		mapping: #(-1 0 1 2 )
		to: (LdMinus1 to: LdMinus1 + 3).
	encoder initScopeAndLiteralTables.
	NodeNil := encoder encodeVariable: 'nil'.
	NodeTrue := encoder encodeVariable: 'true'.
	NodeFalse := encoder encodeVariable: 'false'.
	NodeSelf := encoder encodeVariable: 'self'.
	NodeThisContext := encoder encodeVariable: 'thisContext'.
	NodeSuper := encoder encodeVariable: 'super'
)


comment = (^'
I am a parse tree leaf representing a variable. Note that my name and key are different for pool variables: the key is the Object Reference.
')


)
