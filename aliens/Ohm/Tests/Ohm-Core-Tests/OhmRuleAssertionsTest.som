OhmRuleAssertionsTest = TestCase (
testChoicesHaveUniformArity = (

	| pexpr rule testGrammar |
	pexpr := OhmPExprAlt newOn: { OhmPExprString newOn: 'foo' . OhmPExprSeq newOn: { OhmPExprString newOn: '1' . OhmPExprString newOn: '2' } }.
	rule := OhmRuleDefine newNamed: #testRule body: pexpr.
	testGrammar := OhmGrammar new.

	self should: [ rule performChecksFor: testGrammar ] raise: OhmInconsistentArityError.
)

testDuplicateRuleDeclaration = (

	| pexpr rule testGrammar |
	testGrammar := OhmCompiler
						compileGrammarDefinition: 'G1 { }'.
	pexpr := OhmPExprAlt
				newOn: { OhmPExprString newOn: 'foo' . OhmPExprString newOn: '1' }.
	rule := OhmRuleDefine newNamed: #digit body: pexpr.

	self should: [ rule performChecksFor: testGrammar ] raise: OhmDuplicateRuleDeclarationError.
)

testParameterNamesHaveToBeUnique = (

	| pexpr rule testGrammar |
	pexpr := OhmPExprString newOn: 'foo'.
	rule := OhmRuleDefine newNamed: #testRule parameters: {#a . #a} body: pexpr.
	testGrammar := OhmGrammar new.

	self should: [ rule performChecksFor: testGrammar ] raise: OhmDuplicateParameterName.
)


)
