OhmParsingExpressionCaseInsensitiveTest = OhmParsingExpressionTest (
evalPExpr: pexpr on: input asSyntactic: isSyntactic usingGrammar: aGrammar = (

	^ self evalPExpr: pexpr on: input asSyntactic: isSyntactic usingGrammar: aGrammar andBindings: OrderedCollection new
)

evalPExpr: pexpr on: input asSyntactic: isSyntactic usingGrammar: aGrammar andBindings: bindings = (

	| rules state grammar parameterizedRule |

	rules := Dictionary new.
	rules at: #firstRule put: (OhmPExprString newOn: 'firstRule' ).
	parameterizedRule := OhmRuleDefine
		newNamed: 'parameterRule'
		parameters: {#x}
		body: (OhmPExprSeq newOn: {OhmPExprParam newOn: 1 . OhmPExprParam newOn: 1}).
	parameterizedRule installInto: rules.
	grammar := OhmGrammar newWithName: 'FirstGrammar' ruleDictionary: rules.

	state := OhmParsingState new.
	state
		grammar: grammar;
		pushInput: input;
		isSyntactic: isSyntactic;
		pushBindings: bindings;
		shouldRecordFailures: false.


	^ pexpr eval: state
)

exampleExpression = (

	^ OhmPExprCaseInsensitive newOn: (OhmPExprParam newOn: 1)
)

testCaseInsensitiveArity = (

	self assert: 1 equals: self exampleExpression arity
)

testCaseInsensitiveMatches = (

	| actualExpression freshExpression |
	freshExpression := self exampleExpression.
	actualExpression := freshExpression replaceParametersWithArguments: {OhmPExprString newOn: 'AbC'}.

	self
		assertParsingExpression: actualExpression
		compliesWithItsFixture: #expressionMatch.
	
)

testCaseInsensitiveProducesIntervals = (

	| actualExpression freshExpression |
	freshExpression := self exampleExpression.
	actualExpression := freshExpression replaceParametersWithArguments: {OhmPExprString newOn: 'AbC'}.

	self
		assertParsingExpression: actualExpression
		compliesWithItsIntervalFixture: #matchInterval.
	
)

testCreateACaseInsensitive = (

	OhmPExprCaseInsensitive newOn: (OhmPExprString newOn: 'AbC')
)


)
