OhmRulesAPITest = TestCase (
testCallers = (

	| barRule fooRule testGrammar |
	testGrammar := OhmGrammar newWithName: #testGrammar ruleDictionary: Dictionary new.
	fooRule := OhmRuleDefine newNamed: #foo body: (OhmPExprSeq newOn: {OhmPExprApply newOn: #bar}).
	barRule := OhmRuleDefine  newNamed: #bar body: (OhmPExprString newOn: 'bar').

	{ fooRule . barRule } do: [:r |
		testGrammar ruleDeclarations at: r ruleName put: r.
		r boundGrammar: testGrammar ].

	self assert: barRule callersToMe size = 1.
	self assert: barRule callersToMe first equals: fooRule.
)

testEmptyParams = (

	| fooRule testGrammar |
	testGrammar := OhmGrammar newWithName: #testGrammar ruleDictionary: Dictionary new.
	fooRule := OhmRuleDefine newNamed: #foo body: (OhmPExprSeq newOn: {OhmPExprApply newOn: #bar}).

	testGrammar ruleDeclarations at: fooRule ruleName put: fooRule.
	fooRule boundGrammar: testGrammar.

	self assert: fooRule parameters isEmpty
)

testRuleCreatedWithParamsHasParams = (

	| fooRule testGrammar |
	testGrammar := OhmGrammar newWithName: #testGrammar ruleDictionary: Dictionary new.
	fooRule := OhmRuleDefine
		newNamed: #foo
		parameters: {#separator}
		body: (OhmPExprSeq newOn: {OhmPExprApply newOn: #digit . OhmPExprParam newOn: #separator}).

	testGrammar ruleDeclarations at: fooRule ruleName put: fooRule.
	fooRule boundGrammar: testGrammar.

	self assert: fooRule parameters size equals: 1
)


)
