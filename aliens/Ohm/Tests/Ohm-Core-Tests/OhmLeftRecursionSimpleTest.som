OhmLeftRecursionSimpleTest = OhmGrammarParsingTest (
fixtureGrammar = (

	"M { number = numberRec | digit
             numberRec = number digit }"

	| rules |
	rules := Dictionary new.
	rules at: #number put: (OhmPExprAlt newOn: { OhmPExprApply newOn: #numberRec . OhmPExprApply  newOn: #digit }).
	rules at: #numberRec put: (OhmPExprSeq newOn: { OhmPExprApply newOn: #number . OhmPExprApply  newOn: #digit  }).

	^ OhmGrammar newWithName: 'TestGrammar' ruleDictionary: rules
)

testLeftRecursionCanBeDealtWith = (

	"M { number = numberRec | digit
             numberRec = number digit }"

	self
		assertGrammar: self fixtureGrammar
		startingFrom: #number
		compliesWithFixture: #matchContents
		fromFixtureSet: #leftRecursionSimple.
	
)

testLeftRecursionProducesNodes = (

	"Structure to be produced:
		['number',
              ['numberRec',
                ['number',
                  ['numberRec',
                    ['number',
                      ['numberRec',
                        ['number', '1'],
                        '2']],
                    '3']],
                '4']]);"

	"M { number = numberRec | digit
             numberRec = number digit }"


	| result |
	result := (self fixtureGrammar match: '1234' startingFrom: #number) cst.
	self assert: 'number' equals: result ruleName.

	result := result children first.
	self assert: 'numberRec' equals: result ruleName.

	result := result children first.
	self assert: 'number' equals: result ruleName.

	result := result children first.
	self assert: 'numberRec' equals: result ruleName.

	result := result children first.
	self assert: 'number' equals: result ruleName.

	result := result children first.
	self assert: 'numberRec' equals: result ruleName.

	self assert: 'number' equals: result children first ruleName.
	self assert: 'digit' equals: result children second ruleName.
)


)
