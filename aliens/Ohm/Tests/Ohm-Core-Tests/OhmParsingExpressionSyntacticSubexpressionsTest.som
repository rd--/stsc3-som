OhmParsingExpressionSyntacticSubexpressionsTest = OhmParsingExpressionTest (
| additionalRules |

evalPExpr: pexpr on: input asSyntactic: isSyntactic usingGrammar: aGrammar = (

	| rules state |

	rules := Dictionary new.
	rules at: #firstRule put: (OhmPExprString newOn: 'ab').
	rules at: #secondRule put: (OhmPExprString newOn: 'cd').
	rules addAll: additionalRules.

	state := OhmParsingState new.
	state
		grammar: (OhmGrammar newWithName: 'FirstGrammar' ruleDictionary: rules);
		pushInput: input;
		pushBindings: OrderedCollection new;
		shouldRecordFailures: false;
		isSyntactic: isSyntactic.

	^ pexpr
		eval: state.
)

evalPExpr: pexpr on: input asSyntactic: isSyntactic usingGrammar: aGrammar andBindings: bindings = (

	| rules state |

	rules := Dictionary new.
	rules at: #firstRule put: (OhmPExprString newOn: 'ab').
	rules at: #secondRule put: (OhmPExprString newOn: 'cd').
	rules addAll: additionalRules.

	state := OhmParsingState new.
	state
		grammar: (OhmGrammar newWithName: 'FirstGrammar' ruleDictionary: rules);
		pushInput: input;
		pushBindings: bindings;
		shouldRecordFailures: false;
		isSyntactic: isSyntactic.

	^ pexpr
		eval: state.
)

testSyntacticSeqInRuleWithNot = (

	| expression |
	additionalRules := Dictionary newFrom: {
		#SyntacticRule -> (OhmPExprSeq newOn: {OhmPExprString newOn: 'a' . OhmPExprNot newOn: (OhmPExprString newOn: 'b')}) }.

	expression := OhmPExprApply newOn: #SyntacticRule.

	self
		assertParsingExpression: expression
		asSyntactic: true
		compliesWithIntervalFixture: #intervalContent
		fromFixtureSet: #syntacticSubexpressionsNot.
)

testSyntacticSeqRemovesSpaceInBetween = (

	| seqExpression |
	seqExpression := OhmPExprMany newPlusOn: (OhmPExprApply newOn: 'firstRule').
	self
		assertParsingExpression: seqExpression
		asSyntactic: true
		compliesWithFixture: #syntacticExpressionMatch
		fromFixtureSet: #syntacticSubexpressionsPlus.
)

setUp = (

	super setUp.
	additionalRules := #().
)


)
