OhmLeftRecursionPreviouslyFailedTest = OhmGrammarParsingTest (
fixtureGrammar = (

	"G {
            tricky = &foo bar
            foo = fooRec | digit
            fooRec = bar digit
            bar = barRec | digit
            barRec = foo digit
            }"
	| rules |
	rules := Dictionary new.
	rules at: #tricky put: (OhmPExprSeq newOn: { OhmPExprLookahead newOn: (OhmPExprApply  newOn: #foo) . OhmPExprApply newOn: #bar }).
	rules at: #foo put: (OhmPExprAlt newOn: { OhmPExprApply newOn: #fooRec . OhmPExprApply  newOn: #digit  }).
	rules at: #fooRec put: (OhmPExprSeq newOn: { OhmPExprApply newOn: #bar . OhmPExprApply  newOn: #digit  }).
	rules at: #bar put: (OhmPExprAlt newOn: { OhmPExprApply newOn: #barRec . OhmPExprApply  newOn: #digit  }).
	rules at: #barRec put: (OhmPExprSeq newOn: { OhmPExprApply newOn: #foo . OhmPExprApply  newOn: #digit  }).

	^ OhmGrammar newWithName: 'TestGrammar' ruleDictionary: rules.
)

testLeftRecursionWhichWasWrongAtTheSamePositionEarlier = (
	"This test checks whether a left recursion which was applied at a
	position earlier in a branch which was rejected later on, and is
	then re-applied at the same position later on works."

	self
		assertGrammar: (OhmGrammar new: (OhmParsingExpressionFixtures fixturesFor: #leftRecursionFailedPreviously) grammar)
		startingFrom: #Exp
		compliesWithFixture: #matchContents
		fromFixtureSet: #leftRecursionFailedPreviously.
	
)


)
