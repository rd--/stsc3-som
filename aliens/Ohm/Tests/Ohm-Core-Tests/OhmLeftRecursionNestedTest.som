OhmLeftRecursionNestedTest = OhmGrammarParsingTest (
testLeftRecursionCanBeDealtWith = (

	"M {
            addExpr = addExprRec | mulExpr
            addExprRec = addExpr ""+"" mulExpr
            mulExpr = mulExprRec | priExpr
            mulExprRec = mulExpr ""*"" priExpr
            priExpr = /[0-9]/
            sss = &addExpr addExpr }"
	| rules grammar |
	rules := Dictionary new.
	rules at: #addExpr put: (OhmPExprAlt newOn: { OhmPExprApply newOn: #addExprRec . OhmPExprApply  newOn: #mulExpr }).
	rules at: #addExprRec put:  (OhmPExprSeq newOn: { OhmPExprApply newOn: #addExpr . OhmPExprString newOn: '+' . OhmPExprApply  newOn: #mulExpr  }).
	rules at: #mulExpr put: (OhmPExprAlt newOn: { OhmPExprApply newOn: #mulExprRec . OhmPExprApply  newOn: #priExpr }).
	rules at: #mulExprRec put: (OhmPExprSeq newOn: { OhmPExprApply newOn: #mulExpr . OhmPExprString newOn: '*' . OhmPExprApply  newOn: #priExpr  }).
	rules at: #priExpr put: (OhmPExprRegex newOn: '[0-9]').
	rules at: #sss put: (OhmPExprSeq newOn: { OhmPExprLookahead newOn: (OhmPExprApply newOn: #addExpr) . OhmPExprApply newOn: #addExpr }).

	grammar := OhmGrammar newWithName: 'TestGrammar' ruleDictionary: rules.

	self
		assertGrammar: grammar
		startingFrom: #addExpr
		compliesWithFixture: #matchContents
		fromFixtureSet: #leftRecursionNested
	
)

testLeftRecursionCanBeDealtWithSideNested = (

	"M {
            addExpr = normalAddExpr | wrappedAddExpr
		wrappedAddExpr = "">>"" addExpr "">>""
		normalAddExpr  = addExpRec ""+"" primaExpr
		addExprRec = addExpr | primaExpr
		primaExpr = primaExprRec | priExpr
		primaExprRec = primaExpr ""-""
            priExpr = /[0-9]/ }"
	| rules grammar |
	rules := Dictionary new.
	rules at: #addExpr put: (OhmPExprAlt newOn: {OhmPExprApply newOn: #normalAddExpr . OhmPExprApply  newOn: #wrappedAddExpr }).
	rules at: #wrappedAddExpr put: (OhmPExprSeq newOn: {OhmPExprString newOn: '>>' . OhmPExprApply newOn: #addExpr . OhmPExprString newOn: '>>' }).
	rules at: #normalAddExpr put: (OhmPExprSeq newOn: {OhmPExprApply newOn: #addExprRec . OhmPExprString newOn: '+' . OhmPExprApply newOn: #primaExpr}).
	rules at: #addExprRec put:  (OhmPExprAlt newOn: {OhmPExprApply newOn: #addExpr . OhmPExprApply  newOn: #primaExpr}).
	rules at: #primaExpr put: (OhmPExprAlt newOn: {OhmPExprApply newOn: #primaExprRec . OhmPExprApply newOn: #priExpr}).
	rules at: #primaExprRec put: (OhmPExprSeq newOn: {OhmPExprApply newOn: #primaExpr . OhmPExprString  newOn: '-'}).
	rules at: #priExpr put: (OhmPExprRegex newOn: '[0-9]').

	grammar := OhmGrammar newWithName: 'TestGrammar' ruleDictionary: rules.

	self
		assertGrammar: grammar
		startingFrom: #addExpr
		compliesWithFixture: #matchContents
		fromFixtureSet: #leftRecursionSideNested
	
)

testLeftRecursionCanBeDealtWithSideNestedIterativeImpl = (
	"This is the iterative implementation of #testLeftRecursionCanBeDealtWithSideNested which does not
	suffer from the same problem."
	"M {
            addExpr = normalAddExpr | wrappedAddExpr
		wrappedAddExpr = "">>"" addExpr "">>""
		normalAddExpr  = addExpRec ""+"" primaExpr
		addExprRec = addExpr | primaExpr
		primaExpr = priExpr ""-""*
            priExpr = /[0-9]/ }"
	| rules grammar |
	rules := Dictionary new.
	rules at: #addExpr put: (OhmPExprAlt newOn: {OhmPExprApply newOn: #normalAddExpr . OhmPExprApply  newOn: #wrappedAddExpr }).
	rules at: #wrappedAddExpr put: (OhmPExprSeq newOn: {OhmPExprString newOn: '>>' . OhmPExprApply newOn: #addExpr . OhmPExprString newOn: '>>' }).
	rules at: #normalAddExpr put: (OhmPExprSeq newOn: {OhmPExprApply newOn: #addExprRec . OhmPExprString newOn: '+' . OhmPExprApply newOn: #primaExpr}).
	rules at: #addExprRec put:  (OhmPExprAlt newOn: {OhmPExprApply newOn: #addExpr . OhmPExprApply  newOn: #primaExpr }).
	rules at: #primaExpr put: (OhmPExprSeq newOn: {OhmPExprApply newOn: #priExpr . OhmPExprMany newStarOn: (OhmPExprString newOn: '-')}).
	rules at: #priExpr put: (OhmPExprRegex newOn: '[0-9]').

	grammar := OhmGrammar newWithName: 'TestGrammar' ruleDictionary: rules.

	self
		assertGrammar: grammar
		startingFrom: #addExpr
		compliesWithFixture: #matchContents
		fromFixtureSet: #leftRecursionSideNested
	
)

testLeftRecursionCanBeDealtWithSideNestedSimple = (

	"M {
            addExpr = wrappedAddExpr | primaExpr
		wrappedAddExpr = "">>"" addExpr "">>""
		primaExpr = primaExprRec | priExpr
		primaExprRec = primaExpr ""-""
            priExpr = /[0-9]/ }"
	| rules grammar |
	rules := Dictionary new.
	rules at: #addExpr put: (OhmPExprAlt newOn: {OhmPExprApply newOn: #wrappedAddExpr . OhmPExprApply  newOn: #primaExpr }).
	rules at: #wrappedAddExpr put: (OhmPExprSeq newOn: {OhmPExprString newOn: '>>' . OhmPExprApply newOn: #addExpr . OhmPExprString newOn: '>>' }).
	rules at: #primaExpr put: (OhmPExprAlt newOn: {OhmPExprApply newOn: #primaExprRec . OhmPExprApply newOn: #priExpr}).
	rules at: #primaExprRec put: (OhmPExprSeq newOn: {OhmPExprApply newOn: #primaExpr . OhmPExprString  newOn: '-'}).
	rules at: #priExpr put: (OhmPExprRegex newOn: '[0-9]').

	grammar := OhmGrammar newWithName: 'TestGrammar' ruleDictionary: rules.

	self assert: (grammar match: '>>>>2>>>>' startingFrom: #addExpr) succeeded.
	self assert: (grammar match: '>>>>2-->>>>' startingFrom: #addExpr) succeeded
	
)


)
