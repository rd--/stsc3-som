OhmGrammarBuilderTest = TestCase (
| b |

setUp = (

	b := OhmGrammarBuilder new.
)

tearDown = (

	b := nil.
)

testBuildAWorkingGrammarWithApply = (

	| grammar |
	b setGrammarName: 'TestGrammar'.
	b addRule: 'foo' as: (b seq: { b star: ( b string: 'foo' ) . b apply: 'digit' }).
	b addRule: 'digit' as: (b regex: '[0-9]').
	grammar := b buildGrammar.

	self assert: (grammar doesMatch: 'foo2' startingFrom: 'foo').
	self assert: (grammar doesMatch: '2' startingFrom: 'foo').
	self assert: (grammar doesMatch: 'foofoo2' startingFrom: 'foo').
)

testBuilderAddRule = (

	| grammar |
	b addRule: 'failer' as: b fail.
	grammar := b buildGrammar.

	self
		assert: (grammar ruleNamed: 'failer') class expressionName
		equals: #ohmPExprFail.
)

testBuilderBuildGrammar = (

	| grammar |
	grammar := b buildGrammar.
	self assert: '' equals: grammar grammarName.
)

testBuilderSetName = (

	| grammar |
	b setGrammarName: 'TestGrammar'.
	grammar := b buildGrammar.

	self assert: 'TestGrammar' equals: grammar grammarName.
)

testCreateBuilder = (

	OhmGrammarBuilder new.
)


)
