OhmRuleDefine = OhmRule (
| description |

description = (

	^ description
)

description: anObject = (

	description := anObject
)

dispatchedBodyOn: aGrammar = (

	^ self body
)

installInto: ruleDict = (

	self body description: self description.
	ruleDict at: self ruleName put: self body.
)

performChecksFor: aGrammar = (
 
	(aGrammar superGrammar rules keys includes: self ruleName)
		ifTrue: [ OhmDuplicateRuleDeclarationError signalForRule: self ruleName inGrammar: aGrammar superGrammar grammarName ].

	super performChecksFor: aGrammar.
)

toRecipe = (

	^ 'b addRule:' , 
		self ruleName printString , 
		'as: (' , 
		self body toRecipe , 
		') withParameters: {'
		, ((self parameters collect: [:p | p asSymbol printString])
			joinSeparatedBy: ' . ')
		,'}.'
)

initialize = (

	super initialize.
	self description: ''
)


----------------------------

newNamed: ruleName body: b description: ruleDescription = (

	^ self new
		ruleName: ruleName;
		body: b;
		description: ruleDescription;
		yourself
)

newNamed: ruleName body: b textualRepresentation: source description: ruleDescription = (

	^ self new
		ruleName: ruleName;
		body: b;
		description: ruleDescription;
		textualRepresentation: source;
		yourself
)

newNamed: ruleName withParameters: parameters body: b description: ruleDescription = (

	^ self new
		ruleName: ruleName;
		parameters: parameters;
		body: b;
		description: ruleDescription;
		yourself
)


comment = (^'
No comment
')


)
