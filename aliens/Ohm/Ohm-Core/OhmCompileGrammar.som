OhmCompileGrammar = OhmSemanticAction (
| namespace |

Grammar: aNode with: grammarHeaderNode with: x with: rulesNode with: xx = (

	| aGrammar rules |

	aGrammar := (self grammar semanticAction: (OhmCompileGrammarHeader newIn: namespace)) 
					value: grammarHeaderNode.
	
	rules := ((self grammar semanticAction: OhmCompileRuleAttribute new) value: rulesNode) gather: [:id | id].
	rules ifNotEmpty: [ aGrammar defaultStartRuleName: rules first name asSymbol ].
	OhmCompiler installRules: rules into: aGrammar.
	
	^ aGrammar
)

Grammars: aNode with: grammarsNode = (

	^ self value: grammarsNode
)

initialize = (

	super initialize.
	self namespace: OhmNamespace defaultNamespace.
)

namespace = (

	^ namespace
)

namespace: anObject = (

	namespace := anObject
)


----------------------------

newIn: namespace = (

	^ self new
		namespace: namespace;
		yourself
)


comment = (^'
No comment
')


)
