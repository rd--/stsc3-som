OhmInputStream = Object (
| contentStream positionInfo |

asString = (

	^  self contentStream contents asString
)

atEnd = (

	^ self contentStream atEnd
)

contents = (

	^ self contentStream contents
)

contents: aCollection = (

	self contentStream: (ReadStream on: aCollection).
	self positionInfo: (Array new: aCollection size + 1).
	(1 to: self positionInfo size) do: [ :index |
		self positionInfo at: index put: (OhmPositionInfo new)]
)

getState = (

	^ self contentStream position
)

isStringStream = (

	^ false
)

next = (

   | nextToken |
	nextToken := self contentStream next.
	nextToken ifNil: [^ #ohmFail].
	^ nextToken
		
)

setState: memento = (

	^ self contentStream position: memento
)

size = (

	^ self contentStream size
)

contentStream = (

	^ contentStream
)

contentStream: anObject = (

	contentStream := anObject
)

currentIntervalFrom: start = (

	| currentPosition end |
	currentPosition := self contentStream position.
	(currentPosition = 0) ifTrue: [ ^ OhmInterval newOn: self from: 0 to: 0 ].
	end := (self atEnd and: [currentPosition = start]) ifTrue: [ currentPosition + 1] ifFalse: [currentPosition].

	^ OhmInterval
		newOn: self 
		from: start + 1
		to: end
)

currentPositionInfo = (

	^ self positionInfoAt:  self contentStream position 
)

positionInfo = (

	^ positionInfo
)

positionInfo: anObject = (

	positionInfo := anObject
)

positionInfoAt: position = (

	"Shifted by one as there is the 0 position in the input stream"
	^ self positionInfo at: position + 1
)

getMemoizedResultFor: ruleName = (

	^ (self positionInfo at: self contentStream position + 1)
				memoizedResultFor: ruleName 
				ifAbsent: [ ^ #ohmFail ]
)

memoizeLeftRecursionFor: ruleName at: position = (

	(self positionInfo at: position + 1)
		forRule: ruleName
		memoizeResult: (OhmInputMemoizedLeftRecursion new)
)

memoizeLeftRecursionResult: bindings hasMatched: hasMatched at: position for: ruleName withFailures: failureDescriptor = (

	| memo aPositionInfo |
	aPositionInfo := self positionInfo at: position + 1.
	memo := OhmInputMemoizedResult 
				newWithResult: bindings
				andFailures: failureDescriptor
				hasMatched: hasMatched
				andInvolvedRules: aPositionInfo currentLeftRecursion involvedRules
				on: self getState.

	aPositionInfo
		forRule: ruleName
		memoizeResult: memo
)

memoizeResult: bindings hasMatched: hasMatched at: position for: ruleName withFailures: failureDescriptor = (

	(self positionInfo at: position + 1)
		forRule: ruleName
		memoizeResult: (OhmInputMemoizedResult 
							newWithResult: bindings
							andFailures: failureDescriptor
							hasMatched: hasMatched 
							on: self getState)
)

initialize = (
)

matchCaseInsensitiveString: aString = (

	aString do: [ :aCharacter |	
		self next asLowercase = aCharacter asLowercase
			ifFalse: [ ^ #ohmFail ] ].
		
	^ true
)

matchExactly: token = (

	^ self next = token
		ifFalse: [ #ohmFail ]
		ifTrue: [ true ]
)

matchRegex: regex = (

	| token |
	token := self next asString.
	^ (regex matches: token)
		ifFalse: [ #ohmFail ]
		ifTrue: [ token ]
)

matchString: aString = (

	aString do: [ :aCharacter |
		| matches |
		matches := self matchExactly: aCharacter.
		matches == #ohmFail
			ifTrue: [ ^ #ohmFail ] ].
		
	^ true
)


----------------------------

newOn: aSequencableCollection = (

	^ (self new)
		contents: aSequencableCollection;
		yourself
)

on: aSequencableCollection = (

	| newStream |
	newStream := aSequencableCollection ohmInputStreamClass newOn: aSequencableCollection.
	^ newStream
)


comment = (^'
No comment
')


)
