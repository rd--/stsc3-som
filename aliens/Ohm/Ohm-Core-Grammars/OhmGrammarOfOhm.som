OhmGrammarOfOhm = OhmGrammarSmalltalkProxy (
----------------------------

OhmInstance = (

	"Same lazy loading procedure as for normal grammars but with different call."

	^ OhmInstance 
		ifNil: [ 
			isLoading ifNil: [isLoading := false].
			isLoading 
					ifFalse: [
						isLoading := true.
					 	[self bootstrapTheOhmGrammar] 
							ensure: [isLoading := false].
					 	OhmInstance]
					ifTrue: [ self bootstrapOhmGrammar ]]
)

bootstrapOhmGrammar = (

| b |
b := OhmGrammarBuilder new.
b setGrammarName: 'Ohm'.

b addRule:'Grammar'as: (b seq: {b apply: #GrammarHeader . b prim: '{' . b star: (b apply: #Rule) . b prim: '}'}).
b addInlineRule:'escapeChar_carriageReturn'as: (b prim: '\r').
b addInlineRule:'reCharClass_unicode'as: (b seq: {b prim: '\p{' . b plus: (b regex: '[A-Za-z]') . b prim: '}'}).
b addInlineRule:'reCharClass_ordinary'as: (b seq: {b prim: '[' . b star: (b alt: {b prim: '\]' . b seq: {b not: (b prim: ']') . b apply: #any}}) . b prim: ']'}).
b addRule:'ParamsList'as: (b seq: {b apply: #Seq . b star: (b seq: {b prim: ',' . b apply: #Seq})}).
b addRule:'Term'as: (b alt: {b apply: #'Term_inline' . b apply: #Seq}).
b addInlineRule:'comment_multiLine'as: (b seq: {b prim: '/*' . b star: (b seq: {b not: (b prim: '*/') . b apply: #any}) . b prim: '*/'}).
b addRule:'number'as: (b seq: {b opt: (b prim: '-') . b plus: (b apply: #digit)}).
b addInlineRule:'Base_terminal'as: (b apply: #ohmTerminal).
b addRule:'oneCharTerminal'as: (b seq: {b prim: '"' . b apply: #terminalChar . b prim: '"'}).
b addRule:'Alt'as: (b alt: {b apply: #'Alt_rec' . b apply: #Term}).
b addRule:'regExp'as: (b seq: {b prim: '/' . b apply: #reCharClass . b prim: '/'}).
b addInlineRule:'SuperGrammar_qualified'as: (b seq: {b prim: '<:' . b apply: #ident . b prim: '.' . b apply: #ident}).
b addRule:'nameRest'as: (b alt: {b prim: '_' . b prim: '-' . b apply: #alnum}).
b addRule:'Seq'as: (b star: (b apply: #Iter)).
b addInlineRule:'Iter_star'as: (b seq: {b apply: #Pred . b prim: '*'}).
b addRule:'GrammarHeader'as: (b seq: {b apply: #GrammarName . b opt: (b apply: #SuperGrammar)}).
b addInlineRule:'Rule_override'as: (b seq: {b apply: #ident . b opt: (b apply: #Formals) . b opt: (b apply: #ruleDescr) . b prim: ':=' . b apply: #Alt}).
b addInlineRule:'Base_paren'as: (b seq: {b prim: '(' . b apply: #Alt . b prim: ')'}).
b addRule:'ruleDescrText'as: (b star: (b seq: {b not: (b prim: ')') . b apply: #any})).
b addRule:'Base'as: (b alt: {b apply: #'Base_application' . b apply: #'Base_range' . b apply: #'Base_terminal' . b apply: #'Base_paren'}).
b addInlineRule:'escapeChar_unicodeEscape'as: (b seq: {b prim: '\u' . b apply: #hexDigit . b apply: #hexDigit . b apply: #hexDigit . b apply: #hexDigit}).
b addInlineRule:'comment_singleLine'as: (b seq: {b prim: '//' . b star: (b seq: {b not: (b prim: '
') . b apply: #any}) . b prim: '
'}).
b addInlineRule:'Base_application'as: (b seq: {b apply: #ident . b opt: (b apply: #Params) . b not: (b alt: {b seq: {b opt: (b apply: #ruleDescr) . b prim: '='} . b prim: ':=' . b prim: '+='})}).
b addInlineRule:'Iter_plus'as: (b seq: {b apply: #Pred . b prim: '+'}).
b addInlineRule:'escapeChar_hexEscape'as: (b seq: {b prim: '\x' . b apply: #hexDigit . b apply: #hexDigit}).
b addRule:'comment'as: (b alt: {b apply: #'comment_singleLine' . b apply: #'comment_multiLine'}).
b addInlineRule:'GrammarName_qualified'as: (b seq: {b apply: #ident . b prim: '.' . b apply: #ident}).
b addRule:'nameFirst'as: (b alt: {b prim: '_' . b apply: #letter}).
b addInlineRule:'GrammarName_unqualified'as: (b apply: #ident).
b addRule:'terminalChar'as: (b alt: {b apply: #escapeChar . b seq: {b not: (b prim: '\') . b not: (b prim: '"') . b not: (b prim: '
') . b apply: #any}}).
b addRule:'ohmTerminal'as: (b alt: {b apply: #string . b apply: #regExp . b apply: #number}).
b addInlineRule:'escapeChar_tab'as: (b prim: '\t').
b addInlineRule:'escapeChar_doubleQuote'as: (b prim: '\"').
b addInlineRule:'Base_range'as: (b seq: {b apply: #oneCharTerminal . b prim: '..' . b apply: #oneCharTerminal}).
b addRule:'ident'as: (b apply: #name).
b addRule:'ruleDescr'as: (b seq: {b prim: '(' . b apply: #ruleDescrText . b prim: ')'}).
b addInlineRule:'escapeChar_backspace'as: (b prim: '\b').
b addRule:'caseName'as: (b seq: {b prim: '--' . b star: (b seq: {b not: (b prim: '
') . b apply: #space}) . b apply: #name . b star: (b seq: {b not: (b prim: '
') . b apply: #space}) . b alt: {b prim: '
' . b lookahead: (b prim: '}')}}).
b addRule:'Rule'as: (b alt: {b apply: #'Rule_define' . b apply: #'Rule_override' . b apply: #'Rule_extend' . b apply: #'Rule_extend'}).
b addRule:'GrammarName'as: (b alt: {b apply: #'GrammarName_qualified' . b apply: #'GrammarName_unqualified'}).
b addInlineRule:'Term_inline'as: (b seq: {b apply: #Seq . b apply: #caseName}).
b addRule:'reCharClass'as: (b alt: {b apply: #'reCharClass_unicode' . b apply: #'reCharClass_ordinary'}).
b addInlineRule:'Iter_opt'as: (b seq: {b apply: #Pred . b prim: '?'}).
b addInlineRule:'Alt_rec'as: (b seq: {b apply: #Term . b prim: '|' . b apply: #Alt}).
b addInlineRule:'SuperGrammar_unqualified'as: (b seq: {b prim: '<:' . b apply: #ident}).
b addInlineRule:'Rule_define'as: (b seq: {b apply: #ident . b opt: (b apply: #Formals) . b opt: (b apply: #ruleDescr) . b prim: '=' . b apply: #Alt}).
b addInlineRule:'Rule_extend'as: (b seq: {b apply: #ident . b opt: (b apply: #Formals) . b prim: '+=' . b apply: #Alt}).
b addRule:'SuperGrammar'as: (b alt: {b apply: #'SuperGrammar_qualified' . b apply: #'SuperGrammar_unqualified'}).
b addInlineRule:'Pred_lookahead'as: (b seq: {b prim: '&' . b apply: #Base}).
b addRule:'name'as: (b seq: {b apply: #nameFirst . b star: (b apply: #nameRest)}).
b extendRule:'space'with: (b apply: #comment).
b addRule:'Iter'as: (b alt: {b apply: #'Iter_star' . b apply: #'Iter_plus' . b apply: #'Iter_opt' . b apply: #Pred}).
b addRule:'Grammars'as: (b star: (b apply: #Grammar)).
b addInlineRule:'escapeChar_backslash'as: (b prim: '\\').
b addInlineRule:'escapeChar_lineFeed'as: (b prim: '\n').
b addRule:'escapeChar'as: (b alt: {b apply: #'escapeChar_backslash' . b apply: #'escapeChar_doubleQuote' . b apply: #'escapeChar_singleQuote' . b apply: #'escapeChar_backspace' . b apply: #'escapeChar_lineFeed' . b apply: #'escapeChar_carriageReturn' . b apply: #'escapeChar_tab' . b apply: #'escapeChar_unicodeEscape' . b apply: #'escapeChar_hexEscape'}).
b addRule:'Formals'as: (b seq: {b prim: '<' . b apply: #FormalsList . b prim: '>'}).
b addRule:'Params'as: (b seq: {b prim: '<' . b apply: #ParamsList . b prim: '>'}).
b addInlineRule:'escapeChar_singleQuote'as: (b prim: '\''').
b addInlineRule:'Pred_not'as: (b seq: {b prim: '~' . b apply: #Base}).
b addRule:'FormalsList'as: (b seq: {b apply: #ident . b star: (b seq: {b prim: ',' . b apply: #ident})}).
b addRule:'string'as: (b seq: {b prim: '"' . b star: (b apply: #terminalChar) . b prim: '"'}).
b addRule:'Pred'as: (b alt: {b apply: #'Pred_not' . b apply: #'Pred_lookahead' . b apply: #Base}).
^ b buildGrammar
)

bootstrapTheOhmGrammar = (

	| cst |
	cst := self bootstrapOhmGrammar match: self ohmGrammarDefinition startingFrom: #Grammar.
	OhmInstance := (self bootstrapOhmGrammar semanticAction: OhmCompileGrammar new) value: cst.
	OhmInstance smalltalkPlaceholder: self.
	^ OhmInstance
)

ohmGrammarDefinition = (

	^ self serializedGrammar
)

serializedGrammar = (
^ 'Ohm <: BuiltInRules {

Alt
    = Term "|" Alt  -- rec
    | Term

Base
    = ident Params? ~(ruleDescr? "=" | ":=" | "+=")  -- application
    | oneCharTerminal ".." oneCharTerminal -- range
    | ohmTerminal   -- terminal
    | "(" Alt ")"                           -- paren

Formals
    = "<" FormalsList ">"

FormalsList
    = ident ("," ident)*

Grammar
    = GrammarHeader "{" Rule* "}"

GrammarHeader
    = GrammarName SuperGrammar?

GrammarName
    = ident "." ident -- qualified
    | ident           -- unqualified

Grammars
    = Grammar*

Iter
    = Pred "*"  -- star
    | Pred "+"  -- plus
    | Pred "?"  -- opt
    | Pred

Lex
  = "#" Base -- lex
   | Base

Params
    = "<" ParamsList ">"

ParamsList
    = Seq ("," Seq)*

Pred
    = "~" Lex  -- not
    | "&" Lex  -- lookahead
    | Lex

Rule
    = ident Formals? ruleDescr? "="  Alt  -- define
    | ident  Formals? ruleDescr? ":=" Alt  -- override
    | ident  Formals?             "+=" Alt  -- extend
    | ident  Formals?            "+=" Alt  -- extend

Seq
    = Iter*

SuperGrammar
    = "<:" ident "." ident  -- qualified
    | "<:" ident              -- unqualified

Term
    = Seq caseName -- inline
    | Seq

caseName
    = "--" (~"\n" space)* name (~"\n" space)* ("\n" | &"}")

comment
   = "//" (~"\n" any)* "\n"  -- singleLine
    | "/*" (~"*/" any)* "*/"  -- multiLine

escapeChar
    = "\\\\"                                     -- backslash
    | "\\\""                                      -- doubleQuote
    | "\\\''"                                      -- singleQuote
    | "\\b"                                      -- backspace
    | "\\n"                                      -- lineFeed
    | "\\r"                                      -- carriageReturn
    | "\\t"                                      -- tab
    | "\\u" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape
    | "\\x" hexDigit hexDigit                    -- hexEscape

ident 
    = ~keyword name

keyword
    = "undefined" ~nameRest  -- undefined
    | "null" ~nameRest       -- null
    | "true" ~nameRest       -- true
    | "false" ~nameRest      -- false

name 
    = nameFirst nameRest*

nameFirst
    = "_"
    | letter

nameRest
    = "_"
    | "-"
    | alnum

number
    = "-"? digit+

ohmTerminal
    = keyword | string | regExp | number

oneCharTerminal
    = "\"" terminalChar "\""

reCharClass
    = "\\p{" /[A-Za-z]/+ "}"    -- unicode
    | "[" ("\\]" | ~"]" any)* "]" -- ordinary

regExp 
    = "/" reCharClass "/"

ruleDescr
    = "(" ruleDescrText ")"

ruleDescrText
    = (~")" any)*

space
   += comment

string 
    = "\"" terminalChar* "\""

terminalChar
    = escapeChar
     | ~"\\" ~"\"" ~"\n" any}'
)


comment = (^'
No comment
')


)
