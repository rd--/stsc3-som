OhmPExprMany = OhmParsingExpression (
| term min |

arity = (

	^ self term arity
)

asActionBindingName = (

	^ 'many' , self term asActionBindingName capitalized , 's' 
)

assertChoicesHaveUniformArity: ruleName = (

	self term assertChoicesHaveUniformArity: ruleName
)

doEval: state = (
	
	| originalInputState matchCount result columns row |
	
	originalInputState := state inputStream getState.
	
	columns := (1 to: self arity) collect:	[ :n | OrderedCollection new ].

	matchCount := 0.
	[	| backtrackPosition | 
	 	 backtrackPosition := state inputStream getState.
		row := OrderedCollection new.
		state pushBindings: row.
		result := self term eval: state.
		state popBindings.
		result
			ifTrue: [	matchCount := matchCount + 1.
					self putRow: row intoColumns: columns. ]
			ifFalse: [state inputStream setState: backtrackPosition]
	 ] doWhileTrue: [result].
	
	matchCount < self min
		ifTrue: [ ^ false ]
		ifFalse: [columns do: [:column | 
					state 
						addNodeNamed: self class listRuleIdentifier 
						startedAt: originalInputState 
						withChildren: column].
			^ true ]
)

innerNodesAt: parsingState = (

	^ { self term } 
)

min = (

	^ min
)

min: anObject = (

	min := anObject
)

nodesResultingInCST = (

	^ { self term }
)

putRow: row intoColumns: columns = (

	row withIndexDo: [:element :index | 
		(columns at: index) add: element ]
)

term = (

	^ term
)

term: anObject = (

	term := anObject
)

toRecipe = (

	| operator |

	self min = 0
		ifTrue: [ operator := 'star' ]
		ifFalse: [ operator := 'plus' ].

	^ 'b ' , operator , ': (' , self term toRecipe , ')'
)

totalNumberOfExpressions = (

	^ super totalNumberOfExpressions + self term  totalNumberOfExpressions
)

weightedComplexity = (

	^ 2 + self term weightedComplexity
)

replaceParametersWithArguments: arguments = (

	^ self class 
		newOn: (self term replaceParametersWithArguments: arguments) 
		minimalMatches: self min
)


----------------------------

expressionName = (

	^ #ohmPExprMany
)

newOn: term minimalMatches: min = (

	^ (self new)
		term: term;
		min: min;
		yourself
)

newPlusOn: term = (
	|newExpr|
	newExpr := self newOn: term minimalMatches: 1.
	term parentExpression: newExpr.
	^ newExpr
)

newStarOn: term = (

	|newExpr|
	newExpr := self newOn: term minimalMatches: 0.
	term parentExpression: newExpr.
	^ newExpr
)


comment = (^'
No comment
')


)
