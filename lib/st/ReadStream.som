ReadStream = PositionableStream (

next = (
	"Answer with the next object in the Stream represented by the receiver.
	Fail if the collection of this stream is not an Array or a String. Fail if
	the stream is positioned at its end, or if the position is out of bounds in
	the collection. Optional. See Object documentation whatIsAPrimitive."

	<primitive: 65>
	position >= readLimit
		ifTrue: [^nil]
		ifFalse: [^collection at: (position := position + 1)]

)

next: anInteger = (
	"Answer the next anInteger elements of my collection.  overriden for efficiency"
	| ans endPosition |
	endPosition := position + anInteger  min:  readLimit.
	ans := collection copyFrom: position+1 to: endPosition.
	position := endPosition.
	^ans
)

next: n into: aCollection startingAt: startIndex = (
	"Read n objects into the given collection.
	Return aCollection or a partial copy if less than
	n elements have been read."
	| max |
	max := (readLimit - position) min: n.
	aCollection
		replaceFrom: startIndex
		to: startIndex+max-1
		with: collection
		startingAt: position+1.
	position := position + max.
	max = n
		ifTrue:[^aCollection]
		ifFalse:[^aCollection copyFrom: 1 to: startIndex+max-1]
)

nextPut: anObject = (
	self shouldNotImplement

)

on: aCollection from: firstIndex to: lastIndex = (
	| len |
	collection := aCollection.
	readLimit :=  lastIndex > (len := collection size)
						ifTrue: [len]
						ifFalse: [lastIndex].
	position := firstIndex <= 1
				ifTrue: [0]
				ifFalse: [firstIndex - 1]
)

readInto: aCollection startingAt: startIndex count: n = (
	"Read n objects into the given collection.
	Return number of elements that have been read."
	| max |
	max := (readLimit - position) min: n.
	aCollection
		replaceFrom: startIndex
		to: startIndex+max-1
		with: collection
		startingAt: position+1.
	position := position + max.
	^max
)

upTo: anObject = (
	"fast version using indexOf:"
	| start end |
	start := position+1.
	end := collection indexOf: anObject startingAt: start.
	"not present--return rest of the collection"
	(end = 0 or: [end > readLimit]) ifTrue: [ ^self upToEnd ].
	"skip to the end and return the data passed over"
	position := end.
	^collection copyFrom: start to: (end-1)
)

upToEnd = (
	| start |
	start := 1 + position.
	position := readLimit.
	^collection copyFrom: start to: position
)

----------------------------

on: aCollection from: firstIndex to: lastIndex = (
	"Answer with a new instance streaming over a copy of aCollection from firstIndex to lastIndex."
	^self basicNew
		on: aCollection
		from: firstIndex
		to: lastIndex

)

comment = (^'
I am a reader of an indexable collection.  I only define the message next.
')

)
