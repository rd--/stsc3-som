Behavior = Object (

allSelectors = (
    "Answer all selectors understood by instances of the receiver"
    ^(Array streamContents: [ :stream |
        self withAllSuperclassesDo: [ :aClass |
            aClass selectorsDo: [ :each |
                stream nextPut: each ] ] ]) asIdentitySet
)

basicNew = (
	<primitive: 70>
	self isVariable ifTrue: [^self basicNew: 0].
	self primitiveFailed
)

basicNew: sizeRequested = (
	<primitive: 71>
	self isVariable ifFalse: [self error: self asString , ' cannot have variable sized instances'].
	self primitiveFailed
)

canUnderstand: selector = (
	"Answer true if the receiver can respond to the message whose selector
	is the argument, false otherwise.  The selector can be in the method dictionary
	of the receiver's class or any of its superclasses."
	(self includesSelector: selector) ifTrue: [^true].
	self superclass == nil ifTrue: [^false].
	^ self superclass canUnderstand: selector
)

flushCache = (
	<primitive: 89>
	self primitiveFailed
)

hasMethod: aSymbol = (
	self methodArray do: [ :m | m signature = aSymbol ifTrue: [ ^true ] ].
	^false
)

hasMethods = (
	"Answer whether the receiver has any methods in its method dictionary."
	^self methodArray size > 0
)

includesSelector: aSymbol = (
	"Answer whether the message whose selector is the argument is in the
	method dictionary of the receiver's class."
	^self selectors includes: aSymbol
)

inheritsFrom: aClass = (
	| aSuperclass |
	aSuperclass := self superclass.
	[aSuperclass == nil]
		whileFalse:
			[aSuperclass == aClass ifTrue: [^true].
			aSuperclass := aSuperclass superclass].
	^false
)

isVariable = (
           ^false
)

isBehavior = (
	^true
)

methodArray = (
	<primitive: -1>
	self primitiveFailed
)

new = (
	^ self basicNew initialize
)

new: sizeRequested = (
	^ (self basicNew: sizeRequested) initialize
)

selectors = (
	^self methodArray collect: [ :item | item signature ]
)

selectorsDo: selectorBlock = (
	"Evaluate selectorBlock for all the message selectors in my method dictionary."
	^self selectors do: selectorBlock
)

superclass = (
	<primitive: -1>
	self primitiveFailed
)

withAllSuperclassesDo: aBlock = (
	"Evaluate the argument, aBlock, for each of the receiver's superclasses."
	aBlock value: self.
	self superclass == nil
		ifFalse: [self superclass withAllSuperclassesDo: aBlock]
)

)
