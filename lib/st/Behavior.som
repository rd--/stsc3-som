Behavior = Object (

>> selector = (
	"Answer the compiled method associated with the argument, selector (a
	Symbol), a message selector in the receiver's method dictionary. If the
	selector is not in the dictionary, create an error notification."
	^self compiledMethodAt: selector
)

allInstVarNames = (
	"Gnu returns symbols, Squeak returns strings"
	<primitive: -1>
	self primitiveFailed
)

allSelectors = (
    "Answer all selectors understood by instances of the receiver"
    ^(Array streamContents: [ :stream |
        self withAllSuperclassesDo: [ :aClass |
            aClass selectorsDo: [ :each |
                stream nextPut: each ] ] ]) asIdentitySet
)

allSubclasses = (
	"Answer a Collection of the receiver's and the receiver's descendent's subclasses. "
	| scan scanTop |
	scan := OrderedCollection withAll: self subclasses.
	scanTop := 1.
	[scanTop > scan size]
		whileFalse: [scan addAll: (scan at: scanTop) subclasses.
			scanTop := scanTop + 1].
	^ scan
)

allSuperclasses = (
	"Answer an OrderedCollection of the receiver's and the receiver's
	ancestor's superclasses. The first element is the receiver's immediate
	superclass, followed by its superclass; the last element is Object."
	| temp |
	^ self superclass == nil
		ifTrue: [ OrderedCollection new]
		ifFalse: [temp := self superclass allSuperclasses.
			temp addFirst: self superclass.
			temp]
)

basicNew = (
	<primitive: 70>
	self isVariable ifTrue: [^self basicNew: 0].
	self primitiveFailed: 'Behaviour.basicNew'
)

basicNew: sizeRequested = (
	<primitive: 71>
	self isVariable ifFalse: [self error: self asString , ' cannot have variable sized instances'].
	self primitiveFailed: 'Behaviour.basicNew:'
)

canUnderstand: selector = (
	"Answer true if the receiver can respond to the message whose selector
	is the argument, false otherwise.  The selector can be in the method dictionary
	of the receiver's class or any of its superclasses."
	(self includesSelector: selector) ifTrue: [^true].
	self superclass == nil ifTrue: [^false].
	^ self superclass canUnderstand: selector
)

compiledMethodAt: selector = (
	"Answer the compiled method associated with the argument, selector (a
	Symbol), a message selector in the receiver's method dictionary. If the
	selector is not in the dictionary, create an error notification."
	^ self methodDict at: selector
)

deepCopy = (
	"Behavior are shared rather than copied."
	^ self
)

flushCache = (
	<primitive: 89>
	self primitiveFailed
)

hasMethod: aSymbol = (
	self methodArray do: [ :m | m selector = aSymbol ifTrue: [ ^true ] ].
	^false
)

hasMethods = (
	"Answer whether the receiver has any methods in its method dictionary."
	^self methodArray size > 0
)

includesBehavior: aClass = (
	^self == aClass or:[self inheritsFrom: aClass]
)

includesSelector: aSymbol = (
	"Answer whether the message whose selector is the argument is in the
	method dictionary of the receiver's class."
	^self selectors includes: aSymbol
)

inheritsFrom: aClass = (
	| aSuperclass |
	aSuperclass := self superclass.
	[aSuperclass == nil]
		whileFalse:
			[aSuperclass == aClass ifTrue: [^true].
			aSuperclass := aSuperclass superclass].
	^false
)

instSize = (
	"Answer the number of named instance variables
	(as opposed to indexed variables) of the receiver."
	^self allInstVarNames size
)

instVarIndexFor: instVarName ifAbsent: aBlock = (
	"Answer the index of the named instance variable."
	^self allInstVarNames indexOf: instVarName ifAbsent: aBlock
)

isVariable = (
           ^false
)

isBehavior = (
	^true
)

lookupSelector: selector = (
	"Look up the given selector in my methodDictionary.
	Return the corresponding method if found.
	Otherwise chase the superclass chain and try again.
	Return nil if no method is found."
	| lookupClass |
	lookupClass := self.
	[lookupClass == nil]
		whileFalse:
			[(lookupClass includesSelector: selector)
				ifTrue: [^ lookupClass compiledMethodAt: selector].
			lookupClass := lookupClass superclass].
	^ nil
)

methodArray = (
	<primitive: -1>
	self primitiveFailed
)

methodDict = (
	^Dictionary newFrom: (self methodArray collect: [ :method | method selector -> method ])
)

new = (
	"Answer a new initialized instance of the receiver (which is a class) with no indexable variables. Fail if the class is indexable."
	^ self basicNew initialize
)

new: sizeRequested = (
	"Answer an initialized instance of this class with the number of indexable
	variables specified by the argument, sizeRequested."
	^ (self basicNew: sizeRequested) initialize
)

selectors = (
	^self methodArray collect: [ :item | item selector ]
)

selectorsDo: selectorBlock = (
	"Evaluate selectorBlock for all the message selectors in my method dictionary."
	self selectors do: selectorBlock
)

subclasses = (
	"Slow implementation since Behavior does not keep trace of subclasses."
	^(Smalltalk globalKeys collect: [ :each | Smalltalk global: each ]) select: [ :each | (each isKindOf: Class) and: [ each superclass = self ] ]
)

superclass = (
	<primitive: -1>
	self primitiveFailed
)

withAllSubclasses = (
	"Answer a Collection of the receiver, the receiver's descendent's, and the
	receiver's descendent's subclasses."
	^ self allSubclasses addFirst: self;
		 yourself
)

withAllSuperclasses = (
	"Answer an OrderedCollection of the receiver and the receiver's
	superclasses. The first element is the receiver,
	followed by its superclass; the last element is Object."
	| temp |
	temp := self allSuperclasses.
	temp addFirst: self.
	^ temp
)

withAllSuperclassesDo: aBlock = (
	"Evaluate the argument, aBlock, for each of the receiver's superclasses."
	aBlock value: self.
	self superclass == nil
		ifFalse: [self superclass withAllSuperclassesDo: aBlock]
)

----

initializedInstance = (
	"Answer an instance of the receiver which in some sense is initialized.
	Return nil if the receiver is reluctant for some reason to return such a thing"
	^ self new
)

)
