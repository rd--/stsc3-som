False = Boolean (

& aBoolean = (
	"Evaluating conjunction -- answer false since receiver is false, but let the VM quickly check the type of the argument first."
	aBoolean ifFalse: [ ^false ].
	^false
)

| aBoolean = (
	"Evaluating disjunction (OR) -- could  answer aBoolean since receiver is false, but let the VM quickly check the type of the argument instead."
	aBoolean ifTrue: [ ^true ].
	^false
)

==> aBlock = (
	^true
)

and: ignoredBlock = (
	^false
)

asBit = (
	^ 0
)

asString = (
	^'false'
)

ifFalse: aBlock = (
	^aBlock value
)

ifFalse: falseAlternativeBlock ifTrue: trueAlternativeBlock = (
	^falseAlternativeBlock value
)

ifTrue: ignoredBlock = (
	^nil
)

ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock = (
	^falseAlternativeBlock value
)

not = (
	^true
)

or: aBlock = (
	^aBlock value
)

printOn: aStream = (
	aStream nextPutAll: 'false'
)
xor: aBoolean = (
	"aBoolean is either a boolean, or an object who's #value returns a boolean (usually a block)."
	^aBoolean value ifTrue: [ true ] ifFalse: [ false ]
)

)
