SmalltalkImage = Object (

at: aKey = (
	^self global: aKey
)

at: aKey ifAbsent: aBlock = (
	"Answer the global associated with aKey or, if key isn't found,
	answer the result of evaluating aBlock."
	^(self hasGlobal: aKey) ifTrue: [ ^self at: aKey ] ifFalse: [ aBlock value ]
)

evaluate: aString = (
	<primitive: -1>
	self error: ('evaluate: ' , aString)
)

exit: error = (
	self quitPrimitive: error
)

exit = (
	self exit: 0
)

garbageCollect = (
	"Reclaims all garbage and answers the number of bytes of available space in the largest free chunk."
	<primitive: -1>
	^self primitiveFailed
)

global: name = (
	<primitive: -1>
	self primitiveFailed
)

global: name put: value = (
	<primitive: -1>
	self primitiveFailed
)

hasGlobal: name = (
	<primitive: -1>
	self primitiveFailed
)

includesKey: aKey = (
	^ self hasGlobal: aKey
)

initialize: arguments = (
	| application |

	"Make sure we have got at least one argument"
	(arguments size < 1) ifTrue: [ Transcript show: 'No class specified'; cr. ^nil ].

	"Load the class with the specified name, create an instance of it, and
	 run it. If there is more than only the class given on the command line,
	 and the class has a method #run:, the arguments array is passed to it,
	 otherwise, #run is sent."
	application := (self resolve: (arguments at: 1) asSymbol) new.

	^ (application respondsTo: #run:)
	    ifTrue:  [ application run: arguments ]
	    ifFalse: [ application run ]
)

loadFile: aString = (
	<primitive: -1>
	self primitiveFailed
)

load: aSymbol = (
	<primitive: -1>
	self primitiveFailed
)

primitiveGarbageCollect = (
	"Primitive. Reclaims all garbage and answers the size of the largest free chunk in old space.."

	<primitive: 130>
	^self primitiveFailed
)

print: anObject = (
	self printString: anObject printString.
	self printNewline
)

printCharacter: aCharacter = (
	<primitive: -1>
	self primitiveFailed
)

printContext = (
	<primitive: -1>
	self primitiveFailed
)

printString: aString = (
	<primitive: -1>
	self primitiveFailed
)

printNewline = (
	self printCharacter: Character linefeed
)

quitPrimitive: exitCode = (
	"Primitive. Exit with exitCode to another operating system on the host machine, if one exists. All state changes in the object space since the last snapshot are lost. Ignore exitCode if it's not supported by the VM."
	<primitive: 113>
	self quitPrimitive
)

resolve: aSymbol = (
	| class |
	"Check if we've already got the global"
	(self global: aSymbol) == nil ifFalse: [ ^self global: aSymbol ].
	"Try loading the class"
	class := self load: aSymbol.
	(class == nil) ifFalse: [ ^class ].
	self error: 'Tried loading <<' , aSymbol , '>> as a class, but failed.' "quote..."
)

tinyBenchmarks = (
	"Report the results of running the two tiny Squeak benchmarks.
	ar 9/10/1999: Adjusted to run at least 1 sec to get more stable results"
	"0 tinyBenchmarks"
	"On a 292 MHz G3 Mac: 23,000,000 bytecodes/sec; 980,000 sends/sec"
	"On a 400 MHz PII/Win98:  18,000,000 bytecodes/sec; 1,100,000 sends/sec"
	"On a 2800 MHz i7:  1,200,000,000 bytecodes/sec; 25,000,000 sends/sec"
	"On a 2800 MHz i7 (CogVM):  1,700,000,000 bytecodes/sec; 260,000,000 sends/sec"
	| t1 t2 r n1 n2 |
	n1 := 1.
	[t1 := Time millisecondsToRun: [n1 benchmark].
	t1 < 1000] whileTrue:[n1 := n1 * 2]. "Note: #benchmark's runtime is about O(n)"
	n2 := 28.
	[t2 := Time millisecondsToRun: [r := n2 benchFib].
	t2 < 1000] whileTrue:[n2 := n2 + 1].
	"Note: #benchFib's runtime is about O(k^n),
		where k is the golden number = (1 + 5 sqrt) / 2 = 1.618...."
	^ ((n1 * 500000 * 1000) // t1 significantDigits: 2) asStringWithCommas, ' bytecodes/sec; ',
	  ((r * 1000) // t2 significantDigits: 2) asStringWithCommas, ' sends/sec'
)

utcOffset = (
	"Timezone offset in seconds from GMT"
	<primitive: -1>
	self primitiveFailed
)

utcTime = (
	"Current UTC time in microseconds"
	<primitive: -1>
	self primitiveFailed
)

----

new = (
	self error: 'The Smalltalk object is singular'
)

)
