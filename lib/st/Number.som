Number = Magnitude (

+ aNumber = (
	self subclassResponsibility
)

* aNumber = (
	self subclassResponsibility
)

- aNumber = (
	self subclassResponsibility
)

/ aNumber = (
	self subclassResponsibility
)

// aNumber = (
	^(self / aNumber) floor
)

\\ aNumber = (
	^self - (self // aNumber * aNumber)
)

** aNumber = (
	^ self raisedTo: aNumber
)

@ y = (
	"Primitive. Answer a Point whose x value is the receiver and whose y
	value is the argument. Optional. No Lookup. See Object documentation
	whatIsAPrimitive."
	<primitive: 18>
	^Point x: self y: y
)

abs = (
	^(self < 0) ifTrue: [ self negated ] ifFalse: [ self ]
)

adaptToCollection: rcvr andSend: selector = (
	"If I am involved in arithmetic with a Collection, return a Collection of
	the results of each element combined with me in that expression."
	^ rcvr collect: [:element | element perform: selector with: self]
)

adaptToComplex: rcvr andSend: selector = (
	"If I am involved in arithmetic with a Complex number, convert me to a Complex number."
	^ rcvr perform: selector with: self asComplex
)

adaptToFloat: rcvr andCompare: selector = (
	rcvr isFinite
		ifFalse: [
			selector == #= ifTrue: [^false].
			selector == #~= ifTrue: [^true].
			rcvr isNaN ifTrue: [^ false].
			(selector = #< or: [selector = #'<='])
				ifTrue: [^ rcvr < 0.0].
			(selector = #> or: [selector = #'>='])
				ifTrue: [^ rcvr > 0.0].
			^self error: 'unknow comparison selector'].
	self isAnExactFloat ifTrue: [^rcvr perform: selector with: self asExactFloat].
	selector == #= ifTrue: [^false].
	selector == #~= ifTrue: [^true].
	^ rcvr perform: selector with: self asFloat
)

adaptToFloat: rcvr andSend: selector = (
	"If I am involved in arithmetic with a Float, convert me to a Float."
	^ rcvr perform: selector with: self asFloat
)

adaptToFraction: rcvr andSend: selector = (
	^ self subclassResponsibility
)

arCosh = (
	^self asFloat arCosh
)

arSinh = (
	^self asFloat arSinh
)

arTanh = (
	^self asFloat arTanh
)

arcCos = (
	^self asFloat arcCos
)

arcSin = (
	^self asFloat arcSin
)

arcTan = (
	^self asFloat arcTan
)

arcTan: denominator = (
	^(self asFloat) arcTan: denominator.
)

asComplex = (
	"Answer a Complex number that represents value of the receiver."
	^ Complex real: self imaginary: 0
)

asDuration = (
	^ Duration nanoSeconds: self asInteger
)

asExactFloat = (
	"Convert this number asFloat with a priori knowledge that it is an exact Float.
	Some subclass might exploit this knowledge for a faster implementation.
	Only send this if self isAnExactFloat."
	^self asFloat
)

asInteger = (
	^self truncated
)

asNumber = (
	^ self
)

ceiling = (
	"Answer the integer nearest the receiver toward  infinity."
	| truncation |
	truncation := self truncated.
	self <= 0 ifTrue: [^truncation].
	self = truncation
		ifTrue: [^truncation]
		ifFalse: [^truncation + 1]
)

closeTo: num = (
	"are these two numbers close?"
	num isFloat ifTrue: [^ num closeTo: self asFloat].
	^self = num
)

compareSafely: aNumber = (
	^ aNumber isNumber
		ifTrue: [ self < aNumber ]
		ifFalse: [ super compareSafely: aNumber ]
)

copySignTo: aNumber = (
	"Return a number with same magnitude as aNumber and same sign as self."
	^ self signBit = 0
		ifTrue: [aNumber abs]
		ifFalse: [aNumber abs negated].
)

cos = (
	^self asFloat cos
)

cosh = (
	"Answer receivers hyperbolic cosine."
	^self asFloat cosh
)

day = (
	^ self sign days
)

days = (
	^ Duration days: self
)

degreeCos = (
	"Answer the cosine of the receiver taken as an angle in degrees."
	^ (90 - (180 + self \\ 360 - 180) abs) degreesToRadians sin
)

degreeSin = (
	"Answer the sine of the receiver taken as an angle in degrees."
	^(90 - self) degreeCos
)

degreesToRadians = (
	^self asFloat degreesToRadians
)

downTo: stop = (
	| answer index |
	answer := Array new: self - stop + 1.
	index := 1.
	self downTo: stop do: [ :item |
		answer at: index put: item.
		index := index + 1
	].
	^answer
)

downTo: stop do: aBlock = (
	self to: stop by: -1 do: aBlock
)

downTo: stop by: step do: aBlock = (
	self to: stop by: step negated do: aBlock
)

even = (
	^self \\ 2 = 0
)

exp = (
	^self asFloat exp
)

factorial = (
	^ self truncated factorial
)

floor = (
	| truncation |
	truncation := self truncated.
	self >= 0 ifTrue: [^truncation].
	self = truncation
		ifTrue: [^truncation]
		ifFalse: [^truncation - 1]
)

floorLog: radix = (
	"Answer the floor of the log base radix of the receiver."
	^(self log: radix) floor
)

fractionPart = (
	^self - self integerPart
)

hour = (
	^ self sign hours
)

hours = (
	^ Duration hours: self
)

i = (
	^ Complex real: 0 imaginary: self
)

integerPart = (
	^self truncated
)

isInfinite = (
	^ false
)

isNaN = (
	^ false
)

isNumber = (
	^true
)

isZero = (
	^self = 0
)

log = (
	^self asFloat log
)

log: aNumber = (
	aNumber = 2 ifTrue: [^self log2].
	aNumber isPowerOfTwo ifTrue: [^self log2 / aNumber log2].
	^self ln / aNumber ln
)

log2 = (
	^self asFloat log2
)

ln = (
	^self asFloat ln
)

microSecond = (
	^ self sign microSeconds
)

microSeconds = (
	^ Duration microSeconds: self
)

milliSecond = (
	^ self sign milliSeconds
)

milliSeconds = (
	^ Duration milliSeconds: self
)

minute = (
	^ self sign minutes
)

minutes = (
	^ Duration minutes: self
)

nanoSecond = (
	^ self sign nanoSeconds
)

nanoSeconds = (
	^ Duration nanoSeconds: self
)

negated = (
	^0 - self
)

negative = (
	^self < 0
)

odd = (
	^self even == false
)

positive = (
	^ self >= 0
)

printOn: aStream = (
	^self subclassResponsibility
)

printOn: aStream base: base = (
	"This method should print a representation of the number for the given base,
	excluding the base prefix (and the letter r for radix)"
	^self subclassResponsibility
)

printOn: aStream maxDecimalPlaces: placesDesired = (
	"Print a representation of the receiver on aStream in decimal notation with at most prescribed number of places after decimal separator."
	| rounder rounded roundedFractionPart placesRequired shorten |
	placesDesired <= 0 ifTrue: [^ self rounded printOn: aStream].
	rounder := 10 raisedToInteger: placesDesired.
	rounded := self roundTo: rounder reciprocal.
	rounded negative ifTrue: [aStream nextPut: $-].
	rounded := rounded abs.
	rounded integerPart truncated printOn: aStream.
	roundedFractionPart := (rounded fractionPart * rounder) truncated.
	placesRequired := placesDesired.
	[roundedFractionPart = 0 ifTrue: [^self].
	(shorten := roundedFractionPart // 10) * 10 = roundedFractionPart]
		whileTrue:
			[placesRequired := placesRequired - 1.
			roundedFractionPart := shorten].
	placesRequired > 0
		ifTrue:
			[aStream nextPut: $..
			roundedFractionPart printOn: aStream base: 10 length: placesRequired padded: true]
)

printOn: aStream showingDecimalPlaces: placesDesired = (
	"Print a representation of the receiver on aStream in decimal notation with prescribed number of places after decimal separator."
	| rounder rounded roundedFractionPart |
	placesDesired <= 0 ifTrue: [^ self rounded printOn: aStream].
	rounder := 10 raisedToInteger: placesDesired.
	rounded := self roundTo: rounder reciprocal.
	rounded negative ifTrue: [aStream nextPut: $-].
	rounded := rounded abs.
	rounded integerPart truncated printOn: aStream.
	aStream nextPut: $..
	roundedFractionPart := (rounded fractionPart * rounder) truncated.
	roundedFractionPart printOn: aStream base: 10 length: placesDesired padded: true
)

printShowingDecimalPlaces: placesDesired = (
	"Print the receiver showing precisely the given number of places desired.  If placesDesired is positive, a decimal point and that many digits after the decimal point will always be shown.  If placesDesired is zero, a whole number will be shown, without a decimal point."
	^String new: placesDesired + 10 streamContents: [:aStream |
		self printOn: aStream showingDecimalPlaces: placesDesired]
"
23 printShowingDecimalPlaces: 2
23.5698 printShowingDecimalPlaces: 2
-234.567 printShowingDecimalPlaces: 5
23.4567 printShowingDecimalPlaces: 0
23.5567 printShowingDecimalPlaces: 0
-23.4567 printShowingDecimalPlaces: 0
-23.5567 printShowingDecimalPlaces: 0
100000000 printShowingDecimalPlaces: 1
0.98 printShowingDecimalPlaces: 5
-0.98 printShowingDecimalPlaces: 2
2.567 printShowingDecimalPlaces: 2
-2.567 printShowingDecimalPlaces: 2
0 printShowingDecimalPlaces: 2
"
)

printShowingMaxDecimalPlaces: placesDesired = (
	"Print the receiver showing at most the given number of places desired after the decimal point.
	Trailing zeros of decimal part are discarded, so the number of digits after the decimal point may vary.
	When placesDesired is zero or negative, or when fraction part vanish, no decimal point is shown."
	^String new: placesDesired + 10 streamContents: [:aStream |
		self printOn: aStream maxDecimalPlaces: placesDesired]
)

printString = (
	^self printStringBase: 10
)

printStringBase: base = (
	^ String streamContents:
		[:strm | self printOn: strm base: base]
)

quo: aNumber = (
	"Integer quotient defined by division with truncation toward zero. -9 quo:
	4 = -2, -0.9 quo: 0.4 = -2. rem: answers the remainder from this division."
	^(self / aNumber) truncated
)

radiansToDegrees = (
	^self asFloat radiansToDegrees
)

raisedTo: aNumber = (
	aNumber isInteger	ifTrue: [^self raisedToInteger: aNumber].
	aNumber = 0 ifTrue: [^1].
	aNumber = 1 ifTrue: [^self].
	^(aNumber * self ln) exp
)

raisedToInteger: anInteger = (
	anInteger isInteger ifFalse: [^self error: 'raisedToInteger: only works for integral arguments'].
	anInteger = 0 ifTrue: [^1].
	anInteger = 1 ifTrue: [^self].
	anInteger > 1
		ifTrue: [^(self * self raisedToInteger: anInteger // 2)
					* (self raisedToInteger: anInteger \\ 2)].
	^(self raisedToInteger: anInteger negated) reciprocal
)

reciprocal = (
	^1 / self
)

rem: aNumber = (
	^self - ((self quo: aNumber) * aNumber)
)

rounded = (
	^(self + (self sign / 2)) truncated
)

roundTo: quantum = (
	^(self / quantum) rounded * quantum
)

second = (
	^ self sign seconds
)

seconds = (
	^ Duration seconds: self
)

sign = (
	self > 0 ifTrue: [^1].
	self < 0 ifTrue: [^-1].
	^0
)

sign: aNumber = (
	"Return a Number with the same sign as aNumber and same magnitude as self."
	^ aNumber copySignTo: self
)

signBit = (
	"Answer 1 if the receiver is negative, zero otherwise."
	self < 0 ifTrue: [^1].
	^0
)

sin = (
	^self asFloat sin
)

sinh = (
	"Answer receivers hyperbolic sine"
	^self asFloat sinh
)

squared = (
	^self * self
)

sqrt = (
	self subclassResponsibility
)

storeOn: aStream = (
	self printOn: aStream
)

strictlyPositive = (
	"Answer whether the receiver is mathematically positive."
	^ self > 0
)

tan = (
	"The receiver represents an angle measured in radians. Answer its tangent."
	^self asFloat tan
)

tanh = (
	"Answer receivers hyperbolic tangent"
	^self asFloat tanh
)

to: stop = (
	^Interval from: self to: stop
)

to: stop by: step = (
	^Interval from: self to: stop by: step
)

to: aNumber collect: aBlock = (
    ^(self to: aNumber) collect: aBlock
)

to: stop do: aBlock = (
	| nextValue |
	nextValue := self.
	[nextValue <= stop]
		whileTrue:
			[aBlock value: nextValue.
			nextValue := nextValue + 1]
)

to: stop by: step do: aBlock = (
	| nextValue |
	nextValue := self.
	step = 0 ifTrue: [self error: 'step must be non-zero'].
	step < 0
		ifTrue: [[stop <= nextValue]
				whileTrue:
					[aBlock value: nextValue.
					nextValue := nextValue + step]]
		ifFalse: [[stop >= nextValue]
				whileTrue:
					[aBlock value: nextValue.
					nextValue := nextValue + step]]
)

truncated = (
	"Answer an integer nearest the receiver toward zero."
	^self quo: 1
)

truncateTo: aNumber = (
	"Answer the next multiple of aNumber toward zero that is nearest the receiver."
	^(self quo: aNumber) * aNumber
)

week = (
	^ self sign weeks
)

weeks = (
	^ Duration weeks: self
)

----

one = (
	^1
)

readFrom: stringOrStream = (
	"Answer a number as described on stringOrStream.
	If stringOrStream does not start with a valid number description, fail."
	^(FortranNumberParser on: stringOrStream) nextNumber
)

readFrom: stringOrStream ifFail: aBlock = (
	^(FortranNumberParser on: stringOrStream) failBlock: aBlock; nextNumber
)

zero = (
	^0
)

)
