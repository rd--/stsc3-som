Interval = SequenceableCollection (

| start stop step |

, otherCollection = (
	"Override to answer an Interval if otherCollection is an adjacent and congruent interval."
	^(otherCollection isInterval
	  and: [otherCollection increment = step
	  and: [otherCollection first = (self last + step)]])
		ifTrue: [self class from: start to: otherCollection last by: step]
		ifFalse: [super, otherCollection]
)

= anObject = (
	^ self == anObject
		or: [anObject isInterval
			ifFalse: [super = anObject]
			ifTrue:
				[start = anObject first
				 and: [step = anObject increment
				 and: [self last = anObject last]]]]
)

+ number = (
	^ start + number to: stop + number by: step
)

- number = (
	^ start - number to: stop - number by: step
)

add: newObject = (
	"Adding to an Interval is not allowed."
	self shouldNotImplement
)

anyOne = (
	"This message will fail for an empty Interval, super would not."
	^self at: 1
)

asArray = (
	^ self collect: [ :item | item ]
)

at: anInteger = (
	"Answer the anInteger'th element."
	(anInteger >= 1 and: [anInteger <= self size])
		ifTrue: [^start + (step * (anInteger - 1))]
		ifFalse: [self errorSubscriptBounds: anInteger]
)

at: anInteger put: anObject = (
	"Storing into an Interval is not allowed."
	self error: 'you can not store into an interval'
)

collect: aBlock = (
	| nextValue i result |
	result := self species new: self size.
	nextValue := start.
	i := 1.
	step < 0
		ifTrue: [[stop <= nextValue]
				whileTrue:
					[result at: i put: (aBlock value: nextValue).
					nextValue := nextValue + step.
					i := i + 1]]
		ifFalse: [[stop >= nextValue]
				whileTrue:
					[result at: i put: (aBlock value: nextValue).
					nextValue := nextValue + step.
					i := i + 1]].
	^result
)

copy = (
	"Return a copy of me.
	I override this message because my species is Array and copy, as inherited
	from SequenceableCollection, uses copyFrom:to:, which creates a new object
	of my species"
	^self shallowCopy
)

do: aBlock = (
	"Evaluate aBlock for each value of the interval.
	Implementation note: instead of repeatedly incrementing the value
	    aValue := aValue + step.
	until stop is reached,
	We prefer to recompute value from start
	    aValue := start + (index * step).
	This is better for floating points accuracy, while not degrading Integer and Fraction speed too much.
	Moreover, this is consistent with methods #at: and #size"
	| aValue index size |
	index := 0.
	size := self size.
	[index < size]
		whileTrue: [aValue := start + (index * step).
			index := index + 1.
			aBlock value: aValue]
)

extent = (
	"Answer the max - min of the receiver interval."
	"(10 to: 50) extent"
	^stop - start
)

first = (
	^start
)

hash = (
	"Hash is reimplemented because = is implemented."
        ^((start hash hashMultiply bitXor: self last hash) hashMultiply
                bitXor: self size)
)

increment = (
	"Answer the receiver's interval increment."
	^step
)

isInterval = (
	^ true
)

last = (
	^stop - (stop - start \\ step)
)

permutationsDo: aBlock = (
	"Repeatly value aBlock with a single copy of the receiver. Reorder the copy
	so that aBlock is presented all (self size factorial) possible permutations."
	"(1 to: 4) permutationsDo: [:each | Transcript cr; show: each printString]"
	self asArray permutationsDo: aBlock
)

printOn: aStream = (
	aStream nextPut: $(.
	start printOn: aStream.
	aStream nextPutAll: ' to: '.
	stop printOn: aStream.
	step ~= 1
		ifTrue:
			[aStream nextPutAll: ' by: '.
			step printOn: aStream].
	aStream nextPut: $)
)

rangeIncludes: aNumber = (
	"Return true if the number lies in the interval between start and stop."
	step >= 0
		ifTrue: [^ aNumber between: start and: stop]
		ifFalse: [^ aNumber between: stop and: start]
)

remove: newObject = (
	"Removing from an Interval is not allowed."
	self error: 'elements cannot be removed from an Interval'
)

reversed = (
	self isEmpty ifTrue: [^stop to: start by: step negated].
	^self last to: start by: step negated
)

reverseDo: aBlock = (
	"Evaluate aBlock for each element of my interval, in reverse order.
	Implementation notes: see do: for an explanation on loop detail"
	| aValue index |
	index := self size.
	[index > 0]
		whileTrue: [
			index := index - 1.
			aValue := start + (index * step).
			aBlock value: aValue]
)

setFrom: startInteger to: stopInteger by: stepInteger = (
	start := startInteger.
	stop := stopInteger.
	step := stepInteger
)

size = (
	step < 0
		ifTrue: [start < stop
				ifTrue: [^0]
				ifFalse: [^stop - start // step + 1]]
		ifFalse: [stop < start
				ifTrue: [^0]
				ifFalse: [^stop - start // step + 1]]
)

species = (
	^Array
)

storeOn: aStream = (
	"This is possible because we know numbers store and print the same"
	self printOn: aStream
)

----------------------------

from: startInteger to: stopInteger = (
	"Answer a new instance of me, starting at startInteger, ending and
	stopInteger, and with an interval increment of 1."
	^self new
		setFrom: startInteger
		to: stopInteger
		by: 1
)

from: startInteger to: stopInteger by: stepInteger = (
	"Answer a new instance of me, starting at startInteger, ending and
	stopInteger, and with an interval increment of stepInteger."
	^self new
		setFrom: startInteger
		to: stopInteger
		by: stepInteger
)

new = (
	"Create and answer with a new instance of the receiver (a class) with no indexable
	fields.  Fail if the class is indexable.  Override SequenceableCollection new.
	Essential.  See Object documentation whatIsAPrimitive."
	<primitive: 70>
	self isVariable ifTrue: [^self new: 0].
	self primitiveFailed
)

newFrom: aCollection = (
	"Answer an instance of me containing the same elements as aCollection."
    | newInterval n |
    (n := aCollection size) <= 1 ifTrue: [
		n = 0 ifTrue: [^self from: 1 to: 0].
		^self from: aCollection anyOne to: aCollection anyOne].
    	newInterval := self
		from: aCollection first
		to: aCollection last
		by: (aCollection last - aCollection first) / (n - 1).
	(newInterval hasEqualElements: aCollection)
		ifFalse:
			[self error: 'The argument is not an arithmetic progression'].
	^newInterval
)

comment = (^'
I represent a finite arithmetic progression
')

)
