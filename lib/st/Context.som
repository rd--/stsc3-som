Context = (

isContext = (
	^true
)

selector = (
	<primitive: -1>
	^ self primitiveFailed
)

sender = (
	<primitive: -1>
	^ nil
)

swapSender: coroutine = (
	"Replace the receiver's sender with coroutine and answer the receiver's
	previous sender. For use in coroutining."
	| oldSender |
	self error: 'swapSender:'.
	oldSender := sender.
	sender := coroutine.
	^oldSender
)

unwindTo: aContext = (
	| ctx unwindBlock |
	self error: 'unwindTo:'.
	ctx := self.
	[(ctx := ctx findNextUnwindContextUpTo: aContext) isNil] whileFalse: [
		(ctx tempAt: 2) ifNil:[
			ctx tempAt: 2 put: true.
			unwindBlock := ctx tempAt: 1.
			unwindBlock value]
	].
)

)
