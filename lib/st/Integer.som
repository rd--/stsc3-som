Integer = Number (

= aNumber = (
	aNumber isInteger ifTrue: [ ^false ].
	aNumber isNumber ifFalse: [ ^false ].
	^aNumber adaptToInteger: self andCompare: #=
)

asInteger = (
	^self
)

bitInvert = (
	^ -1 - self
)

floor = (
)

highBit = (
	^ self subclassResponsibility
)

isInteger = (
	^ true
)

rounded = (
)

timesRepeat: aBlock = (
	| remaining |
	remaining := self.
	[ (remaining := remaining - 1) >= 0 ] whileTrue: [
		aBlock value ]
)

----

new = (
	self == Integer ifTrue: [^ self error: 'Integer is an abstract class.  Make a concrete subclass.'].
	^ super new
)

)
