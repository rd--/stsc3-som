Symbol = String (

ascending = (
	"Return a SortFunction around the receiver, where the receiver will be used as a unary message to send to both a and b during sorting, and then the result of said send will be collated in ascending order using the <=> method."
	"#('abc' 'de' 'fghi') sorted: #size ascending >>> #('de' 'abc' 'fghi')"
	^self asSortFunction
)

asSortFunction = (
	"Return a SortFunction around the receiver, where the receiver will be used as a unary message to send to both a and b during sorting, and then the result of said send will be collated in ascending order using the <=> method."
	"#('abc' 'de' 'fghi') sorted: #size ascending >>> #('de' 'abc' 'fghi')"
	^PropertySortFunction property: self
)

asString = (
	| newString |
	newString := self species new: self size.
	newString replaceFrom: 1 to: newString size with: self startingAt: 1.
	^newString
)

asSymbol = (
)

capitalized = (
	^ self asString capitalized asSymbol
)

classPart = (
	"I must be a compound selector.  Return my class name"
	| i |
	i := self indexOf: $. ifAbsent: [self error: 'class part not found'].
	^(self copyFrom: 1 to: i-1) asSymbol
)

collatedBy: aSortFunction = (
	"Return a SortFunction around the receiver, where the receiver will be used as a unary message to send to both a and b during sorting, and then the result of said send will be collated iusing aSortFunction."
	"#('abc' 'de' 'fghi') sorted: (#size collatedWith: [:e|e bitAnd: 1]) , #size >>> #( 'de' 'fghi' 'abc')"
	^PropertySortFunction property: self collatedWith: aSortFunction asSortFunction
)

copy = (
	"Answer with the receiver, because Symbols are unique."
)

cull: anObject  = (
	^anObject perform: self
)

descending = (
	"Return a SortFunction around the receiver, where the receiver will be used as a unary message to send to both a and b during sorting, and then the result of said send will be collated in descending order using the <=> method."
	"#('abc' 'de' 'fghi') sorted: #size ascending >>> #('fghi' 'abc' 'de')"
	^self asSortFunction reversed
)

isBinary = (
	^ self isInfix.
)

isCompound = (
	"return true if the receiver is of the form Class.foo "
	^self includes: $.
)

isInfix = (
	"Answer whether the receiver is an infix message selector."
	^(self at: 1) isLetter not
)

isKeyword = (
	"Answer whether the receiver is a message keyword, i.e., ends with colon."
	self size <= 1 ifTrue: [^false].
	^(self at: self size) = $:
)

isSymbol = (
	^ true
)

isTestSelector = (
	^ self beginsWith: 'test'
)

keywords = (
	"Answer an array of the keywords that compose the receiver."
	| result aStream i l char |
	result := WriteStream on: (Array new: 10).
	aStream := WriteStream on: (String new: 16).
	i := 1.
	l := self size.
	[i <= l]
		whileTrue:
			[char := self at: i.
			aStream nextPut: char.
			(char = $: or: [i = l])
				ifTrue:
					[result nextPut: aStream contents.
					aStream reset].
			i := i + 1].
	^result contents
)

numArgs = (
	"Answer the number of arguments that the receiver requires if it is interpreted
	as a message selector."
	| len n i |
	len := self size.
	n := (self at: 1) isLetter ifTrue: [0] ifFalse: [1].
	i := 1.
	[(i := i + 1) <= len]
		whileTrue: "count colons"
			[(self at: i) = $: ifTrue: [n := n + 1]].
	^n
)

numArgs: n = (
	"Answer a string that can be used as a selector with n arguments.
	 TODO: need to be extended to support shrinking and for selectors like #+ "
	| numArgs offset |
	(numArgs := self numArgs) >= n ifTrue: [ ^self ].
	numArgs = 0
		ifTrue: [ offset := 1 ]
		ifFalse: [ offset := 0 ].
	^(String new: n - numArgs + offset * 5 + offset + self size streamContents: [ :stream |
		stream nextPutAll: self.
		numArgs = 0 ifTrue: [ stream nextPut: $:. ].
		numArgs + offset + 1 to: n do: [ :i | stream nextPutAll: 'with:' ] ]) asSymbol
)

replaceFrom: start to: stop with: replacement startingAt: repStart = (
	self errorNoModification
)

selectorPart = (
	"return just my part after the class name if the receiver is a compound selector
	 (otherwise the whole thing)"
	^(self copyFrom: (self indexOf: $.) + 1 to: self size) asSymbol
)

shallowCopy = (
)

species = (
	"Answer the preferred class for reconstructing the receiver."
	^String
)

value: anObject = (
	^anObject perform: self.
)

value: anObject value: anotherObject = (
	^anObject perform: self with: anotherObject
)

withFirstCharacterDownshifted = (
	"Answer an object like the receiver but with first character downshifted if necesary"
	^self asString withFirstCharacterDownshifted asSymbol.
)

----

newFrom: aCollection = (
	"Answer an instance of me containing the same elements as aCollection."
	^ (aCollection as: String) asSymbol
)

)
