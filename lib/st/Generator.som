Generator = Stream (

| block next thread mvar |

atEnd = (
	"Answer whether the receiver can access any more objects."
	^ next isException
)

close = (
	"Close the receiving generator and unwind its ensure-blocks."
	thread ifNotNil: [ thread kill ].
	block := next := thread := mvar := nil
)

contents = (
	"Answer the contents of this generator. Do not call this method on infinite generators."
	| stream |
	stream := (Array new: 10) writeStream.
	[ self atEnd ]
		whileFalse: [ stream nextPut: self next ].
	^ stream contents
)

fork = (
	| result |
	mvar := MVar new.
	thread := [ block value: self. self nextPut: EndOfStream new ] fork. "append EndOfStream marker"
	next := mvar next. "read initial value, self next checks for end of stream"
	^ next
)

initializeOn: aBlock = (
	block := aBlock.
	self reset
)

next = (
	"Generate and answer the next object in the receiver."
	^ self atEnd ifTrue: [ nil ] ifFalse: [ | previous | previous := next. next := mvar next. previous ].
)

nextPut: anObject = (
	"Add anObject into the generator. A synonym to #yield: and value:."
	| previous |
	previous := next.
	mvar nextPut: anObject.
	^ previous
)

peek = (
	"Answer the upcoming object of the receiver."
	^ next
)

printOn: aStream = (
	aStream nextPutAll: self class name; nextPutAll: ' on: '; print: block
)

reset = (
	"Reset the generator, i.e., start it over"
	thread ifNotNil: [ thread kill ].
	next := nil.
	[ self fork ] value
)

size = (
	"A generator does not know its size."
	^ self shouldNotImplement
)

value: anObject = (
	"Allows passing generators as arguments to methods expecting blocks.
	A synonym for #yield: / #nextPut:."
	^ self nextPut: anObject
)

yield: anObject = (
	"Yield the next value to the consumer of the generator.
	A synonym for #nextPut:"
	^ self nextPut: anObject
)

----------------------------

on: aBlock = (
	^ self basicNew initializeOn: aBlock
)

comment = (^'
A Generator transforms callback interfaces into stream interfaces.

When a producer algorithm provide results as callbacks (blocks) and a consumer algorithm expects streamable input, a Generator transforms one into the other, for example:

	| generator |
	generator := Generator on: [:g| Integer primesUpTo: 100 do:[:prime| g yield: prime]].
	[generator atEnd] whileFalse:[Transcript show: generator next; cr].

Instance Variables
	block:		<BlockClosure>	The block associated with the generator.
	next:		<Object>			The next object to return from the Generator.
	thread:		<Thread>		The thread that is running block.
	mvar:		<MVar>			The MVar that is communicating values from thread.
')

)
