Stream = Object (

atEnd = (
	self subclassResponsibility
)

contents = (
	self subclassResponsibility
)

do: aBlock = (
	[ self atEnd ] whileFalse: [ aBlock value: self next ]
)

next = (
	self subclassResponsibility
)

next: anInteger = (
	| aCollection |
	aCollection := OrderedCollection new.
	anInteger timesRepeat: [ aCollection addLast: self next ].
	^aCollection
)

next: anInteger put: anObject = (
	anInteger timesRepeat: [ self nextPut: anObject ] .
	^anObject
)

nextMatchFor: anObject = (
	^anObject = self next
)

nextPut: anObject = (
	self subclassResponsibility
)

nextPutAll: aCollection = (
	aCollection do: [ :v | self nextPut: v ] .
	^aCollection
)

readInto: aCollection startingAt: startIndex count: n = (
	"Read n objects into the given collection.
	Return number of elements that have been read."
	| obj |
	0 to: n - 1 do: [:i |
		obj := self next ifNil: [ ^i ].
		aCollection at: startIndex + i put: obj].
	^n
)

----------------------------

new = (
	self error: 'Streams are created with on: and with:'
)

)
