Float = Number (

abs = (
	^(self < 0.0) ifTrue: [ ^0.0 - self ] ifFalse: [ ^self ]
)

adaptToFraction: rcvr andSend: selector = (
	"If I am involved in arithmetic with a Fraction, convert it to a Float."
	^ rcvr asFloat perform: selector with: self
)

arCosh = (
	"Answer receiver's area hyperbolic cosine.
	That is the inverse function of cosh."
	self < 1
		ifTrue:
			[^self error: 'arCosh: receiver must be greater or equal to 1'].
	^self + 1 = self
		ifTrue: [self abs ln + 2 ln]
		ifFalse: [((self squared - 1) sqrt + self) ln]
)

arSinh = (
	"Answer receiver's area hyperbolic sine.
	That is the inverse function of sinh."
	self = 0.0 ifTrue: [^self].	"Handle negativeZero"
	^self + 1 = self
		ifTrue: [(self abs ln + 2 ln) * self sign]
		ifFalse: [((self squared + 1) sqrt + self) ln]
)

arTanh = (
	"Answer receiver's area hyperbolic tangent.
	That is the inverse function of tanh."
	self = 0.0 ifTrue: [^self].	"Handle negativeZero"
	self abs = 1 ifTrue: [^self copySignTo: Float infinity].
	self abs > 1
		ifTrue:
			[^DomainError signal: 'Receiver must be between -1.0 and 1.0'].
	^((1 + self) / (1 - self)) ln / 2
)

arcCos = (
	"Answer the angle in radians."
	^ Float halfPi - self arcSin
)

arcSin = (
	"Answer the angle in radians."
	((self < -1.0) or: [self > 1.0]) ifTrue: [self error: 'arcSin only takes values between -1 and 1'].
	((self = -1.0) or: [self = 1.0])
		ifTrue: [^ Float halfPi * self]
		ifFalse: [^ (self / (1.0 - (self * self)) sqrt) arcTan]
)

arcTan: denominator = (
	"Answer the angle in radians, taking care of 4 quadrants.
	Implementation note: use signBit and sign: in order to catch cases of negativeZero"
	self = 0.0
		ifTrue:
			[denominator signBit = 0 ifTrue: [ ^0.0 ].
			^Float pi sign: self ].
	denominator = 0.0 ifTrue: [ ^ Float halfPi sign: self ].
	denominator > 0.0 	ifTrue: [ ^(self / denominator) arcTan ].
	^(self / denominator) arcTan + (Float pi sign: self)
)

asFloat = (
)

closeTo: num = (
 	"are these two numbers close?"
	num isNumber ifFalse: [^[self = num] ifError: [false]].
	self = 0.0 ifTrue: [^num abs < 0.0001].
	num = 0 ifTrue: [^self abs < 0.0001].
	^self = num asFloat
		or: [(self - num) abs / (self abs max: num abs) < 0.0001]
)

cos = (
	^ (self + Float halfPi) sin
)

cosh = (
	"Answer receivers hyperbolic cosine."
	| ex |
	ex := self abs exp.
	^(ex + ex reciprocal) / 2
)

degreeCos = (
	^self degreesToRadians cos
)

degreeSin = (
	^self degreesToRadians sin
)

degreesToRadians = (
	^self * Float radiansPerDegree
)

hash = (
	(self isFinite and: [self fractionPart = 0.0]) ifTrue: [^self truncated hash].
	^self identityHash
)

integerPart = (
	^self - self fractionPart
)

isFinite = (
	^(self - self) = 0.0
)

isFloat = (
	^true
)

isInfinite = (
	"Return true if the receiver is positive or negative infinity."
	^ self = Float infinity or: [self = Float negativeInfinity]
)

isLiteral = (
	^self isFinite
)

isNaN = (
	"simple, byte-order independent test for Not-a-Number"
	^ self ~= self
)

isPowerOfTwo = (
	^false
)

isZero = (
	^self = 0.0
)

log = (
	^ self ln / Float ln10
)

log2 = (
	^ self significand ln / Float ln2 + self exponent
)

negated = (
	^-1.0 * self
)

predecessor = (
	^ self - Float epsilon
)

printAsLiteralOn: aStream = (
	^self storeOn: aStream
)

radiansToDegrees = (
	^self / Float radiansPerDegree
)

reciprocal = (
	^1.0 / self
)

rounded = (
	self fractionPart abs < 0.5
		ifTrue: [^self truncated]
		ifFalse: [^self truncated + self sign rounded]
)

significand = (
	^ self timesTwoPower: (self exponent negated)
)

sinh = (
	"Answer receivers hyperbolic sine"
	| ex |
	ex := self abs exp.
	^self copySignTo: (ex - ex reciprocal) / 2
)

successor = (
	^ self + Float epsilon
)

tan = (
	^ self sin / self cos
)

tanh = (
	"Answer hyperbolic tangent of receiver.
	Trivial implementation is:
		^self sinh/self cosh
	This implementation takes care not to overflow."
	| ex emx |
	self = 0.0 ifTrue: [^self].	"Handle negativeZero"
	self > 20.0 ifTrue: [^1.0].
	self < -20.0 ifTrue: [^-1.0].
	ex := self exp.
	emx := ex reciprocal.
	^(ex - emx) / (ex + emx)
)

timesTwoPower: anInteger = (
	"Answer with the receiver multiplied by 2.0 raised to the power of the argument"
	self isFinite ifFalse: [^self].
	self isZero ifTrue: [^self].
	anInteger > -30 ifTrue: [
		anInteger < 0 ifTrue: [^ self / (1 bitShift: 0 - anInteger) asFloat].
		anInteger < 30 ifTrue: [^ self * (1 bitShift: anInteger) asFloat]].
	^ self * (2.0 raisedToInteger: anInteger)
)

----

e = (
	^ 2.718281828459045235360287471353
)

epsilon = (
	^ 0.000000000001
)

halfPi = (
	^  Float pi / 2
)

infinity = (
	^ 1.0 / 0.0
)

ln2 = (
	^ 0.69314718055994530941723212145817657
)

ln10 = (
	^10.0 ln
)

nan = (
	^ 0.0 / 0.0
)

negativeInfinity = (
	^ 0.0 - Float infinity
)

negativeZero = (
	^ 1.0 / Float infinity negated
)

one = (
	^ 1.0
)

pi = (
	^  3.14159265358979323846264338327950288
)

precision = (
	"Answer the apparent precision of the floating point representation.
	That is the maximum number of radix-based digits (bits if radix=2) representable in floating point without round off error.
	Technically, 52 bits are stored in the representation, and normalized numbers have an implied leading 1 that does not need to be stored.
	Note that denormalized floating point numbers don't have the implied leading 1, and thus gradually loose precision.
	This format conforms IEEE 754 double precision standard."
	^53
)

radiansPerDegree = (
	^ Float pi / 180.0
)

readFrom: aStream = (
	^(super readFrom: aStream) asFloat
)

readFrom: aStream ifFail: aBlock = (
	^(super readFrom: aStream ifFail: [^aBlock value]) asFloat
)

sqrt2 = (
	^ 1.41421356237309504880168872420969808
)

threePi = (
	^ Float pi * 3.0
)

twoPi = (
	^ Float pi * 2.0
)

zero = (
	^ 0.0
)

)
