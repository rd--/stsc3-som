Bag = Collection (

| contents |

= aBag = (
	"Two bags are equal if
	 (a) they are the same 'kind' of thing.
	 (b) they have the same size.
	 (c) each element occurs the same number of times in both of them"
	(aBag isKindOf: Bag) ifFalse: [^false].
	self size = aBag size ifFalse: [^false].
	contents associationsDo: [:assoc|
		(aBag occurrencesOf: assoc key) = assoc value
			ifFalse: [^false]].
	^true
)

add: newObject = (
	^self add: newObject withOccurrences: 1
)

add: newObject withOccurrences: anInteger = (
	(self includes: newObject)
		ifTrue: [contents at: newObject put: anInteger + (contents at: newObject)]
		ifFalse: [contents at: newObject put: anInteger].
	^newObject
)

asBag = (
	^ self
)

asSet = (
	"Answer a set with the elements of the receiver."
	^ contents keys asSet
)

at: index = (
	self errorNotKeyed
)

at: index put: anObject = (
	self errorNotKeyed
)

cumulativeCounts = (
	"Answer with a collection of cumulative percents covered by elements so far."
	| s n |
	s := self size / 100.0. n := 0.
	^ self sortedCounts asArray collect:
		[:a | n := n + a key. (n / s roundTo: 0.1) -> a value]
)

do: aBlock = (
	contents associationsDo: [:assoc | assoc value timesRepeat: [aBlock value: assoc key]]
)

includes: anObject = (
	^contents includesKey: anObject
)

occurrencesOf: anObject = (
	"Answer how many of the receiver's elements are equal to anObject. Optimized version."
	^contents at: anObject ifAbsent: 0
)

postCopy = (
	super postCopy.
	contents := contents copy
)

remove: oldObject ifAbsent: exceptionBlock = (
	| count |
	(self includes: oldObject)
		ifTrue: [(count := contents at: oldObject) = 1
				ifTrue: [contents removeKey: oldObject]
				ifFalse: [contents at: oldObject put: count - 1]]
		ifFalse: [^exceptionBlock value].
	^oldObject
)

removeAll = (
	"Implementation Note: as contents will be overwritten, a shallowCopy of self would be modified.
	An alternative implementation preserving capacity would be to create a new contents:
	self setContents: (self class contentsClass new: contents size)."
	contents removeAll
)

setContents: aDictionary = (
	contents := aDictionary
)

setDictionary = (
	contents := self class contentsClass new
)

size = (
	| tally |
	tally := 0.
	contents do: [:each | tally := tally + each].
	^tally
)

sortedCounts = (
	| counts |
	counts := SortedCollection sortBlock: [:x :y | x >= y].
	contents associationsDo:
		[:assn |
		counts add: (Association key: assn value value: assn key)].
	^ counts
)

sortedElements = (
	| elements |
	elements := SortedCollection new.
	contents associationsDo: [:assn | elements add: assn].
	^ elements
)

sum = (
	"Faster than the superclass implementation when you hold many instances of the same value (which you probably do, otherwise you wouldn't be using a Bag)."
	| sum first |
	first := true.
	contents keysAndValuesDo: [ :value :count |
		first
			ifTrue: [ sum := value * count. first := false ]
			ifFalse: [ sum := sum + (value * count) ] ].
	first ifTrue: [ self errorEmptyCollection ].
	^sum
)

----------------------------

contentsClass = (
	^Dictionary
)

new = (
	^super new setDictionary
)

new: nElements = (
	^ super new setContents: (self contentsClass new: nElements)
)

newFrom: aCollection = (
	^ self withAll: aCollection
)

)
