Exception = Object (

| messageText |

defaultAction = (
	"The default action taken if the exception is signaled."
	self subclassResponsibility
)

defaultResumeValue = (
	"Answer the value that by default should be returned if the exception is resumed"
	^nil
)

defaultReturnValue = (
	"Answer the value that by default should be returned if the exception is returned"
	^nil
)

description = (
	"Return a textual description of the exception."
	| desc mt |
	desc := self class name asString.
	^(mt := self messageText) == nil
		ifTrue: [desc]
		ifFalse: [desc, ': ', mt]
)

isException = (
	^ true
)

messageText = (
	"Return an exception's message text."
	^ messageText ifNil: [ String empty ]
)

messageText: signalerText = (
	"Set an exception's message text."
	messageText := signalerText
)

printDetailsOn: aStream = (
	"Allow applications to optionally print extra details without overriding a base package."
)

printOn: stream = (
	stream nextPutAll: self description
)

printVerboseOn: aStream = (
	aStream
		nextPutAll: 'vvvvvvvvvvvvvvvvvv ' , self description , ' vvvvvvvvvvvvvvvvvv' ;
		cr ;
		nextPutAll: 'The time is ', DateAndTime now asString ;
		cr.
	"Allow applications to optionally print extra details without overriding a base package."
	self printDetailsOn: aStream.
	aStream
		nextPutAll: self signalerContext longStack ;
		cr ;
		nextPutAll: '^^^^^^^^^^^^^^^^^^ ' , self description , ' ^^^^^^^^^^^^^^^^^^' ;
		cr ;
		flush
)

receiver = (
	^ self signalerContext receiver
)

return = (
	"Return nil as the value of the block protected by the active exception handler."
	^nil
)

return: returnValue = (
	"Return the argument as the value of the block protected by the active exception handler."
	^ returnValue
)

signal = (
	"Ask ContextHandlers in the sender chain to handle this signal.  The default is to execute and return my defaultAction."
	<primitive: -1>
	self primitiveFailed
)

signal: signalerText = (
	"Signal the occurrence of an exceptional condition with a specified textual description."
	self messageText: signalerText.
	^ self signal
)

----------------------------

signal = (
	"Signal the occurrence of an exceptional condition."
	^ self new signal
)

signal: signalerText = (
	"Signal the occurrence of an exceptional condition with a specified textual description."
	^ self new signal: signalerText
)

comment = (^'
This is the main class used to implement the exception handling system.
')

)
