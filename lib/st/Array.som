Array = ArrayedCollection (

+* aCollection = (
	"Premultiply aCollection by self.  aCollection should be an Array or Matrix.
	 The name of this method is APL's +.x squished into Smalltalk syntax."
	^aCollection preMultiplyByArray: self
)

at: index = (
	<primitive: 60>
	self primitiveFailed
)

at: index put: value = (
	<primitive: 61>
	self primitiveFailed
)

atWrap: index = (
	"Optimized to go through the primitive if possible"
	<primitive: 60>
	^ self at: index - 1 \\ self size + 1
)

doIndexes: block = (
	1 to: self size do: [:i | block value: i. ]
)

extendedWith: val = (
	| result |
	result := Array new: self size + 1.
	self doIndexes: [:i |
	result at: i put: (self at: i)].
	result at: result size put: val.
	^ result
)

isArray = (
	^true
)

isLiteral = (
	^self class == Array and: [
		self isLiteralIfContainedBy: IdentitySet new ]
)

isLiteralIfContainedBy: parents = (
	" Answer whether the receiver has a literal text form recognized by the compiler. Precondition: the receiver is an instance of Array. "
	(parents includes: self) ifTrue: [ ^false ].
	parents add: self.
	1 to: self size do: [ :index |
		| element |
		element := self at: index.
		(element class == Array
			ifTrue: [ element isLiteralIfContainedBy: parents ]
			ifFalse: [ element isLiteral ]) ifFalse: [ ^false ] ].
	parents remove: self.
	^true
)

literalEqual: other = (
	^ self class == other class and: [self = other]
)

preMultiplyByArray: a = (
	"Answer a+*self where a is an Array.  Arrays are always understood as column vectors,
	 so an n element Array is an n*1 Array.  This multiplication is legal iff self size = 1."
	self size = 1 ifFalse: [self error: 'dimensions do not conform'].
	^a * self first
)

prependedWith: val = (
	| result |
	result := Array new: self size + 1.
	self doIndexes: [:i |
	result at: i + 1 put: (self at: i)].
	result at: 1 put: val.
	^ result
)

printAsLiteralOn: aStream = (
	aStream nextPut: $#; nextPut: $(.
	self do: [:each| each printAsLiteralOn: aStream] separatedBy: [aStream space].
	aStream nextPut: $)
)

printAsBraceFormOn: aStream = (
	aStream nextPut: ${.
	self do: [:el | el printOn: aStream] separatedBy: [ aStream nextPutAll: ' . '].
	aStream nextPut: $}
)

printOn: aStream = (
	self class == Array ifFalse:
		[^super printOn: aStream].
	self shouldBePrintedAsLiteral
		ifTrue: [self printAsLiteralOn: aStream]
		ifFalse: [self printAsBraceFormOn: aStream]
)

replaceFrom: start to: stop with: replacement startingAt: repStart = (
	"Primitive. This destructively replaces elements from start to stop in the receiver starting at index, repStart, in the collection, replacement. Answer the receiver. Range checks are performed in the primitive only. Optional. See Object documentation whatIsAPrimitive."
	<primitive: 105>
	super replaceFrom: start to: stop with: replacement startingAt: repStart
)

shouldBePrintedAsLiteral = (
	^self class == Array
	  and: [self shouldBePrintedAsLiteralVisiting: (IdentitySet new: 8)]
)

shouldBePrintedAsLiteralVisiting: aSet = (
	^self isLiteral
)

size = (
	<primitive: 62>
	self primitiveFailed
)

sorted: aSortBlockOrNil = (
	"Return a new sequenceable collection which contains the same elements as self but its elements are sorted by aSortBlockOrNil. The block should take two arguments and return true if the first element should preceed the second one. If aSortBlock is nil then <= is used for comparison."
	^self copy sort: aSortBlockOrNil
)

storeOn: aStream = (
	"Use the literal form if possible."
	self shouldBePrintedAsLiteral
		ifTrue:  [self printAsLiteralOn: aStream]
		ifFalse: [super storeOn: aStream]
)

----------------------------

empty = (
	"A canonicalized empty Array instance."
	^ #()
)

isVariable = (
	^true
)

new: sizeRequested = (
	"Answer an instance of this class with the number of indexable
	variables specified by the argument, sizeRequested.
	This is a shortcut (direct call of primitive, no #initialize, for performance"
	<primitive: 71>  "This method runs primitively if successful"
	^ self basicNew: sizeRequested  "Exceptional conditions will be handled in basicNew:"
)

)
