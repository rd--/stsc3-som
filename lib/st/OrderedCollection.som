OrderedCollection = SequenceableCollection (

| array firstIndex lastIndex |

add: newObject = (
	^self addLast: newObject
)

add: newObject after: oldObject = (
	| index |
	index := self find: oldObject.
	self insert: newObject before: index + 1.
	^newObject
)

add: newObject afterIndex: index = (
	"Add the argument, newObject, as an element of the receiver. Put it in
	the sequence just after index. Answer newObject."
	(index between: 0 and: self size) ifFalse:[^self errorSubscriptBounds: index].
	self insert: newObject before: firstIndex + index.
	^ newObject
)

add: newObject before: oldObject = (
	| index |
	index := self find: oldObject.
	self insert: newObject before: index.
	^newObject
)

addAll: anOrderedCollection = (
	^self addAllLast: anOrderedCollection
)

addAllFirst: anOrderedCollection = (
	anOrderedCollection reverseDo: [ :each | self addFirst: each ].
	^anOrderedCollection
)

addAllFirstUnlessAlreadyPresent: anOrderedCollection = (
	"Add each element of anOrderedCollection at the beginning of the receiver, preserving the order, but do not add any items that are already in the receiver.  Answer anOrderedCollection."
	anOrderedCollection reverseDo:
		[:each | (self includes: each) ifFalse: [self addFirst: each]].
	^ anOrderedCollection
)

addAllLast: anOrderedCollection = (
	anOrderedCollection do: [ :each | self addLast: each ].
	^anOrderedCollection
)

add: newObject before: oldObject = (
	"Add the argument, newObject, as an element of the receiver. Put it in
	the sequence just preceding oldObject. Answer newObject."
	| index |
	index := self find: oldObject.
	self insert: newObject before: index.
	^newObject
)

add: newObject beforeIndex: index = (
	"Add the argument, newObject, as an element of the receiver. Put it in
	the sequence just before index. Answer newObject."
	(index between: 1 and: self size+1) ifFalse:[^self errorSubscriptBounds: index].
	self insert: newObject before: firstIndex + index - 1.
	^ newObject
)

addFirst: newObject = (
	firstIndex = 1 ifTrue: [ self makeRoomAtFirst ].
	firstIndex := firstIndex - 1.
	array at: firstIndex put: newObject.
	^newObject
)

addLast: newObject = (
	lastIndex = array size ifTrue: [ self makeRoomAtLast ].
	lastIndex := lastIndex + 1.
	array at: lastIndex put: newObject.
	^newObject
)

after: oldObject = (
	| index |
	index := self find: oldObject.
	index = lastIndex ifTrue: [ ^self errorLastObject ] ifFalse: [ ^array at: index + 1 ]
)

asArray = (
	| result size |
	result := Array new: (size := self size).
	result
		replaceFrom: 1
		to: size
		with: array
		startingAt: firstIndex.
	^result
)

at: anInteger = (
	(anInteger < 1 or: [ anInteger + firstIndex - 1 > lastIndex ])
		ifTrue: [ self errorNoSuchElement ]
		ifFalse: [ ^array at: anInteger + firstIndex - 1 ]
)

at: index ifAbsentPut: block = (
	"Return value at index, however, if value does not exist (nil or out of bounds) then add block's value at index (growing self if necessary)"
	[ index <= self size ] whileFalse: [ self add: nil ].
	^(self at: index) ifNil: [ self at: index put: block value ]
)

at: anInteger put: anObject = (
	| index |
	index := anInteger truncated.
	(index < 1 or: [ index + firstIndex - 1 > lastIndex ])
		ifTrue: [ self errorNoSuchElement ]
		ifFalse: [ ^array at: index + firstIndex - 1 put: anObject ]
)

before: oldObject = (
	| index |
	index := self find: oldObject.
	index = firstIndex ifTrue: [ ^self errorFirstObject ] ifFalse: [ ^array at: index - 1 ]
)

capacity = (
	"Answer the current capacity of the receiver."
	^ array size
)

collect: aBlock = (
	"Evaluate aBlock with each of my elements as the argument.
	Collect the resulting values into an OrderedCollection."
	| newCollection |
	newCollection := OrderedCollection new: self size.
	firstIndex to: lastIndex do:
		[:index |
		newCollection addLast: (aBlock value: (array at: index))].
	^ newCollection
)

collect: aBlock from: fromIndex to: toIndex = (
	"Evaluate aBlock with each of my elements as the argument between fromIndex and toIndex.
	Collect the resulting values into an OrderedCollection."
	| result offset |
	offset := firstIndex - 1.
	(fromIndex < 1 or:[toIndex + offset > lastIndex])
		ifTrue: [^self errorNoSuchElement].
	result := OrderedCollection new: toIndex - fromIndex + 1.
	fromIndex + offset to: toIndex + offset do:
		[:index | result addLast: (aBlock value: (array at: index))].
	^ result
)

collector = (
	"Private"
	^ array
)

copyEmpty = (
	^self species new
)

copyFrom: startIndex to: endIndex = (
	| targetCollection index |
	endIndex < startIndex ifTrue: [ ^self species new: 0 ].
	targetCollection := self species new: endIndex + 1 - startIndex.
	startIndex to: endIndex do: [ :index | targetCollection add: (self at: index) ].
	^targetCollection
)

copyReplaceFrom: start to: stop with: replacementCollection = (
	| newOrderedCollection delta newIndex index mySize startIndex stopIndex |
	delta := 0.
	startIndex := start.
	stopIndex := stop.
	(start < 1)
		ifTrue: [ startIndex := stopIndex := 0 ]
		ifFalse: [ startIndex > self size
			ifTrue: [ startIndex := stopIndex := self size + 1 ]
			ifFalse: [
 				(stopIndex < (startIndex - 1) or: [ stopIndex > self size ]) ifTrue: [ self errorOutOfBounds ].
 				delta := stopIndex - startIndex + 1
 			]
 		].
	newOrderedCollection := self species new: self size + replacementCollection size - delta.
	1 to: startIndex - 1 do: [ :index | newOrderedCollection add: (self at: index) ].
	1 to: replacementCollection size do: [ :index | newOrderedCollection add: (replacementCollection at: index) ].
	stopIndex + 1 to: self size do: [ :index | newOrderedCollection add: (self at: index) ].
	^newOrderedCollection
)

copyWith: newElement = (
	| newCollection |
	newCollection := self copy.
	newCollection add: newElement.
	^newCollection
)

copyWithout: oldElement = (
	| newCollection each |
	newCollection := self species new: self size.
	self do: [ :each | oldElement = each ifFalse: [ newCollection add: each ] ].
	^newCollection
)

collect: aBlock = (
	| newCollection |
	newCollection := self species new.
	self do: [ :each | newCollection add: (aBlock value: each) ].
	^newCollection
)

do: aBlock = (
	| index |
	index := firstIndex.
	[ index <= lastIndex ] whileTrue: [
		aBlock value: (array at: index).
		index := index + 1
	]
)

errorFirstObject = (
	self error: 'specified object is first objecte'
)

errorLastObject = (
	self error: 'specified object is last object'
)

errorNoSuchElement = (
	self error: 'attempt to index non-existent element in an ordered collection'
)

errorNotFound = (
	self error: 'element not found'
)

find: oldObject = (
	| index |
	index := firstIndex.
	[ index <= lastIndex and: [ oldObject ~= (array at: index) ] ] whileTrue: [ index := index + 1 ].
	index <= lastIndex ifTrue: [ ^index ] ifFalse: [ self errorNotFound ]
)

first = (
	self emptyCheck.
	^array at: firstIndex
)

growAtFirst = (
	"Add new empty slots to the front of array, while keeping the empty slots at the end."
	| newArray newFirstIndex newLastIndex |
	newArray := self class arrayType new: (array size * 2 max: 1).
	newFirstIndex := newArray size - array size + firstIndex.
	newLastIndex := newFirstIndex + lastIndex - firstIndex.
	newArray
		replaceFrom: newFirstIndex
		to: newLastIndex
		with: array
		startingAt: firstIndex.
	array := newArray.
	firstIndex := newFirstIndex.
	lastIndex := newLastIndex
)

growAtLast = (
	"Add new empty slots to the end of array, while keeping the empty slots at the front."
	| newArray |
	newArray := self class arrayType new: (array size * 2 max: 1).
	newArray
		replaceFrom: firstIndex
		to: lastIndex
		with: array
		startingAt: firstIndex.
	array := newArray
)

insert: anObject before: spot = (
	| index delta spotIndex |
	spotIndex := spot.
	delta := spotIndex - firstIndex.
	firstIndex = 1 ifTrue: [ self makeRoomAtFirst.
	spotIndex := firstIndex + delta ].
	index := firstIndex := firstIndex - 1.
	[ index < (spotIndex - 1) ] whileTrue: [ array at: index put: (array at: index + 1). index := index + 1 ].
	array at: index put: anObject.
	^anObject
)

sorted: aSortBlockOrNil = (
	"Return a new sequenceable collection which contains the same elements as self but its elements are sorted by aSortBlockOrNil. The block should take two arguments and return true if the first element should preceed the second one. If aSortBlock is nil then <= is used for comparison."
	^self copy sort: aSortBlockOrNil
)

isSortedBetween: startIndex and: endIndex = (
	"Return true if the receiver is sorted by #<= between startIndex and endIndex."
	^array isSortedBetween: startIndex + firstIndex - 1 and: endIndex + firstIndex - 1
)

last = (
	self emptyCheck.
	^array at: lastIndex
)

makeRoomAtFirst = (
	"Make some empty slots at the front of the array. If we have more than 50% free space, then just move the elements, so that the first 50% of the slots are free, otherwise add new free slots to the front by growing. Precondition: firstIndex = 1"
	| tally newFirstIndex newLastIndex capacity |
	tally := self size.
	capacity := array size.
	tally * 2 >= capacity ifTrue: [ ^self growAtFirst ].
	tally = 0 ifTrue: [ ^self resetTo: capacity + 1 ].
	newFirstIndex := capacity // 2 + 1.
	newLastIndex := newFirstIndex - firstIndex + lastIndex.
	0 to: tally - 1 do: [ :offset |
		array at: newLastIndex - offset put: (array at: lastIndex - offset) ].
	array from: firstIndex to: newFirstIndex - 1 put: nil.
	firstIndex := newFirstIndex.
	lastIndex := newLastIndex
)

makeRoomAtLast = (
	"Make some empty slots at the end of the array. If we have more than 50% free space, then just move the elements, so that the last 50% of the slots are free, otherwise add new free slots to the end by growing. Precondition: lastIndex = array size"
	| tally newFirstIndex newLastIndex |
	tally := self size.
	tally * 2 >= lastIndex ifTrue: [ ^self growAtLast ].
	tally = 0 ifTrue: [ ^self resetTo: 1 ].
	newLastIndex := lastIndex // 2.
	newFirstIndex := newLastIndex - lastIndex + firstIndex.
	array
		replaceFrom: newFirstIndex
		to: newLastIndex
		with: array
		startingAt: firstIndex.
	array from: newLastIndex + 1 to: lastIndex put: nil.
	firstIndex := newFirstIndex.
	lastIndex := newLastIndex
)

occurrencesOf: anObject = (
	"Answer how many of the receiver's elements are equal to anObject. Optimized version."
	| tally |
	tally := 0.
	firstIndex to: lastIndex do: [ :index |
		(array at: index) = anObject ifTrue: [ tally := tally + 1 ] ].
	^tally
)

postCopy = (
	array := array copy
)

postCopyFrom: startIndex to: endIndex = (
	"finish copying the array in a certain range."
	endIndex < startIndex ifFalse: [
		"Because actual size of the array may be greater than used size,
		postCopyFrom:to: may fail to fail and answer an incorrect result
		if this sanity check were not applied"
		(startIndex between: 1 and: self size) ifFalse: [^self error: 'startIndex is out of bounds'].
		(endIndex between: 1 and: self size) ifFalse: [^self error: 'endIndex is out of bounds']].
	"Add a protection that lacks in Array>>postcopy"
	array := array copyFrom: startIndex + firstIndex - 1 to: (endIndex max: startIndex - 1) + firstIndex - 1.
	firstIndex := 1.
	lastIndex := array size
)

remove: oldObject ifAbsent: absentBlock = (
	| index |
	index := firstIndex.
	[ index <= lastIndex ] whileTrue: [
		oldObject = (array at: index) ifTrue: [ self removeIndex: index. ^oldObject ] ifFalse: [ index := index + 1 ]
	].
	^absentBlock value
)

removeAll = (
	"remove all the elements from this collection.
	Keep same amount of storage"
	self setCollection: (self class arrayType new: array size)
)

removeAllSuchThat: aBlock = (
	"Remove each element of the receiver for which aBlock evaluates to true.
	The method in Collection is O(N^2), this is O(N)."
	| n |
	n := firstIndex.
	firstIndex to: lastIndex do: [ :index |
		| element |
		(aBlock value: (element := array at: index)) ifFalse: [
			array at: n put: element.
			n := n + 1 ] ].
	array from: n to: lastIndex put: nil.
	lastIndex := n - 1
)

removeAt: index = (
	| removed |
	removed := self at: index.
	self removeIndex: index + firstIndex - 1.
	^removed
)

removeFirst = (
	| firstObject |
	self emptyCheck.
	firstObject := array at: firstIndex.
	array at: firstIndex put: nil.
	firstIndex := firstIndex + 1.
	^firstObject
)

removeFirst: n = (
	"Remove the first n objects into an array."
	| lastIndexToRemove result |
	n < 1 ifTrue: [ self errorNoSuchElement ].
	lastIndex < (lastIndexToRemove := firstIndex + n - 1) ifTrue: [ self errorNotEnoughElements ].
	result := array copyFrom: firstIndex to: lastIndexToRemove.
	array from: firstIndex to: lastIndexToRemove put: nil.
	firstIndex := lastIndexToRemove + 1.
	^result
)

removeIndex: removedIndex = (
	| index |
	index := removedIndex.
	[ index < lastIndex ] whileTrue: [
		array at: index put: (array at: index + 1).
		index := index + 1
	].
	array at: lastIndex put: nil.
	lastIndex := lastIndex - 1
)

removeLast = (
	| lastObject |
	self emptyCheck.
	lastObject := array at: lastIndex.
	array at: lastIndex put: nil.
	lastIndex := lastIndex - 1.
	^lastObject
)

removeLast: n = (
	"Remove the last n objects into an array with last in last position."
	| firstIndexToRemove result |
	n < 1 ifTrue: [ self errorNoSuchElement ].
	(firstIndexToRemove := lastIndex - n + 1) < firstIndex ifTrue: [ self errorNotEnoughElements ].
	result := array copyFrom: firstIndexToRemove to: lastIndex.
	array from: firstIndexToRemove to: lastIndex put: nil.
	lastIndex := firstIndexToRemove - 1.
	^result
)

reset = (
	self resetTo: 1
)

resetTo: index = (
	firstIndex := index.
	lastIndex := firstIndex - 1
)

reverse = (
	| newCollection |
	newCollection := self species new.
	self reverseDo: [ :each | newCollection add: each ].
	^newCollection
)

reverseDo: aBlock = (
	| index |
	index := lastIndex.
	[ index >= firstIndex ] whileTrue: [
		aBlock value: (array at: index).
		index := index - 1
	]
)

reverseDo: aBlock = (
	| index |
	index := lastIndex.
	[index >= firstIndex]
		whileTrue:
			[aBlock value: (array at: index).
			index := index - 1]
)

setCollection: anArray = (
	array := anArray.
	self reset
)

setContents: anArray = (
	array := anArray.
	firstIndex := 1.
	lastIndex := array size.
)

select: aBlock = (
	| newCollection |
	newCollection := self copyEmpty.
	self do: [ :each | (aBlock value: each) ifTrue: [ newCollection add: each ] ].
	^newCollection
)

size = (
	^lastIndex - firstIndex + 1
)

sort = (
	"Sort this array into ascending order using the '<=' operator."
	self sort: nil
)

sort: aSortBlock = (
	"Sort this collection using aSortBlock. The block should take two arguments and return true if the first element should preceed the second one. If aSortBlock is nil then <= is used for comparison."
	self size <= 1 ifTrue: [ ^self ].
	array
		mergeSortFrom: firstIndex
		to: lastIndex
		by: aSortBlock
)

sorted: aSortBlockOrNil = (
	"Return a new sequenceable collection which contains the same elements as self but its elements are sorted by aSortBlockOrNil. The block should take two arguments and return true if the first element should preceed the second one. If aSortBlock is nil then <= is used for comparison."
	^self copy sort: aSortBlockOrNil
)

with: otherCollection collect: twoArgBlock = (
	"Collect and return the result of evaluating twoArgBlock with
	corresponding elements from this collection and otherCollection."
	| result offset size |
	(size := self size) = otherCollection size ifFalse: [ self error: 'otherCollection must be the same size' ].
	result := OrderedCollection new: size.
	offset := 1 - firstIndex.
	firstIndex to: lastIndex do: [ :index |
		result addLast: (
			twoArgBlock
				value: (array at: index)
				value: (otherCollection at: index + offset)) ].
	^result
)

----------------------------

arrayType = (
	^ Array
)

new = (
	^ self new: 10
)

new: anInteger = (
	^ self basicNew setCollection: (self arrayType new: anInteger)
)

new: anInteger withAll: anObject = (
	^ self basicNew setContents: (self arrayType new: anInteger withAll: anObject)
)

newFrom: aCollection = (
	"Answer an instance of me containing the same elements as aCollection."
	^(self new: aCollection size)
		addAll: aCollection;
		yourself
)

ofSize: n = (
	| collection |
	collection := self new: n.
	collection setContents: (collection collector).
	^ collection
)

)
