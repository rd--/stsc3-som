Boolean = (

& aBoolean = (
	^self and: aBoolean
)

| aBoolean = (
	^self or: aBoolean
)

==> aBlock = (
	self subclassResponsibility
)

asBit = (
	"My numerical interpretation, as one-bit number. This extends nicely to n-bit numbers,
	as long as they treat 0 as false, and anything else as true"
	^ self subclassResponsibility
)

asInteger = (
	"It is sufficient to treat this boolean as bit so as to interpret it as a number"
	^ self asBit
)

asNumber = (
	"It is sufficient to treat this boolean as bit so as to interpret it as a number"
	^ self asBit
)

deepCopy = (
	"Receiver has two concrete subclasses, True and False.
	Only one instance of each should be made, so return self."
)

ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock = (
	self subclassResponsibility
)

ifFalse: falseAlternativeBlock ifTrue: trueAlternativeBlock = (
	self subclassResponsibility
)

isLiteral = (
	^ true
)

printAsLiteralOn: aStream = (
	^self printOn: aStream
)

shallowCopy = (
)

storeOn: aStream = (
	self printOn: aStream
)

xor: aBoolean = (
	"Exclusive OR. Answer true if the receiver is not equivalent to aBoolean."
	^(self == aBoolean) not
)

----

initializedInstance = (
	^ nil
)

isAbstract = (
	^self = Boolean
)

)
