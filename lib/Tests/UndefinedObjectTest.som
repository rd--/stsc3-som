UndefinedObjectTest = ClassTestCase (

"
testAllInstances = (
	self assert: UndefinedObject allInstances size = 1 description: 'There should be a single instance of UndefinedObject'.
	self assert: (UndefinedObject allInstances includes: nil) description: 'nil should be an instance of UndefinedObject'.
)
"

testDeepCopy = (
	self assert:  (nil deepCopy = nil).
)

testHaltIfNil = (
	self should: [ nil haltIfNil] raise: Halt.
)

testIfNil = (
	| object block |
	object := Object new.
	self should: [ nil ifNil: [ self halt ] ] raise: Halt.
	self assert: (nil ifNil: [ object ]) == object.
	block := [ self halt ].
	self should: [ nil ifNil: block ] raise: Halt.
	block := [ object ].
	self assert: (nil ifNil: block) == object.
)

testIfNilIfNotNil = (
	| object block |
	object := Object new.
	self should: [ nil ifNil: [self halt] ifNotNil: [ self error] ] raise: Halt.
	self should: [ nil ifNil: [ self halt ] ifNotNil: [ :o | self error ] ] raise: Halt.
	self assert: (nil ifNil: [ object ] ifNotNil: [ 1 ]) == object.
	self assert: (nil ifNil: [ object ] ifNotNil: [ :o | 1 ]) == object.
	block := [ self halt ].
	self should: [ nil ifNil: block ifNotNil: [ self error ] ] raise: Halt.
	self should: [ nil ifNil: block ifNotNil: [ :o | self error ] ] raise: Halt.
	block := [ object ].
	self assert: (nil ifNil: block ifNotNil: [ 1 ]) == object.
	self assert: (nil ifNil: block ifNotNil: [ :o | 1 ]) == object

)

testIfNotNil = (
	| block |
	self shouldnt: [ nil ifNotNil: [ self halt ] ] raise: Halt.
	self shouldnt: [ nil ifNotNil: [ :object | self halt ] ] raise: Halt.
	self assert: (nil ifNotNil: [ 1 ]) == nil.
	self assert: (nil ifNotNil: [ :o | 1 ]) == nil.
	block := [ self halt ].
	self shouldnt: [ nil ifNotNil: block ] raise: Halt.
	block := [ :object | self halt ].
	self shouldnt: [ nil ifNotNil: block ] raise: Halt.
	block := [ 1 ].
	self assert: (nil ifNotNil: block) == nil.
	block := [ :o | 1 ].
	self assert: (nil ifNotNil: block) == nil.
)

testIfNotNilIfNil = (
	| object block |
	object := Object new.
	self should: [ nil ifNotNil: [ self error ] ifNil: [ self halt ] ] raise: Halt.
	self should: [ nil ifNotNil: [ :o | self error] ifNil: [ self halt ] ] raise: Halt.
	self assert: (nil ifNotNil: [ 1 ] ifNil: [ object ]) == object.
	self assert: (nil ifNotNil: [ :o | 1 ] ifNil: [ object ]) == object.
	block := [ self error ].
	self should: [ nil ifNotNil: block ifNil: [ self halt ] ] raise: Halt.
	block := [ :o | self error].
	self should: [ nil ifNotNil: block ifNil: [ self halt ] ] raise: Halt.
	block := [ 1 ].
	self assert: (nil ifNotNil: block ifNil: [ object ]) == object.
	block := [ :o | 1 ].
	self assert: (nil ifNotNil: block ifNil: [ object ]) == object
)

"
testInitializedInstance = (
	self assert: ( UndefinedObject initializedInstance class == UndefinedObject).
)
"

testIsEmptyOrNil = (
	self assert: (nil isEmptyOrNil).
)

testIsLiteral = (
	self assert: (nil isLiteral).
)

testIsNil = (
	self assert: nil isNil
)

testNotNil = (
	self deny: nil notNil
)

testPrintOn = (
	| string |
	string := String streamContents: [:stream | nil printOn: stream].
	self assert: (string = 'nil').
)

testShallowCopy = (
	self assert: (nil shallowCopy = nil).
)

testStoreOn = (
	| string |
	string := String streamContents: [:stream | nil storeOn: stream].
	self assert: ((Compiler evaluate: string) = nil).
)

"
testVeryDeepCopyWith = (
	self assert: ((nil veryDeepCopyWith: nil) = nil).
)
"

)
