WriteStreamTest = TestCase (

testCr = (

	| stream |
	stream := WriteStream on: 'stream'.
	stream cr.
	self assert: stream last = Character cr.
)

testCrLf = (
	| stream |
	stream := WriteStream on: 'stream'.
	stream crlf.
	self assert: (stream contents last: 2) = String crlf.
)

testCrTab = (
	| stream |
	stream := WriteStream on: 'stream'.
	stream crtab.
	self assert: (stream contents last: 2) = (String with: Character cr with: Character tab)
)

testCrTabs = (
	| stream |
	stream := WriteStream on: 'stream'.
	stream crtab: 2.
	self assert: (stream contents last: 3) = (String with: Character cr with: Character tab with: Character tab)
)

testEnsureASpace = (
	| stream |
	stream := WriteStream on: String new.
	stream nextPutAll: 'this is a test'.
	stream ensureASpace.
	stream nextPutAll: 'for WriteStreamTest'.
	self assert: stream contents = 'this is a test for WriteStreamTest'.
	stream := WriteStream on: String new.
	stream nextPutAll: 'this is a test '.
	stream ensureASpace.
	stream nextPutAll: 'for WriteStreamTest'.
	self assert: stream contents = 'this is a test for WriteStreamTest'.
)

testEnsureASpace2 = (
	| stream |
	stream := WriteStream on: String new.
	stream ensureASpace.
	self assert: stream contents = ' '.
)

testEnsureNoSpace = (
	| stream |
	stream := WriteStream with: 'stream'.
	stream ensureNoSpace.
	self assert: stream contents = 'stream'.
	stream := WriteStream with: 'stream '.
	stream ensureNoSpace.
	self assert: stream contents = 'stream'.
	stream := WriteStream with: ' '.
	stream ensureNoSpace.
	self assert: stream contents = ''.
)

testInstanciationUsingOn = (
	| stream |
	stream := WriteStream on: #(1 2) copy.
	stream nextPut: 3.
	self assert: stream contents = #(3)
)

testInstanciationUsingWith = (
	| stream |
	stream := WriteStream with: #(1 2).
	stream nextPut: 3.
	self assert: stream contents = #(1 2 3)
)

testIsEmpty = (
	| stream |
	stream := WriteStream on: String new.
	self assert: stream isEmpty.
	stream nextPut: $a.
	self deny: stream isEmpty.
	stream reset.
	self deny: stream isEmpty.
)

testIsEmpty2 = (
    self assert: (WriteStream on: (String new: 100)) isEmpty
)

testLf = (
	| stream |
	stream := WriteStream on: 'stream'.
	stream lf.
	self assert: stream last = Character lf.
)

testNextPut = (
	| stream |
	stream := WriteStream on: String new.
	stream
		nextPut: $t;
		nextPut: $e;
		nextPut: $s;
		nextPut: $t.
	self assert: stream contents = 'test'
)

testNextPut2 = (
	| stream |
	stream := WriteStream with: 'test'.
	stream nextPut: $s.
	self assert: stream contents = 'tests'
)

testNextPutAll = (
	| stream |
	stream := WriteStream on: String new.
	stream
		nextPutAll: #($t $e $s $t).
	self assert: stream contents = 'test'
)

testNextPutAllDifferentFromNextPuts = (
	|string stream|
	string := String withAll: 'z'.
	stream := WriteStream on: string.
	stream nextPutAll: 'abc'.
	self assert: string = 'z'.

	string := String withAll: 'z'.
	stream := WriteStream on: string.
	stream nextPut: $a; nextPut: $b; nextPut: $c.
	self assert: string = 'a'.
)

testOnFromTo = (
	| aToZ |
	aToZ := String withAll: ($A to: $Z).
	self assert: ((WriteStream
						on: (String withAll: ((0 to: 255) collect: [:n| n asCharacter]))
						from: $A asInteger + 1
						to: $Z asInteger + 1)
					nextPutAll: aToZ;
					contents)
		equals: aToZ
)

testPosition = (
	| stream |
	stream := WriteStream with: 'an elephant'.
	stream position: 6.
	self assert: stream contents = 'an ele'.

	stream nextPutAll: 'vator'.
	stream assert: stream contents = 'an elevator'
)

testReset = (
	|stream stream2|
	stream := WriteStream with: 'a test ' copy.
	stream reset.
	stream nextPutAll: 'to test'.
	self assert: stream contents = 'to test'.
	stream2 := WriteStream with: 'a test ' copy.
	stream2 nextPutAll: 'to test'.
	self assert: stream2 contents = 'a test to test'
)

testSetToEnd = (
	| string stream |
	string := 'hello'.
	stream := WriteStream with: ''.
	stream nextPutAll: string.
	self assert: stream position = string size.
	stream setToEnd.
	self assert: stream position = string size.
	self assert: stream contents = string
)

testSize = (
	| string streamEmpty streamFull |
	string := 'a string'.
	streamEmpty := WriteStream on: string.
	streamFull := WriteStream with: 'a string'.
	self assert: streamEmpty size = 0.
	self assert: streamFull size = 8.
	streamEmpty nextPut: $..
	streamFull nextPut: $..
	self assert: streamEmpty size = 1.
	self assert: streamFull size = (string size + 1).
)

testSpace = (
	| stream |
	stream := WriteStream on: 'stream'.
	stream space.
	self assert: stream last = Character space.
)

testSpaces = (
	| stream |
	stream := WriteStream on: 'stream'.
	stream space: 3.
	self assert: (stream contents last: 3) = '   '
)

testStreamAlwaysUseGivenCollection = (
	|string stream|
	string := String withAll: 'xy'.
	stream := WriteStream on: string.
	stream nextPut: $a.
	stream nextPut: (Character codePoint: 269).
	self assert: string = (String with: $a with: (Character codePoint: 269)).
)

testStreamContentsPositioning = (
	| s s1 s2 |
	s := String new: 10 streamContents: [ :strm |
			strm nextPutAll: 'XXXXX'.
			self assert: 'XXXXX' equals: strm contents.
			strm nextPut: $X.
			self assert: 'XXXXXX' equals: strm contents.
			strm position: strm position - 1.
			self assert: 'XXXXX' equals: strm contents.
			strm nextPutAll: 'XXXXX'.
			self assert: 'XXXXXXXXXX' equals: strm contents.
			strm nextPut: $X.
			self assert: 'XXXXXXXXXXX' equals: strm contents.
			strm position: strm position - 1.
			self assert: 'XXXXXXXXXX' equals: strm contents.
		].
	self assert: 10 equals: s size.
	self assert: 'XXXXXXXXXX' equals: s.
	s2 := String new: s size streamContents: [ :strm |
		s1 := strm originalContents.
		strm nextPutAll: s ].
	self assert: s equals: s2.
	self assert: s equals: s1.
	self assert: s1 == s2.
	s2 := String new: s size - 1 streamContents: [ :strm |
		s1 := strm originalContents.
		strm nextPutAll: s ].
	self assert: s equals: s2.
	self deny: s1 == s2.
	s2 := String new: s size - 2 streamContents: [ :strm |
		s1 := strm originalContents.
		strm nextPutAll: s ].
	self assert: s equals: s2.
	self deny: s1 == s2.

)

testStreamUseGivenCollection = (
	|string stream|
	string := String withAll: 'erased'.
	stream := WriteStream on: string.
	self assert: string = 'erased'.
	stream nextPutAll: 'test'.
	self assert: string = 'tested'.
)

testTab = (
	| stream |
	stream := WriteStream on: 'stream'.
	stream tab.
	self assert: (stream contents last) = Character tab
)

testTabs = (
	| stream |
	stream := WriteStream on: 'stream'.
	stream tab: 3.
	self assert: (stream contents last: 3) = (String with: Character tab with: Character tab with: Character tab)
)

)
