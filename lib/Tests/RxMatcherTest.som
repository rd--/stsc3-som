RxMatcherTest = TestCase (

compileRegex: aString = (
	| syntaxTree |
	syntaxTree := RxParser safelyParse: aString.
	^ syntaxTree isNil ifFalse: [ RxMatcher for: syntaxTree ]
)

henryReadme = (
	self error: 'The tests in this category are based on the ones in Henry Spencer''s regexp.c package.'
)

runMatcher: aMatcher with: aString expect: aBoolean withSubexpressions: anArray = (
	| copy got |
	copy := aMatcher
		copy: aString
		translatingMatchesUsing: [ :each | each ].
	self
		assert: copy = aString
		description: 'Copying: expected ' , aString printString , ', but got ' , copy printString.
	got := aMatcher search: aString.
	self
		assert: got = aBoolean
		description: 'Searching: expected ' , aBoolean printString , ', but got ' , got printString.
	(anArray isNil or: [ aMatcher supportsSubexpressions not ])
		ifTrue: [ ^ self ].
	1 to: anArray size by: 2 do: [ :index |
		| sub subExpect subGot |
		sub := anArray at: index.
		subExpect := anArray at: index + 1.
		subGot := aMatcher subexpression: sub.
		self
			assert: subExpect = subGot
			description: 'Subexpression ' , sub printString , ': expected ' , subExpect printString , ', but got ' , subGot printString ]
)

runRegex: anArray = (
	| source matcher |
	source := anArray first.
	matcher := self compileRegex: source.
	matcher isNil
		ifTrue: [
			(anArray at: 2) isNil
				ifFalse: [ self signalFailure: 'Compilation failed, should have succeeded: ' , source printString ] ]
		ifFalse: [
			(anArray at: 2) isNil
				ifTrue: [ self signalFailure: 'Compilation succeeded, should have failed: ' , source printString ]
				ifFalse: [
					anArray allButFirst groupsDo: [ :input :shouldMatch :expectedOutput |
						self
							runMatcher: matcher
							with: input
							expect: shouldMatch
							withSubexpressions: expectedOutput ] ] ]
)

testCaseInsensitive = (
	| matcher |
	matcher := RxMatcher forString: 'the quick brown fox' ignoreCase: true.
	self assert: (matcher search: 'the quick brown fox').
	self assert: (matcher search: 'The quick brown FOX').
	self assert: (matcher search: 'What do you know about the quick brown fox?').
	self assert: (matcher search: 'What do you know about THE QUICK BROWN FOX?')
)

testCaseSensitive = (
	| matcher |
	matcher := RxMatcher forString: 'the quick brown fox' ignoreCase: false.
	self assert: (matcher search: 'the quick brown fox').
	self deny: (matcher search: 'The quick brown FOX').
	self assert: (matcher search: 'What do you know about the quick brown fox?').
	self deny: (matcher search: 'What do you know about THE QUICK BROWN FOX?')
)

testCopyReplacingMatches = (
	| matcher |
	matcher := RxMatcher forString: '\<\d\D+'.
	self assert: (matcher copy: '9aaa1bbb 8ccc' replacingMatchesWith: 'foo')
		= 'foo1bbb foo'
)

testCopyTranslatingMatches = (
	| matcher |
	matcher := RxMatcher forString: '\w+'.
	self assert: (matcher copy: 'now is  the   time    ' translatingMatchesUsing: [ :each | each reversed ])
		= 'won si  eht   emit    '
)

testEmptyStringAtBeginningOfLine = (
	| matcher |
	matcher := RxMatcher forString: '^'.
	self
		assert: (matcher copy: 'foo1 bar1' , String cr , 'foo2 bar2' replacingMatchesWith: '*')
			= ('*foo1 bar1' , String cr , '*foo2 bar2')
		description: 'An empty string at the beginning of a line'
)

testEmptyStringAtBeginningOfWord = (
	| matcher |
	matcher := RxMatcher forString: '\<'.
	self
		assert: (matcher copy: 'foo bar' replacingMatchesWith: '*')
			= '*foo *bar'
		description: 'An empty string at the beginning of a word'
)


testEmptyStringAtEndOfLine = (
	| matcher |
	matcher := RxMatcher forString: '$'.
	self
		assert: (matcher copy: 'foo1 bar1' , String cr , 'foo2 bar2' replacingMatchesWith: '*')
			= ('foo1 bar1*', String cr , 'foo2 bar2*')
		description: 'An empty string at the end of a line'
)

testEmptyStringAtEndOfWord = (
	| matcher |
	matcher := RxMatcher forString: '\>'.
	self
		assert: (matcher copy: 'foo bar' replacingMatchesWith: '*')
			= 'foo* bar*'
		description: 'An empty string at the end of a word'
)

testEmptyStringAtWordBoundary = (
	| matcher |
	matcher := RxMatcher forString: '\b'.
	self
		assert: (matcher copy: 'foo bar' replacingMatchesWith: '*')
			= '*foo* *bar*'
		description: 'An empty string at a word boundary'
)

testEmptyStringNotAtWordBoundary = (
	| matcher |
	matcher := RxMatcher forString: '\B'.
	self
		assert: (matcher copy: 'foo bar' replacingMatchesWith: '*')
			= 'f*o*o b*a*r'
		description: 'An empty string not at a word boundary'
)

testHenry001 = (
	self runRegex: #('abc'
		'abc' true (1 'abc')
		'xbc' false nil
		'axc' false nil
		'abx' false nil
		'xabcy' true (1 'abc')
		'ababc' true (1 'abc'))
)

testHenry002 = (
	self runRegex: #('ab*c'
		'abc' true (1 'abc'))
)

testHenry003 = (
	self runRegex: #('ab*bc'
		'abc' true (1 'abc')
		'abbc' true (1 'abbc')
		'abbbbc' true (1 'abbbbc'))
)

testHenry004 = (
	self runRegex: #('ab+bc'
		'abbc' true (1 'abbc')
		'abc' false nil
		'abq' false nil
		'abbbbc' true (1 'abbbbc'))
)

testHenry005 = (
	self runRegex: #('ab?bc'
		'abbc' true (1 'abbc')
		'abc' true (1 'abc')
		'abbbbc' false nil
		'abc' true (1 'abc'))
)

testHenry006 = (
	self runRegex: #('^abc$'
		'abc' true (1 'abc')
		'abcc' false nil
		'aabc' false nil)
)

testHenry007 = (
	self runRegex: #('^abc'
		'abcc' true (1 'abc'))
)

testHenry008 = (
	self runRegex: #('abc$'
		'aabc' true (1 'abc'))
)

testHenry009 = (
	self runRegex: #('^'
		'abc' true nil)
)

testHenry010 = (
	self runRegex: #('$'
		'abc' true nil)
)

testHenry011 = (
	self runRegex: #('a.c'
		'abc' true (1 'abc')
		'axc' true (1 'axc'))
)

testHenry012 = (
	"Need to get creative to include the null character..."
	self runRegex: #('a.*c'
		'axyzc' true (1 'axyzc')
		'axy zc' true (1 'axy zc') "testing that a dot matches a space"
		), (Array with: 'axy', (String with: 0 asCharacter), 'zc'), #(false nil "testing that a dot does not match a null"
		'axyzd' false nil)
)

testHenry013 = (
	self runRegex: #('.a.*'
		'1234abc' true (1 '4abc')
		'abcd' false nil)
)

testHenry014 = (
	self runRegex: #('a\w+c'
		' abbbbc ' true (1 'abbbbc')
		'abb bc' false nil)
)

"
testHenry015 = (
	self runRegex: #('\w+'
		'  	foobar	quux' true (1 'foobar')
		' 	~!@#$%^&*()-+=\|/?.>,<' false nil)
)
"

testHenry016 = (
	self runRegex: #('a\W+c'
		'a   c' true (1 'a   c')
		'a bc' false nil)
)

testHenry017 = (
	self runRegex: #('\W+'
		'foo!@#$bar' true (1 '!@#$')
		'foobar' false nil)
)

testHenry018 = (
	self runRegex: #('a\s*c'
		'a   c' true (1 'a   c')
		'a bc' false nil)
)

testHenry019 = (
	self runRegex: #('\s+'
		'abc3457 sd' true (1 ' ')
		'1234$^*^&asdfb' false nil)
)

testHenry020 = (
	self runRegex: #('a\S*c'
		'aqwertyc' true (1 'aqwertyc')
		'ab c' false nil)
)

testHenry021 = (
	self runRegex: #('\S+'
		'     	asdf		' true (1 'asdf')
		'
			' false nil)
)

testHenry022 = (
	self runRegex: #('a\d+c'
		'a0123456789c' true (1 'a0123456789c')
		'a12b34c' false nil)
)

testHenry023 = (
	self runRegex: #('\d+'
		'foo@#$%123ASD #$$%^&' true (1 '123')
		'foo!@#$asdfl;' false nil)
)

testHenry024 = (
	self runRegex: #('a\D+c'
		'aqwertyc' true (1 'aqwertyc')
		'aqw6ertc' false nil)
)

testHenry025 = (
	self runRegex: #('\D+'
		'1234 abc 456' true (1 ' abc ')
		'1234567890' false nil)
)

testHenry026 = (
	self runRegex: #('(f|o)+\b'
		'foo' true (1 'foo')
		' foo ' true (1 'foo'))
)

testHenry027 = (
	self runRegex: #('\ba\w+' "a word beginning with an A"
		'land ancient' true (1 'ancient')
		'antique vase' true (1 'antique')
		'goofy foobar' false nil)
)

testHenry028 = (
	self runRegex: #('(f|o)+\B'
		'quuxfoobar' true (1 'foo')
		'quuxfoo ' true (1 'fo'))
)

testHenry029 = (
	self runRegex: #('\Ba\w+' "a word with an A in the middle, match at A and further"
		'land ancient' true (1 'and')
		'antique vase' true (1 'ase')
		'smalltalk shall overcome' true (1 'alltalk')
		'foonix is better' false nil)
)

testHenry030 = (
	self runRegex: #('fooa\>.*'
		'fooa ' true nil
		'fooa123' false nil
		'fooa bar' true nil
		'fooa' true nil
		'fooargh' false nil)
)

testHenry031 = (
	self runRegex: #('\>.+abc'
		' abcde fg' false nil
		'foo abcde' true (1 ' abc')
		'abcde' false nil)
)

testHenry032 = (
	self runRegex: #('\<foo.*'
		'foo' true nil
		'foobar' true nil
		'qfoobarq foonix' true (1 'foonix')
		' foo' true nil
		' 12foo' false nil
		'barfoo' false nil)
)

testHenry033 = (
	self runRegex: #('.+\<foo'
		'foo' false nil
		'ab foo' true (1 'ab foo')
		'abfoo' false nil)
)

testHenry034 = (
	self runRegex: #('a[bc]d'
		'abc' false nil
		'abd' true (1 'abd'))
)

testHenry035 = (
	self runRegex: #('a[b-d]e'
		'abd' false nil
		'ace' true (1 'ace'))
)

testHenry036 = (
	self runRegex: #('a[b-d]'
		'aac' true (1 'ac'))
)

testHenry037 = (
	self runRegex: #('a[-b]'
		'a-' true (1 'a-'))
)

testHenry038 = (
	self runRegex: #('a[b-]'
		'a-' true (1 'a-'))
)

testHenry039 = (
	self runRegex: #('a[a-b-c]' nil)
)

testHenry040 = (
	self runRegex: #('[k]'
		'ab' false nil)
)

testHenry041 = (
	self runRegex: #('a[b-a]' nil)
)

testHenry042 = (
	self runRegex: #('a[]b' nil)
)

testHenry043 = (
	self runRegex: #('a[' nil)
)

testHenry044 = (
	self runRegex: #('a]'
		'a]' true (1 'a]'))
)

testHenry045 = (
	self runRegex: #('a[]]b'
		'a]b' true (1 'a]b'))
)

testHenry046 = (
	self runRegex: #('a[^bc]d'
		'aed' true (1 'aed')
		'abd' false nil)
)

testHenry047 = (
	self runRegex: #('a[^-b]c'
		'adc' true (1 'adc')
		'a-c' false nil)
)

testHenry048 = (
	self runRegex: #('a[^]b]c'
		'a]c' false nil
		'adc' true (1 'adc'))
)

testHenry049 = (
	self runRegex: #('[\de]+'
		'01234' true (1 '01234')
		'0123e456' true (1 '0123e456')
		'0123e45g78' true (1 '0123e45'))
)

testHenry050 = (
	self runRegex: #('[e\d]+' "reversal of the above, should be the same"
		'01234' true (1 '01234')
		'0123e456' true (1 '0123e456')
		'0123e45g78' true (1 '0123e45'))
)

testHenry051 = (
	self runRegex: #('[\D]+'
		'123abc45def78' true (1 'abc'))
)

testHenry052 = (
	self runRegex: #('[[:digit:]e]+'
		'01234' true (1 '01234')
		'0123e456' true (1 '0123e456')
		'0123e45g78' true (1 '0123e45'))
)

testHenry053 = (
	self runRegex: #('[\s]+'
		'2  spaces' true (1 '  '))
)

testHenry054 = (
	self runRegex: #('[\S]+'
		'  word12!@#$  ' true (1 'word12!@#$'))
)

testHenry055 = (
	self runRegex: #('[\w]+'
		' 	foo123bar	45' true (1 'foo123bar'))
)

testHenry056 = (
	self runRegex: #('[\W]+'
		'fii234!@#$34f' true (1 '!@#$'))
)

testHenry057 = (
	self runRegex: #('[^[:alnum:]]+'
		'fii234!@#$34f' true (1 '!@#$'))
)

testHenry058 = (
	self runRegex: #('[%&[:alnum:]]+'
		'foo%3' true (1 'foo%3')
		'foo34&rt4$57a' true (1 'foo34&rt4')
		'!@#$' false nil)
)

testHenry059 = (
	self runRegex: #('[[:alpha:]]+'
		' 123foo3 ' true (1 'foo')
		'123foo' true (1 'foo')
		'foo1b' true (1 'foo'))
)

testHenry060 = (
	self runRegex: #('[[:cntrl:]]+'
		' a 1234asdf' false nil)
)

testHenry061 = (
	self runRegex: #('[[:lower:]]+'
		'UPPERlower1234' true (1 'lower')
		'lowerUPPER' true (1 'lower'))
)

testHenry062 = (
	self runRegex: #('[[:upper:]]+'
		'UPPERlower1234' true (1 'UPPER')
		'lowerUPPER ' true (1 'UPPER'))
)
testHenry063 = (
	self runRegex: #('[[:space:]]+'
		'2  spaces' true (1 '  '))
)

testHenry064 = (
	self runRegex: #('[^[:space:]]+'
		'  word12!@#$  ' true (1 'word12!@#$'))
)

testHenry065 = (
	self runRegex: #('[[:graph:]]+'
		'abc' true (1 'abc'))
)

testHenry066 = (
	self runRegex: #('[[:print:]]+'
		'abc' true (1 'abc'))
)

testHenry067 = (
	self runRegex: #('[^[:punct:]]+'
		'!hello,world!' true (1 'hello'))
)

testHenry068 = (
	self runRegex: #('[[:xdigit:]]+'
		'  x10FCD  ' true (1 '10FCD')
		' hgfedcba0123456789ABCDEFGH '
			true (1 'fedcba0123456789ABCDEF'))
)

testHenry069 = (
	self runRegex: #('ab|cd'
		'abc' true (1 'ab')
		'abcd' true (1 'ab'))
)

testHenry070 = (
	self runRegex: #('()ef'
		'def' true (1 'ef' 2 ''))
)

testHenry071 = (
	self runRegex: #('()*' nil)
)

testHenry072 = (
	self runRegex: #('*a' nil)
)

testHenry073 = (
	self runRegex: #('^*' nil)
)

testHenry074 = (
	self runRegex: #('$*' nil)
)

testHenry075 = (
	self runRegex: #('(*)b' nil)
)

testHenry076 = (
	self runRegex: #('$b'	'b' false nil)
)

"
testHenry077 = (
	self runRegex: #('a\' nil)
)
"

testHenry078 = (
	self runRegex: #('a\(b'
		'a(b' true (1 'a(b'))
)

testHenry079 = (
	self runRegex: #('a\(*b'
		'ab' true (1 'ab')
		'a((b' true (1 'a((b'))
)

testHenry080 = (
	self runRegex: #('a\\b'
		'a\b' true (1 'a\b'))
)

testHenry081 = (
	self runRegex: #('abc)' nil)
)

testHenry082 = (
	self runRegex: #('(abc' nil)
)

testHenry083 = (
	self runRegex: #('((a))'
		'abc' true (1 'a' 2 'a' 3 'a'))
)

testHenry084 = (
	self runRegex: #('(a)b(c)'
		'abc' true (1 'abc' 2 'a' 3 'c'))
)

testHenry085 = (
	self runRegex: #('a+b+c'
		'aabbabc' true (1 'abc'))
)

testHenry086 = (
	self runRegex: #('a**' nil)
)

testHenry087 = (
	self runRegex: #('a*?' nil)
)

testHenry088 = (
	self runRegex: #('(a*)*' nil)
)

testHenry089 = (
	self runRegex: #('(a*)+' nil)
)

testHenry090 = (
	self runRegex: #('(a|)*' nil)
)

testHenry091 = (
	self runRegex: #('(a*|b)*' nil)
)

testHenry092 = (
	self runRegex: #('(a+|b)*'
		'ab' true (1 'ab' 2 'b'))
)

testHenry093 = (
	self runRegex: #('(a+|b)+'
		'ab' true (1 'ab' 2 'b'))
)

testHenry094 = (
	self runRegex: #('(a+|b)?'
		'ab' true (1 'a' 2 'a'))
)

testHenry095 = (
	self runRegex: #('[^ab]*'
		'cde' true (1 'cde'))
)

testHenry096 = (
	self runRegex: #('(^)*' nil)
)

testHenry097 = (
	self runRegex: #('(ab|)*' nil)
)

testHenry098 = (
	self runRegex: #(')(' nil)
)

testHenry099 = (
	self runRegex: #('' 'abc' true (1 ''))
)

testHenry100 = (
	self runRegex: #('abc' '' false nil)
)

testHenry101 = (
	self runRegex: #('a*'
		'' true '')
)

testHenry102 = (
	self runRegex: #('abcd'
		'abcd' true (1 'abcd'))
)

testHenry103 = (
	self runRegex: #('a(bc)d'
		'abcd' true (1 'abcd' 2 'bc'))
)

testHenry104 = (
	self runRegex: #('([abc])*d'
		'abbbcd' true (1 'abbbcd' 2 'c'))
)

testHenry105 = (
	self runRegex: #('([abc])*bcd'
		'abcd' true (1 'abcd' 2 'a'))
)

testHenry106 = (
	self runRegex: #('a|b|c|d|e' 'e' true (1 'e'))
)

testHenry107 = (
	self runRegex: #('(a|b|c|d|e)f'
		'ef' true (1 'ef' 2 'e'))
	"	((a*|b))*	-	c	-	-"
)

testHenry108 = (
	self runRegex: #('abcd*efg'
		'abcdefg' true (1 'abcdefg'))
)

testHenry109 = (
	self runRegex: #('ab*'
		'xabyabbbz' true (1 'ab')
		'xayabbbz' true (1 'a'))
)

testHenry110 = (
	self runRegex: #('(ab|cd)e' 'abcde' true (1 'cde' 2 'cd'))
)

testHenry111 = (
	self runRegex: #('[abhgefdc]ij' 'hij' true (1 'hij'))
)

testHenry112 = (
	self runRegex: #('^(ab|cd)e' 'abcde' false nil)
)

testHenry113 = (
	self runRegex: #('(abc|)def' 'abcdef' true nil)
)

testHenry114 = (
	self runRegex: #('(a|b)c*d' 'abcd' true (1 'bcd' 2 'b'))
)

testHenry115 = (
	self runRegex: #('(ab|ab*)bc' 'abc' true (1 'abc' 2 'a'))
)

testHenry116 = (
	self runRegex: #('a([bc]*)c*' 'abc' true (1 'abc' 2 'bc'))
)

testHenry117 = (
	self runRegex: #('a([bc]*)(c*d)' 'abcd' true (1 'abcd' 2 'bc' 3 'd'))
)

testHenry118 = (
	self runRegex: #('a([bc]+)(c*d)' 'abcd' true (1 'abcd' 2 'bc' 3 'd'))
)

testHenry119 = (
	self runRegex: #('a([bc]*)(c+d)' 'abcd' true (1 'abcd' 2 'b' 3 'cd'))
)

testHenry120 = (
	self runRegex: #('a[bcd]*dcdcde' 'adcdcde' true (1 'adcdcde'))
)

testHenry121 = (
	self runRegex: #('a[bcd]+dcdcde' 'adcdcde' false nil)
)

testHenry122 = (
	self runRegex: #('(ab|a)b*c' 'abc' true (1 'abc'))
)

testHenry123 = (
	self runRegex: #('((a)(b)c)(d)' 'abcd' true (1 'abcd' 3 'a' 4 'b' 5 'd'))
)

testHenry124 = (
	self runRegex: #('[ -~]*' 'abc' true (1 'abc'))
)

testHenry125 = (
	self runRegex: #('[ -~ -~]*' 'abc' true (1 'abc'))
)

testHenry126 = (
	self runRegex: #('[ -~ -~ -~]*' 'abc' true (1 'abc'))
)

testHenry127 = (
	self runRegex: #('[ -~ -~ -~ -~]*' 'abc' true (1 'abc'))
)

testHenry128 = (
	self runRegex: #('[ -~ -~ -~ -~ -~]*' 'abc' true (1 'abc'))
)

testHenry129 = (
	self runRegex: #('[ -~ -~ -~ -~ -~ -~]*' 'abc' true (1 'abc'))
)

testHenry130 = (
	self runRegex: #('[ -~ -~ -~ -~ -~ -~ -~]*' 'abc' true (1 'abc'))
)

testHenry131 = (
	self runRegex: #('[a-zA-Z_][a-zA-Z0-9_]*' 'alpha' true (1 'alpha'))
)

testHenry132 = (
	self runRegex: #('^a(bc+|b[eh])g|.h$' 'abh' true (1 'bh' 2 nil))
)

testHenry133 = (
	self runRegex: #('(bc+d$|ef*g.|h?i(j|k))'
		'effgz' true (1 'effgz' 2 'effgz' 3 nil)
		'ij' true (1 'ij' 2 'ij' 3 'j')
		'effg' false nil
		'bcdd' false nil
		'reffgz' true (1 'effgz' 2 'effgz' 3 nil))
)

testHenry134 = (
	self runRegex: #('(((((((((a)))))))))' 'a' true (1 'a'))
)

testHenry135 = (
	self runRegex: #('multiple words of text'
		'uh-uh' false nil
		'multiple words of text, yeah' true (1 'multiple words of text'))
)

testHenry136 = (
	self runRegex: #('(.*)c(.*)' 'abcde' true (1 'abcde' 2 'ab' 3 'de'))
)

testHenry137 = (
	self runRegex: #('\((.*), (.*)\)' '(a, b)' true (2 'a' 3 'b'))
)

testMatches = (
	| matcher |
	matcher := RxMatcher forString: '\w+'.
	self assert: (matcher matches: 'now').
	self deny: (matcher matches: 'now is')
)

testMatchesIn = (
	| matcher |
	matcher := RxMatcher forString: '\w+'.
	self assert: (matcher matchesIn: 'now is the time') asArray
		= #('now' 'is' 'the' 'time')
)

testMatchesInCollect = (
	| matcher |
	matcher := RxMatcher forString: '\w+'.
	self assert: (matcher
		matchesIn: 'now is the time'
		collect: [ :each | each reversed ]) asArray
			= #('won' 'si' 'eht' 'emit')
)

testMatchesInDo = (
	| matcher expected |
	matcher := RxMatcher forString: '\w+'.
	expected := #('now' 'is' 'the' 'time') asOrderedCollection.
	matcher
		matchesIn: 'now is the time'
		do: [ :each | self assert: each = expected removeFirst ].
	self assert: expected isEmpty
)

testMatchesOnStream = (
	| matcher |
	matcher := RxMatcher forString: '\w+'.
	self assert: (matcher matchesOnStream: 'now is the time' readStream) asArray
		= #('now' 'is' 'the' 'time')
)

testMatchesOnStreamCollect = (
	| matcher |
	matcher := RxMatcher forString: '\w+'.
	self assert: (matcher
		matchesOnStream: 'now is the time' readStream
		collect: [ :each | each reversed ]) asArray
			= #('won' 'si' 'eht' 'emit')
)

testMatchesOnStreamDo = (
	| matcher expected |
	matcher := RxMatcher forString: '\w+'.
	expected := #('now' 'is' 'the' 'time') asOrderedCollection.
	matcher
		matchesOnStream: 'now is the time' readStream
		do: [ :each | self assert: each = expected removeFirst ].
	self assert: expected isEmpty
)

testMatchesStream = (
	| matcher |
	matcher := RxMatcher forString: '\w+'.
	self assert: (matcher matchesStream: 'now' readStream).
	self deny: (matcher matchesStream: 'now is' readStream)
)

testMatchingRangesIn = (
	| matcher expected |
	matcher := RxMatcher forString: '\w+'.
	expected := #(1 3 5 6 8 10 12 15) asOrderedCollection.
	(matcher matchingRangesIn: 'now is the time') do: [ :range |
		self assert: range first = expected removeFirst.
		self assert: range last = expected removeFirst ].
	self assert: expected isEmpty
)

"
testOptionalMultipleQuantifiedSubexpression = (
	self runRegex: #('((aa?){2})'
		'' false nil
		'a' false nil
		'aa' true (1 'aa')
		'baaa' true (1 'aaa' 2 'aaa'))
)
"

"
testOptionalNestedIntoMultipleQuantified = (
	self runRegex: #('(aa?){2}'
		'' false nil
		'a' false nil
		'aa' true (1 'aa')
		'baaa' true (1 'aaa' 2 'a'))
)
"

testRegex001 = (
	self runRegex: #('^.*$'
		'' true (1 '')
		'a' true (1 'a')
		'abc' true (1 'abc'))
)

testRegex002 = (
	self runRegex: #('a\w+c'
		' abb_bbc ' true (1 'abb_bbc')
		'abb-bc' false nil)
)


"
testRegex004 = (
	self runRegex: #(':isVowel:'
		'aei' true nil
		'xyz' false nil)
)
"

testStringAllRangesOfRegexMatches = (
	| result |
	result := 'aabbcc' allRangesOfRegexMatches: 'b+'.
	self assert: result size = 1.
	self assert: result first first = 3.
	self assert: result first last = 4
)

testStringAllRegexMatches = (
	| result |
	result := 'aabbcc' allRegexMatches: 'b+'.
	self assert: result size = 1.
	self assert: result first = 'bb'
)

testStringAsRegex = (
	self assert: 'b+' asRegex class = RxParser preferredMatcherClass
)

testStringAsRegexIgnoringCase = (
	self assert: 'b+' asRegexIgnoringCase class = RxParser preferredMatcherClass
)

testStringCopyWithRegexMatchesReplacedWith = (
	self assert: ('aabbcc' copyWithRegex: 'b+' matchesReplacedWith: 'X') = 'aaXcc'
)

testStringCopyWithRegexMatchesTranslatedUsing = (
	self assert: ('aabbcc'
		copyWithRegex: 'b+'
		matchesTranslatedUsing: [ :each |
			self assert: each = 'bb'.
			'X' ]) = 'aaXcc'
)

testStringMatchesRegex = (
	self deny: ('aabbcc' matchesRegex: 'a+').
	self deny: ('aabbcc' matchesRegex: 'b+c+').
	self assert: ('aabbcc' matchesRegex: 'a+b+c+')
)

testStringMatchesRegexIgnoringCase = (
	self deny: ('AABBCC' matchesRegexIgnoringCase: 'a+').
	self deny: ('AABBCC' matchesRegexIgnoringCase: 'b+c+').
	self assert: ('AABBCC' matchesRegexIgnoringCase: 'a+b+c+')
)

testStringPrefixMatchesRegex = (
	self assert: ('aabbcc' prefixMatchesRegex: 'a+').
	self deny: ('aabbcc' prefixMatchesRegex: 'b+')
)

testStringPrefixMatchesRegexIgnoringCase = (
	self assert: ('AABBCC' prefixMatchesRegexIgnoringCase: 'a+').
	self deny: ('AABBCC' prefixMatchesRegexIgnoringCase: 'b+')
)

testStringRegexMatchesCollect = (
	| result |
	result := 'aabbcc' regex: 'b+' matchesCollect: [ :each | each asUppercase ].
	self assert: result size = 1.
	self assert: result first = 'BB'
)

testStringRegexMatchesDo = (
	| result |
	result := OrderedCollection new.
	'aabbcc' regex: 'b+' matchesDo: [ :each | result add: each ].
	self assert: result size = 1.
	self assert: result first = 'bb'
)

testSubexpressionCount = (
	| matcher |
	#(('a' 1) ('a(b)' 2) ('a(b(c))' 3) ('(a)(b)' 3) ('(a(b))*' 3)) do: [ :pair |
		matcher := RxMatcher forString: pair first.
		matcher supportsSubexpressions
			ifTrue: [ self assert: matcher subexpressionCount = pair last ] ]
)

)
