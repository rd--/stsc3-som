DateAndTimeTest = TestCase (

selectorsToBeIgnored = (
	| private |
	private := #( #printOn: ).
	^ super selectorsToBeIgnored, private
)

testArithmeticAcrossDateBoundary = (
	| t1 t2 |
	t1 := '2004-01-07T11:55:00+00:00' asDateAndTime.
	t2 := t1 - ( (42900+1) seconds).
	self
		assert: t2 = ('2004-01-06T23:59:59+00:00' asDateAndTime)
)

testAsSecondsIsTheSameInAnyTimezone = (
	| posixEpochInVariousLocations |
	posixEpochInVariousLocations := {
		'1970-01-01T00:00:00+00:00' asDateAndTime .
		'1970-01-01T01:00:00+01:00' asDateAndTime .
		'1970-01-01T02:00:00+02:00' asDateAndTime .
		'1970-01-01T12:00:00+12:00' asDateAndTime .
		'1969-12-31T23:00:00-01:00' asDateAndTime .
		'1969-12-31T22:00:00-02:00' asDateAndTime .
		'1969-12-31T12:00:00-12:00' asDateAndTime
	}.
	posixEpochInVariousLocations do: [ :e |
		self assert: 2177452800 equals: e asSeconds ].
)

testAsSecondsMatchesFromSecondsUsingAnyOffset = (
	| aDateAndTime seconds newDateAndTime |
	aDateAndTime := DateAndTime year: 2004 month: 2 day: 29 hour: 13 minute: 33 second: 0 offset: 2 hours.
	seconds := aDateAndTime asSeconds.
	newDateAndTime := DateAndTime fromSeconds: seconds.
	self assert: seconds equals: newDateAndTime asSeconds.
	aDateAndTime := DateAndTime year: 2004 month: 2 day: 29 hour: 13 minute: 33 second: 0 offset: -11 hours.
	seconds := aDateAndTime asSeconds.
	newDateAndTime := DateAndTime fromSeconds: seconds.
	self assert: seconds equals: newDateAndTime asSeconds.
)

testAsSecondsMatchesFromSecondsUsingCurrentLocalOffset = (
	| seconds newDateAndTime now |
	now := DateAndTime now.
	seconds := now asSeconds.
	newDateAndTime := DateAndTime fromSeconds: seconds.
	self assert: seconds equals: newDateAndTime asSeconds.
)

testAsSecondsMatchesFromSecondsUsingZeroOffset = (
	| aDateAndTime seconds newDateAndTime |
	aDateAndTime := DateAndTime year: 2004 month: 2 day: 29 hour: 13 minute: 33 second: 0 offset: 0 hours.
	seconds := aDateAndTime asSeconds.
	newDateAndTime := DateAndTime fromSeconds: seconds.
	self assert: seconds equals: newDateAndTime asSeconds.
)

testAsStringFromString = (
	| day hour dt min mo nano offset sec dtNew s |
	mo := 12.
	day := 2.
	hour := 2.
	min := 3.
	sec := 4.
	nano := 5.
	offset := 6 hours.
	(-20 to: -1) , (1990 to: 2010) do: [:yr |
		dt := DateAndTime
			year: yr month: mo day: day
			hour: hour minute: min second: sec nanoSecond: nano
			offset: offset.
		s := dt asString.
		dtNew := DateAndTime fromString: s.
		self assert: dt equals: dtNew].
)

testDateTimeDenotation1 = (
	| twoPmInLondon twoPmUTCInLocalTimeOfDetroit nineAmInDetroit |
	twoPmInLondon := DateAndTime
				year: 2004
				month: 11
				day: 2
				hour: 14
				minute: 0
				second: 0
				offset: 0 hours.
	twoPmUTCInLocalTimeOfDetroit := twoPmInLondon utcOffset: -5 hours.
	nineAmInDetroit  := '2004-11-02T09:00:00-05:00' asDateAndTime.
	self assert:  twoPmUTCInLocalTimeOfDetroit = nineAmInDetroit.
)

testDateTimeDenotation2 = (
	| lateEveningInLondon lateEveningInLocalTimeOfMoscow
	 localMoscowTimeFromDenotation |
	lateEveningInLondon := DateAndTime
				year: 2004
				month: 11
				day: 30
				hour: 23
				minute: 30
				second: 0
				offset: 0 hours.
	lateEveningInLocalTimeOfMoscow := lateEveningInLondon utcOffset: 3 hours.
	localMoscowTimeFromDenotation  := '2004-12-01T02:30:00+03:00' asDateAndTime.
	self assert:  lateEveningInLocalTimeOfMoscow = localMoscowTimeFromDenotation.
)

testErrorWhenDayIsAfterMonthEnd = (
	self
		should:
			[DateAndTime
				year: 2004
				month: 2
				day: 30]
		raise: Error.
)

testErrorWhenDayIsBeforeMonthStart = (
	self
		should:
			[DateAndTime
				year: 2004
				month: 2
				day: -1]
		raise: Error.
	self
		should:
			[DateAndTime
				year: 2004
				month: 2
				day: 0]
		raise: Error.
)

testFromString = (
	| fromString fromStringNoOffset fromStringUTC |
	fromString := DateAndTime fromString: '-1199-01-05T20:33:14.321-05:00'.
	self assert: (fromString printString = '-1199-01-05T20:33:14.321-05:00').
	fromStringNoOffset := DateAndTime fromString: '-1199-01-05T20:33:14.321'.
	self assert: (fromStringNoOffset offset = DateAndTime localOffset).
	fromStringUTC := DateAndTime fromString: '2011-08-26T18:00:03Z'.
	self assert: (fromStringUTC printString = '2011-08-26T18:00:03+00:00').
)

testGetSeconds = (
	| dt s1 id stSeconds seconds1 seconds2 |
	s1 :=  '2019-01-12T10:07:05.18743-05:00'.
	dt := s1 asDateAndTime.
	self assert: 18000 seconds negated equals: dt offset.
	seconds1 := dt getSeconds.
	self assert: 36425 equals: seconds1.
	id := dt identityHash.
	stSeconds := dt asSeconds.
	dt localOffsetSeconds: 0.
	self assert: id equals: dt identityHash.
	self assert: '2019-01-12T15:07:05.18743+00:00' equals: dt asString.
	self assert: stSeconds equals: dt asSeconds.
	self assert: '2019-01-12T10:07:05.18743-05:00' asDateAndTime equals: dt.
	seconds2 := dt getSeconds.
	self deny: seconds1 equals: seconds2.
	self assert: 54425 equals: seconds2.
)

testHash = (
	| date0 date1 date2 |
	date0 := DateAndTime unixEpoch.
	date1 := DateAndTime new ticks: (date0 + 1 hours) ticks offset: 0 hours.
	date2 := DateAndTime new ticks: (date0 - 2 hours) ticks offset: -3 hours.
	self assert: (date1 = date2) ==> [date1 hash = date2 hash]
)

"
testInstanceCreation = (
	| t |
	t := DateAndTime
			year: 1 month: 1 day: 2
			hour: 2 minute: 3 second: 4 nanoSecond: 5
			offset: 6 hours.
	self
		assert: (t julianDayNumber = 1721427);
		assert: (t offset = 6 hours);
		assert: (t hour = 2);
		assert: (t minute = 3);
		assert: (t second = 4);
		assert: (t nanoSecond = 5).
)
"

testMonotonicity = (
	| t1 t2 t3 t4 |
	t1 := DateAndTime now.
	t2 := DateAndTime now.
	(Delay forMilliseconds: 1000) wait.
	t3 := DateAndTime now.
	t4 := DateAndTime now.
	self
		assert: (	t1 <= t2);
		assert: (	t2 < t3);
		assert: (	t3 <= t4).
)

testPrintString = (
	| dt dtNoOffset |
	dt :=DateAndTime
		year: 2004
		month: 11
		day: 2
		hour: 14
		minute: 3
		second: 5
		nanoSecond: 12345
		offset: (Duration seconds: (5 * 3600)).
	self assert: dt printString = '2004-11-02T14:03:05.000012345+05:00'.
	self assert: ('2002-05-16T17:20:45.1+01:01' asDateAndTime printString = '2002-05-16T17:20:45.1+01:01').
	self assert:	(' 2002-05-16T17:20:45.02+01:01' asDateAndTime printString = '2002-05-16T17:20:45.02+01:01').
	self assert:	('2002-05-16T17:20:45.000000009+01:01' asDateAndTime printString =  '2002-05-16T17:20:45.000000009+01:01').
	self assert: ('2002-05-16T17:20:45+00:00' asDateAndTime printString = '2002-05-16T17:20:45+00:00' ).
	self assert: (' 2002-05-16T17:20:45+01:57' asDateAndTime printString = '2002-05-16T17:20:45+01:57').
	self assert: (' 2002-05-16T17:20:45-02:34' asDateAndTime printString = '2002-05-16T17:20:45-02:34').
	self assert: ('2002-05-16T17:20:45+00:00' asDateAndTime printString = '2002-05-16T17:20:45+00:00').
	self assert: ('1997-04-26T01:02:03+01:02:3' asDateAndTime printString = '1997-04-26T01:02:03+01:02:3').
	"When no offset is provided, the local one is used"
	dtNoOffset := '2002-05-16T17:20' asDateAndTime.
	self assert: (('2002-05-16T17:20:00*' match: dtNoOffset printString) and: [dtNoOffset offset = DateAndTime localOffset]).
)

testReadFrom = (
	self assert: '-1199-01-05T20:33:14.321-05:00' equals: (DateAndTime readFrom: '-1199-01-05T20:33:14.321-05:00' readStream) printString.
	self assert: '-1199-01-05T20:33:14.321-05:00' equals: '-1199-01-05T20:33:14.321-05:00' asDateAndTime printString.
	self assert: '2002-05-16T17:20:45.1+01:01' equals: '2002-05-16T17:20:45.1+01:01' asDateAndTime printString.
	self assert: '2002-05-16T17:20:45.02+01:01' equals: ' 2002-05-16T17:20:45.02+01:01' asDateAndTime printString.
	self assert: '2002-05-16T17:20:45.000000009+01:01' equals: '2002-05-16T17:20:45.000000009+01:01' asDateAndTime printString.
	self assert: '2002-05-16T17:20:45+01:57' equals: ' 2002-05-16T17:20:45+01:57' asDateAndTime printString.
	self assert: '2002-05-16T17:20:45-02:34' equals: ' 2002-05-16T17:20:45-02:34' asDateAndTime printString.
	self assert: '2002-05-16T17:20:45+00:00' equals: '2002-05-16T17:20:45+00:00' asDateAndTime printString.
	self assert: '1997-04-26T01:02:03+01:02:3' equals: '1997-04-26T01:02:03+01:02:3' asDateAndTime printString
)

testSmalltalk80Accessors = (
	| t |
	t := DateAndTime
			year: 1 month: 1 day: 2
			hour: 2 minute: 3 second: 4 nanoSecond: 5
			offset: 6 hours.
	self
		assert: (t hours = t hours);
		assert: (t minutes = t minute);
		assert: (t seconds = t second).
)

testTimeZoneEquivalence = (
  "DateAndTimeTest new testTimeZoneEquivalence"
	"When the clock on the wall in Detroit says 9:00am, the clock on the wall
	in London says 2:00pm. The Duration difference between the corresponding
	DateAndTime values should be zero."
	 " Detroit is 5 hours behind UTC, this offset to UTC is therefore written with a minus sign. This example tests both the correct interpretation of the DateAndTime denotation and correct DateAndTime arithmetics. "
	| twoPmInLondon nineAmInDetroit durationDifference |
	twoPmInLondon := '2004-11-02T14:00:00+00:00' asDateAndTime.
	nineAmInDetroit  := '2004-11-02T09:00:00-05:00' asDateAndTime.
	durationDifference := twoPmInLondon - nineAmInDetroit.
	self assert: durationDifference asSeconds = 0.
	self assert: twoPmInLondon = nineAmInDetroit
)

testTimeZoneEquivalence2 = (
  "DateAndTimeTest new testTimeZoneEquivalence2"
	"This example demonstates the fact that
        2004-05-24T22:40:00  UTC  is
        2004-05-25T01:40:00  in Moscow
     (Moscow is 3 hours ahead of UTC)  "
	| thisMoment thisMomentInMoscow |
    thisMoment := DateAndTime year: 2004 month: 5 day: 24 hour: 22 minute: 40.
    thisMomentInMoscow := thisMoment utcOffset: 3 hours.
	self assert: (thisMoment - thisMomentInMoscow) asSeconds = 0.
	self assert: thisMoment = thisMomentInMoscow
)


)
