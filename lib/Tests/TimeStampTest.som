TimeStampTest = TestCase (

| timestamp aTimeStamp |

selectorsToBeIgnored = (
	| deprecated private special |
	deprecated := #().
	private := #( #printOn: ).
	special := #().
	^ super selectorsToBeIgnored, deprecated, private, special.
)

setUp = (
	timestamp := TimeStamp date: ('1-10-2000' asDate) time: ('11:55:00 am' asTime).
	aTimeStamp := TimeStamp readFrom: '1-02-2004 12:34:56 am' readStream
)

tearDown = (
	timestamp := nil.
)

testAccessing = (
	| d t |
	d := '1-10-2000' asDate.
	t := '11:55:00 am' asTime.
	self
		assert: (timestamp offset: Date defaultOffset) date = d;
		assert: (timestamp offset: Date defaultOffset) time = t.
)

testArithmetic = (
	| ts |
	ts := timestamp minusDays: 123.  	"9 September 1999, 11:55 am"
	ts := ts minusSeconds: 1056.			"9 September 1999, 11:37:24 am"
	ts := ts plusDays: 123.				"10 January 2000, 11:37:24 am"
	ts := ts plusSeconds: 1056.			"10 January 2000, 11:55 am"
	self
		assert: ts  = timestamp.
)

testArithmeticAcrossDateBoundary = (
	| ts |
	ts := timestamp minusSeconds: ((11*3600) + (55*60) + 1).
	self
		assert: ts = ('1-9-2000 11:59:59 pm' asTimeStamp).
)

testComparing = (
	| ts1 ts2 ts3 c1 c2 le |
	ts1 := TimeStamp date: ('01-10-2000' asDate) time: ('11:55:00 am' asTime).
	ts2 := TimeStamp date: ('07-26-2003' asDate) time: ('22:09:45 am' asTime).
	ts3 := TimeStamp date: ('05-28-1972' asDate) time: ('04:31:14 pm' asTime).
	self
		assert: ts1 = timestamp;
		assert: ts1 hash = timestamp hash;
		assert: timestamp = timestamp copy;
		assert: ts1 < ts2;
		deny: ts1 < ts3.
	c1 := TimeStamp current.
	c2 := TimeStamp current.
	le := (c1 <= c2).
	self assert: le.
)

testConverting = (
	| d t |
	d := '1-10-2000' asDate.
	t := '11:55:00 am' asTime.
	self
		assert: timestamp asSeconds = (d asSeconds + t asSeconds);
		assert: timestamp asDate = d;
		assert: timestamp asTime = t;
		assert: timestamp asTimeStamp == timestamp;
		assert: timestamp dateAndTime = {d. t}.
)

testDate = (
	self assert: aTimeStamp date = '01-02-2004' asDate
)

testDateAndTime = (
	self assert: aTimeStamp dateAndTime
			= (Array with: '01-02-2004' asDate with: '00:34:56' asTime)
)

testFromSeconds = (
	self
		assert: (TimeStamp fromSeconds: 3124958100) = timestamp.
)

testFromString = (
	self should: [ timestamp = (TimeStamp fromString: '1-10-2000 11:55:00 am') ]
)

testInstanceCreation = (
	self
		should: [ TimeStamp midnight asDuration = (0 hours) ];
		should: [ TimeStamp noon asDuration = (12 hours) ].
)

testMinusDays = (
	self assert: (aTimeStamp minusDays: 5) dateAndTime
			= (Array with: '12-28-2003' asDate with: '00:34:56' asTime)
)

testMinusSeconds = (
	self assert: (aTimeStamp minusSeconds: 34 * 60 + 56) dateAndTime
			= (Array with: '01-02-2004' asDate with: '00:00:00' asTime)
)

testMinusSecondsOverMidnight = (
	self assert: (aTimeStamp minusSeconds: 34 * 60 + 57) dateAndTime
			= (Array with: '01-01-2004' asDate with: '23:59:59' asTime)
)

testPlusDays = (
	self assert: (aTimeStamp plusDays: 366) dateAndTime
			= (Array with: '01-02-2005' asDate with: '00:34:56' asTime)
)

testPlusSeconds = (
	self assert: (aTimeStamp plusSeconds: 60 * 60 ) dateAndTime
			= (Array with: '01-02-2004' asDate with: '01:34:56' asTime)
)

testPlusSecondsOverMidnight = (
	self assert: (aTimeStamp plusSeconds: 24 * 60 * 60 + 1) dateAndTime
			= (Array with: '01-03-2004' asDate with: '00:34:57' asTime)
)

testPrintOn = (
	| ref ws |
	ref := '2 January 2004 12:34:56 am'.
	ws := '' writeStream.
	aTimeStamp printOn: ws.
	self assert: ws contents = ref
)

testPrinting = (
	self
		assert: timestamp printString = '10 January 2000 11:55 am'.
)

testReadFromA1 = (
	|ts|
	ts := TimeStamp current offset: Duration zero. "current as UTC"
	self assert: (ts = (TimeStamp fromString: ts asString)).
	ts := TimeStamp current offset: (Duration hours: 1).
	self deny: (ts = (TimeStamp fromString: ts asString)).
)

testSorting = (
	| c1 c2 |
	c1 := TimeStamp current.
	c2 := TimeStamp current.
	self
		assert: (TimeStamp current) <= (TimeStamp current);
		assert: (c1 <= c2).
)

testStoreOn = (
	| ref ws |
	ref := '''2 January 2004 12:34:56 am'' asTimeStamp'.
	ws := '' writeStream.
	aTimeStamp storeOn: ws.
	self assert: ws contents = ref
)

testTime = (
	self assert: aTimeStamp time =  '00:34:56' asTime
)

testTimeStamp = (
	self assert: aTimeStamp = aTimeStamp asTimeStamp
)

)
