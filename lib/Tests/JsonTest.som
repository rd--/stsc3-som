JsonTest = TestCase (

assertIncompleteJson: aString = (
	self should: [self readFrom: aString] raise: JsonIncompleteError
)

assertInvalidJson: aString = (
	self should: [self readFrom: aString] raise: JsonInvalidError
)

json: aString equals: aValue = (
	| readValue |
	readValue := self readFrom: aString.
	self assert: aValue equals: readValue
)

readFrom: aString = (
	^ (Json newWithConstructors: {JsonDummyTestObject.}) readFrom: aString readStream
)

render: anObject equals: aString = (
	self assert: (Json render: anObject) = aString
)

simpleDummyObject = (
	^ JsonDummyTestObject new a: 1; b: 2; c: 3; yourself
)

testArray = (
	self json: '[]' equals: #().
	self json: '[[]]' equals: #(#()).
	self json: '[[], []]' equals: #(#() #()).
	self json: '["hi", "there"]' equals: #('hi' 'there').
	self json: '[["a", "b", null]]' equals: #(('a' 'b' nil)).
)

testAtomFalse = (
	self json: 'false' equals: false.
	self json: '  false' equals: false.
	self json: 'false  ' equals: false.
	self json: '  false  ' equals: false.
)

testAtomNull = (
	self json: 'null' equals: nil.
	self json: '  null' equals: nil.
	self json: 'null  ' equals: nil.
	self json: '  null  ' equals: nil.
)

testAtomNumber = (
	self json: '1' equals: 1.
	self json: '123' equals: 123.
	self should: [ self json: '0123' equals: 123 ] raise: JsonSyntaxError. "No leading zeroes."
	self json: '1.23e2' equals: 123.
	self json: '-1' equals: -1.
	self json: '-0' equals: 0.
	self json: '[-1.2]' equals: #(-1.2).
)

testAtomString = (
	self json: '"hi"' equals: 'hi'.
	self json: '"\""' equals: '"'.
	self json: '""' equals: ''.
)

testAtomTrue = (
	self json: 'true' equals: true.
	self json: '  true' equals: true.
	self json: 'true  ' equals: true.
	self json: '  true  ' equals: true.
)

testCtor = (
	self json: '@JsonDummyTestObject {"a": 1, "b": 2, "c": 3}' equals: self simpleDummyObject.
	self json: (Json render: self simpleDummyObject) equals: self simpleDummyObject.
)

testDictionary = (
	self json: '{}' equals: (JsonObject new).
	self json: '{"a": "a"}' equals: (JsonObject new at: 'a' put: 'a'; yourself).
	self json: '{"a": [[]]}' equals: (JsonObject new at: 'a' put: #(#()); yourself).
	self json: '{"a":"b", "b":"a"}' equals: (JsonObject new add: 'a'->'b'; add: 'b'->'a';yourself).
)

testDictionaryClass = (
	| parser |
	parser := Json new.
	self assert: (parser readFrom: '{}' readStream) class == JsonObject.
	parser dictionaryClass: OrderedJsonObject.
	self assert: (parser readFrom: '{}' readStream) class == OrderedJsonObject.
	self assert: (parser readFrom: '{"x":{"y":{}}}' readStream) x y class == OrderedJsonObject
)

testIncomplete = (
	self assertIncompleteJson: ''.
	self assertIncompleteJson: '  '.
	self assertIncompleteJson: '  tr'.
	self assertIncompleteJson: 'tru'.
	self assertIncompleteJson: '['.
	self assertIncompleteJson: '[true'.
	self assertIncompleteJson: '[true,'.
	self assertIncompleteJson: '{'.
	self assertIncompleteJson: '{"hi"'.
	self assertIncompleteJson: '{"hi":'.
	self assertIncompleteJson: '{"hi":true'.
	self assertIncompleteJson: '{"hi":true,'.
	self assertIncompleteJson: '{"hi":true,"'.
	self assertIncompleteJson: '"hello'.
	self assertIncompleteJson: '"hello '.
)

testInvalid = (
	self assertInvalidJson: 'x'.
	self assertInvalidJson: '  x'.
	self assertInvalidJson: '  trx'.
	self assertInvalidJson: 'trux'.
	self assertInvalidJson: '.'.
	self assertInvalidJson: ':'.
	self assertInvalidJson: ','.
	self assertInvalidJson: ']'.
	self assertInvalidJson: '}'.
	self assertInvalidJson: '[x'.
	self assertInvalidJson: '[true t'.
	self assertInvalidJson: '[true,]'.
	self assertInvalidJson: '{]'.
	self assertInvalidJson: '{,'.
	self assertInvalidJson: '{"hi",'.
	self assertInvalidJson: '{"hi":x'.
	self assertInvalidJson: '{"hi":,'.
	self assertInvalidJson: '{"hi":true "'.
	self assertInvalidJson: '{"hi":true,}'.
)

testJsonObjectAtPutReturnsTheObject = (
	{ JsonObject. OrderedJsonObject } do: [ :jsonObjectClass |
		| json |
		json := 	jsonObjectClass new.
		self assert: (json at: 'foo' put: 1) == json.
		self assert: (json foo: 1) == json ]
)

testMissingCtor = (
	self assertInvalidJson: '@Missing[]'
)

testMissingCtorNoMap = (
	self
		should: [Json new readFrom: '@Missing[]' readStream]
		raise: JsonInvalidError
)

testNonStringKeysRaiseError = (
	{ JsonObject. OrderedJsonObject } do: [ :jsonObjectClass |
		| json |
		json := 	jsonObjectClass new.
		self should: [ json at: 1 put: 1 ] raise: Error.
		self assert: json isEmpty.
		json at: '1' put: 1.
		self assert: 1 equals: (json at: '1') ]
)

testStreaming = (
	| j |
	j := Json new stream: 'truefalsetrue[]{}1.234 5.678"A""B"nullnull' readStream.
	self assert: j readAny equals: true.
	self assert: j readAny equals: false.
	self assert: j readAny equals: true.
	self assert: j readAny equals: #().
	self assert: j readAny equals: JsonObject new.
	self assert: j readAny equals: 1.234.
	self assert: j readAny equals: 5.678.
	self assert: j readAny equals: 'A'.
	self assert: j readAny equals: 'B'.
	self assert: j readAny equals: nil.
	self assert: j readAny equals: nil.
)

testWriteAssociation = (
	self render: 'key' -> 'value' equals: '"key": "value"'.
	self render: 'key' -> 2 equals: '"key": 2'.
	self render: 42 -> 2 equals: '"42": 2'.
	self render: #(42 43 44) -> 2 equals:  '"#(42 43 44)": 2'.
)

testWriteString = (
	self render: '"' equals: '"\""'.
	self render: 'hi' equals: '"hi"'.
	self render: ({$a. Character lf. $b} as: String) equals: '"a\nb"'.
)

)
