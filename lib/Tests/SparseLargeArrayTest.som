SparseLargeArrayTest = SparseLargeTableTest (

classUnderTest = (
	^ SparseLargeArray
)

expectedFailures = (
	^ super expectedFailures ,
		#(testAccessing testSparseElementsAndIndicesDo) "SparseLargeArray(SparseLargeTable)>>zapDefaultOnlyEntries fails for last chunk"
)

testAccessingWithoutZapping = (
	| size chunkSize indices table |
	size := 60.
	chunkSize := 8.
	indices := #(20 22 23 27 28 29 54 56 57 58).
	table := self classUnderTest new: size chunkSize: chunkSize arrayClass: Array base: 11 defaultValue: 0.
	indices do: [:index |
		table at: index put: index squared].
	self shouldRaiseError: [table at: 40 put: 2 << 15].
	self assert: size equals: table size.
	self assert: chunkSize equals: table chunkSize.
	indices do: [:index |
		self assert: index squared equals: ((table at: index))].
)

testSparseElementsAndIndicesDoWithoutZapping = (
	| defaultValue indices table sparse |
	defaultValue := 0.
	indices := #(20 22 23 27 28 29 54 56 57 58).
	table := self classUnderTest new: 60 chunkSize: 8 arrayClass: Array base: 11 defaultValue: defaultValue.
	indices do: [:index |
		table at: index put: index squared].
	sparse := Dictionary new.
	table sparseElementsAndIndicesDo: [:element :index |
		self deny: (sparse includesKey: index).
		sparse at: index put: element].
	table withIndexDo: [:element :index |
		self assert: element equals: (sparse at: index ifAbsent: [0])].
)

)
