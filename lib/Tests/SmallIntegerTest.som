SmallIntegerTest = TestCase (

testBasicNew = (
	self should: [SmallInteger basicNew] raise: Error.
)

testDecimalDigitLength = (
	| x length random |
	x := 1.
	length := 1.
	[ length <= 19 ] whileTrue: [
		self
			assert: length equals: x decimalDigitLength;
			assert: (length - 1 max: 1) equals: (x - 1) decimalDigitLength.
		x := x * 10.
		length := length + 1 ].
	#(
		0 1
		4 1
		12 2
		123 3
		1234 4
		56789 5
		657483 6
		6571483 7
		65174383 8
		625744831 9
		1000001111 10
	), {
		SmallInteger maxVal. Smalltalk wordSize = 8 ifTrue: [ 19 ] ifFalse: [ 10 ]
	} groupsDo: [ :input :expectedOutput |
		self assert: expectedOutput equals: input decimalDigitLength ].
	100 timesRepeat: [
		x := SmallInteger maxVal atRandom.
		self assert: x asString size equals: x decimalDigitLength ]
)

testDivide = (
	self assert: 2 / 1 = 2.
	self assert: (3 / 2) isFraction.
	self assert: 4 / 2 = 2.
)

testEven = (
	self assert: (SmallInteger minVal even).
	self deny: (SmallInteger maxVal even).
	self deny: ((SmallInteger minVal + 1) even).
	self assert: ((SmallInteger maxVal - 1) even).
	self deny: (1 even).
	self deny: (-1 even).
	self assert: (2 even).
	self assert: (-2 even).
	self assert: (0 even).
)

testNew = (
	self should: [SmallInteger new] raise: Error.
)

testOdd = (
	self deny: (SmallInteger minVal odd).
	self assert: (SmallInteger maxVal odd).
	self assert: ((SmallInteger minVal + 1) odd).
	self deny: ((SmallInteger maxVal - 1) odd).
	self assert: (1 odd).
	self assert: (-1 odd).
	self deny: (2 odd).
	self deny: (-2 odd).
	self deny: (0 odd).
)

testPrintString = (
	self assert: 1 printString  = '1'.
	self assert: -1 printString  = '-1'.
	self assert: 12345 printString  = '12345'.
	self assert: -54321 printString  = '-54321'
)

)
