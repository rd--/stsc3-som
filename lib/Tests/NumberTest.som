NumberTest = ClassTestCase (

testFractionPart = (
	self
		assert: 2 fractionPart = 0;
		assert: (1/2) fractionPart = (1/2);
		assert: ((4/3) fractionPart closeTo: (1/3));
		assert: 2.0 fractionPart = 0.0;
		assert: 0.5 fractionPart = 0.5;
		assert: 2.5 fractionPart = 0.5
)

testIntegerPart = (
	self
		assert: 2 integerPart = 2;
		assert: (1/2) integerPart = 0;
		assert: (4/3) integerPart = 1;
		assert: 2.0 integerPart = 2.0;
		assert: 0.5 integerPart = 0.0;
		assert: 2.5 integerPart = 2.0
)

testOne = (
	self
		assert: Integer one = 1;
		assert: Float one = 1.0
)

testRaisedToInteger = (
	self
		assert: (2 raisedToInteger: 0) = 1;
		assert: (2 raisedToInteger: 1) = 2;
		assert: (2 raisedToInteger: 4) = 16;
		assert: (0 raisedToInteger: 0) = 1;
		assert: (0 raisedToInteger: 2) = 0;
		assert: (2 raisedToInteger: -1) = (1/2);
		assert: (2 raisedToInteger: -4) = (1/16).
	self
		assert: (-3 raisedTo: 0) = 1;
		assert: (-3 raisedTo: 1) = -3;
		assert: (-3 raisedTo: 2) = 9;
		assert: (-3 raisedTo: 3) = -27;
		assert: (-3 raisedTo: -2) = (1/9);
		assert: (-3 raisedTo: -3) = (-1/27).
)

testRaisedToIntegerWithFloats = (
	self
		assert: (2.0 raisedToInteger: 0) = 1.0;
		assert: (2.0 raisedToInteger: 1) = 2.0;
		assert: (2.0 raisedToInteger: 4) = 16.0;
		assert: (0.0 raisedToInteger: 0) = 1.0;
		assert: (0.0 raisedToInteger: 2) = 0.0;
		assert: (2.0 raisedToInteger: -1) = 0.5;
		assert: (2.0 raisedToInteger: -4) = 0.0625.
	self
		assert: (-3.0 raisedTo: 0) = 1.0;
		assert: (-3.0 raisedTo: 1) = -3.0;
		assert: (-3.0 raisedTo: 2) = 9.0;
		assert: (-3.0 raisedTo: 3) = -27.0;
		assert: (-2.0 raisedTo: -2) = 0.25;
		assert: (-2.0 raisedTo: -3) = -0.125.
)

testReadFrom = (
	self assert: 1.0e-14	= (Number readFrom: '1.0e-14').
)

testReciprocal = (
	self
		assert: 1 reciprocal = 1;
		assert: 2 reciprocal = (1/2);
		assert: -1 reciprocal = -1;
		assert: -3 reciprocal = (-1/3).
)

)
