SortedCollectionTest = TestCase (

testAdd = (
	| collection |
	collection := #(10 9 8 7 5 4 4 2) asSortedCollection.
	self assert: collection first = 2.
	self assert: collection last = 10.
	self assert: (collection size = 8).
	collection add:1.
	self assert: (collection size = 9).
	collection add: 6.
	self assert: ((collection at: 5) = 5).
	self assert: (collection size = 10).
	collection add: 3.
)

testAddAll = (
	| sorted2 sorted|
	sorted2 := SortedCollection new.
	sorted2 add: 'brochet'; add:'truitelle'.
	sorted := SortedCollection new.
	sorted addAll: sorted2.
	self assert: (sorted hasEqualElements: sorted2).
)

testAddAll2 = (
	| sorted2 sorted|
	sorted2 := SortedCollection new.
	sorted2 add: 'brochet'; add:'truitelle'.
	sorted := SortedCollection new.
	sorted add: 'perche'.
	sorted addAll: sorted2.
	self assert: (sorted size = (sorted2 size + 1)).
	sorted2 do:
			[ :each | self assert: (sorted includes: each)]
)

testCollect = (
	|result aSortedCollection|
	result := OrderedCollection new add:true ; add: true ; add: true ; add: false ; add: false; yourself.
	aSortedCollection := (1 to: 5) asSortedCollection.
	self assert: (result = (aSortedCollection collect: [:each | each < 4])).
)

testCopy = (
	|aSortedCollection copySorted|
	aSortedCollection := SortedCollection new.
	aSortedCollection sortBlock: [:a :b | a < b].
	aSortedCollection add: 'truite' ; add: 'brochet'.
	self assert: aSortedCollection first = 'brochet'.
	copySorted := aSortedCollection copy.
	self assert: (copySorted  hasEqualElements: aSortedCollection).
	self assert: (copySorted  species = aSortedCollection species).
	self assert: (copySorted  sortBlock = aSortedCollection sortBlock).
	self assert: copySorted first = 'brochet'.
)

testCreation = (
	| collection |
	collection := #(10 9 3 6 1 8 7 5 4 2) asSortedCollection.
	self assert: collection = (1 to: 10) asSortedCollection.
)

testEquals = (
	|aSortedCollection|
	aSortedCollection := SortedCollection new.
	aSortedCollection add:'truite' ; add: 'brochet'.
	self assert: aSortedCollection copy = aSortedCollection.
)

testMedian = (
	|aSortedCollection|
	aSortedCollection := (1 to: 10) asSortedCollection.
	self assert: aSortedCollection median=5.
	aSortedCollection := SortedCollection new.
	aSortedCollection add:'truite' ; add:'porcinet' ; add:'carpe'.
	self assert: (aSortedCollection median = 'porcinet').
)

testRemoveAll = (
	| c1 c2 s2 |
	c1 := #(10 9 8 7 5 4 4 2) asSortedCollection: [:a :b | a >= b].
	c2 := c1 copy.
	s2 := c2 size.
	c1 removeAll.
	self assert: c1 size = 0.
	self assert: c2 size = s2 description: 'the copy has not been modified'.
	c1 add: 13; add: 14.
	self assert: (c1 first = 14 and: [c1 second = 13])  description: 'the sortBlock has been preserved'.
)

testReversed = (
	| sc1 sc2 sc3 |
	sc1 := #(1 2 3 4) asSortedCollection.
	self assert: sc1 reversed asArray = sc1 asArray reversed.
	self
		assert: sc1 reversed class = SortedCollection
		description: 'reversing a SortedCollection should answer a SortedCollection'.
	sc1 removeFirst; removeLast.
	sc2 := sc1 reversed.
	self assert: sc2 reversed asArray = sc1 asArray.
	sc2 add: 3/2; add: 1/2; add: 7/2.
	self assert: sc2 asArray = {7/2. 3. 2. 3/2. 1/2}.
	sc3 := #(1 2 3 3.0 4) asSortedCollection.
	self assert: sc3 reversed asArray = #(4 3.0 3 2 1).
	self assert: (sc3 reversed at: 2) isFloat
)

testShouldPrecede = (
	|aSortedCollection|
	aSortedCollection := SortedCollection new.
	self assert: (aSortedCollection should: 'za' precede: 'zb').
	self assert: (aSortedCollection isEmpty).
	self assert: (aSortedCollection should: 1 precede: 2).
	aSortedCollection sortBlock: [:a :b | a > b].
	self assert: (aSortedCollection should: 'zb' precede: 'za').
	self assert: (aSortedCollection isEmpty).
	self assert: (aSortedCollection should: 2 precede: 1).
)

testSort = (
	| s |
	s := SortedCollection withAll: #(3 2 1).
	self assert: s asArray = #(1 2 3).
	s sort: #>=.
	self assert: s asArray = #(3 2 1).
	s add: 4.
	self assert: s asArray = #(4 3 2 1).
	s := SortedCollection new
		sortBlock: #>=;
		addAll: #(1 2 3);
		yourself.
	self assert: s asArray = #(3 2 1).
	s sort.
	self assert: s asArray = #(1 2 3).
	s add: 0.
	self assert: s asArray = #(0 1 2 3)
)

testSortBlock = (
	|aSortedCollection|
	aSortedCollection := SortedCollection new.
	aSortedCollection sortBlock: [:a :b | a < b].
	aSortedCollection add: 'truite' ; add: 'brochet' ; add: 'tortue'.
	self assert: aSortedCollection first = 'brochet'.
	aSortedCollection := SortedCollection new.
	aSortedCollection sortBlock: [:a :b | a >b].
	aSortedCollection add: 'truite' ; add: 'brochet' ; add: 'tortue'.
	self assert: aSortedCollection first = 'truite'.
)

testSpeciesLooseSortBlock = (
	| numbers reverseOrder firstThree |
	numbers := #(1 2 3 4 5).
	reverseOrder := SortedCollection sortBlock: [:x :y | x > y].
	reverseOrder addAll: numbers.
	self assert: [reverseOrder asArray = #(5 4 3 2 1)].
	firstThree := reverseOrder copyFrom: 1 to: 3.
"
	self assert: [firstThree asArray = #(5 4 3)].
	firstThree add: 1.
	self assert: [firstThree asArray = #(5 4 3 1)]
"
)

)
