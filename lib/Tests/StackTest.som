StackTest = ClassTestCase (

testEmptyError = (
	| aStack |
	aStack := Stack new.
	self should: [ aStack top ] raise: Error.
	self should: [ aStack pop] raise: Error.
	aStack push: 'element'.
	self assert: 'element' equals: aStack top.
	self assert: 'element' equals:  aStack pop.
	self should: [ aStack top ] raise: Error.
	self should: [ aStack pop] raise: Error.
)

testPop = (
	| aStack res elem |
	elem := 'anElement'.
	aStack := Stack new.
	self assert: aStack isEmpty.
	aStack push: 'a'.
	aStack push: elem.
	res := aStack pop.
	self assert: res = elem.
	self assert: res == elem.
	self assert: aStack size = 1.
	aStack pop.
	self assert: aStack isEmpty.
)

testPush = (
	| aStack |
	aStack := Stack new.
	aStack push: 'a'.
	self assert: aStack size = 1.
	aStack push: 'b'.
	self assert: aStack size = 2.
)

testSize = (
	| aStack |
	aStack := Stack new.
	self assert: aStack size = 0.
	aStack push: 'a'.
	self assert: aStack size = 1.
	aStack push: 'b'.
	self assert: aStack size = 2.
	aStack pop.
	self assert: aStack size = 1.
	aStack pop.
	self assert: aStack size = 0.
)

testTop = (
	| aStack |
	aStack := Stack new.
	self assert: aStack isEmpty.
	aStack push: 'a'.
	aStack push: 'b'.
	self assert: aStack top = 'b'.
	self assert: aStack top = 'b'.
	self assert: aStack size = 2.
)


)
