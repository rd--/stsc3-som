NumberParser = Object (

| sourceStream base neg integerPart fractionPart exponent nDigits lastNonZero requestor failBlock |

allowPlusSign = (
	"return a boolean indicating if plus sign is allowed or not"
	^self subclassResponsibility
)

allowPlusSignInExponent = (
	"return a boolean indicating if plus sign is allowed or not in exponent"
	^self allowPlusSign
)

expected: aString = (
	| errorString |
	errorString := aString , ' expected'.
	requestor isNil
		ifFalse: [requestor
				notify: errorString
				at: sourceStream position + 1
				in: sourceStream].
	failBlock ifNotNil: [^failBlock cull: errorString cull: sourceStream position + 1].
	self error: 'Reading a number failed: ' , errorString
)

exponentLetters = (
	"answer the list of possible exponents for Numbers."
	^self subclassResponsibility
)

failBlock: aBlockOrNil = (
	failBlock := aBlockOrNil
)

isExponentLetter: aCharacter = (
	^self exponentLetters includes: aCharacter
)

makeFloatFromMantissa: m exponent: k base: aRadix = (
	"Convert infinite precision arithmetic into Floating point.
	This alogrithm rely on correct IEEE rounding mode
	being implemented in Integer>>asFloat and Fraction>>asFloat"
	k = 0 ifTrue: [ ^m asFloat ].
	k > 0 ifTrue: [ ^(m * (aRadix raisedToInteger: k)) asFloat ].
	^m asFloat / (aRadix raisedToInteger: k negated) asFloat
)

nextElementaryIntegerBase: aRadix = (
	"Form an unsigned integer with incoming digits from sourceStream.
	Return this integer, or zero if no digits found.
	Stop reading if end of digits.
	Count the number of digits and the position of lastNonZero digit and store them in instVar."
	| value digit char |
	value := 0.
	nDigits := 0.
	lastNonZero := 0.
	[
		char := sourceStream next ifNil: [ ^value ].
		((digit := char digitValue) < 0 or: [digit >= aRadix]) ifTrue: [
			sourceStream skip: -1.
			^value ].
		nDigits := nDigits + 1.
		digit = 0
			ifFalse: [
				lastNonZero := nDigits.
				value := value * aRadix + digit ]
			ifTrue: [ value := value * aRadix ] ] repeat
)

nextInteger = (
	"Read an Integer from sourceStream, asnwser that Integer.
	This is a generic version dealing with an optional sign and a simple sequence of decimal digits.
	Subclass might define extended syntax."
	base := 10.
	^self nextIntegerBase: base ifFail: [^self expected: ('a digit between 0 and ' copyWith: (Character digitValue: base - 1))]
)

nextIntegerBase: aRadix = (
	"Form an integer with following digits.
	Fail if no digit found"
	| isNeg value |
	isNeg := self peekSignIsMinus.
	value := self nextUnsignedIntegerBase: aRadix.
	^isNeg
		ifTrue: [value negated]
		ifFalse: [value]
)

nextIntegerBase: aRadix ifFail: aBlock = (
	"Form an integer with optional sign and following digits from sourceStream."
	| isNeg value |
	isNeg := self peekSignIsMinus.
	value := self nextUnsignedIntegerOrNilBase: aRadix.
	value ifNil: [^aBlock value].
	^isNeg
		ifTrue: [value negated]
		ifFalse: [value]
)

nextNumber = (
	"read next number from sourceStream contents"
	^self subclassResponsibility
)

nextUnsignedInteger = (
	"Read an Integer from sourceStream, asnwser that Integer.
	This is a generic version dealing with a simple sequence of decimal digits.
	Subclass might define extended syntax."
	base := 10.
	^self nextUnsignedIntegerBase: base ifFail: [^self expected: ('a digit between 0 and ' copyWith: (Character digitValue: base - 1))]
)

nextUnsignedIntegerBase: aRadix = (
	"Form an unsigned integer with incoming digits from sourceStream.
	Fail if no digit found.
	Count the number of digits and the lastNonZero digit and store int in instVar "
	| value |
	value := self nextUnsignedIntegerOrNilBase: aRadix.
	value ifNil: [^self expected: ('a digit between 0 and ' copyWith: (Character digitValue: aRadix - 1))].
	^value
)

nextUnsignedIntegerBase: aRadix ifFail: errorBlock = (
	"Form an unsigned integer with incoming digits from sourceStream.
	Answer this integer, or execute errorBlock if no digit found.
	Count the number of digits and the position of lastNonZero digit and store them in instVar"
	| value |
	value := self nextUnsignedIntegerOrNilBase: aRadix.
	value ifNil: [^errorBlock value].
	^value
)

nextUnsignedIntegerOrNilBase: aRadix = (
	"Form an unsigned integer with incoming digits from sourceStream.
	Answer this integer, or nil if no digit found.
	Count the number of digits and the position of lastNonZero digit and store them in instVar"
	| high |
	high :=  self nextElementaryIntegerBase: aRadix.
	nDigits = 0 ifTrue: [^nil].
	^high
)

on: aStringOrStream = (
	sourceStream := aStringOrStream isString
		ifTrue: [ aStringOrStream readStream ]
		ifFalse: [ aStringOrStream ].
	base := 10.
	neg := false.
	integerPart := fractionPart := exponent := 0.
	requestor := failBlock := nil
)

peekSignIsMinus = (
	"Peek an optional sign from sourceStream.
	Answer true if it is minus sign"

	| isMinus |
	isMinus := sourceStream peekFor: $-.
	isMinus ifFalse: [self allowPlusSign ifTrue: [sourceStream peekFor: $+]].
	^isMinus
)

readExponent = (
	"read the exponent if any (stored in instVar).
	Answer true if found, answer false if none.
	If exponent letter is not followed by a digit,
	this is not considered as an error.
	Exponent are always read in base 10."

	| eneg epos |
	exponent := 0.
	(self isExponentLetter: sourceStream peek) ifFalse: [^ false].
	sourceStream next.
	eneg := sourceStream peekFor: $-.
	epos := eneg not and: [self allowPlusSignInExponent and: [sourceStream peekFor: $+]].
	exponent := self nextUnsignedIntegerOrNilBase: 10.
	exponent ifNil: ["Oops, there was no digit after the exponent letter.Ungobble the letter"
		exponent := 0.
		sourceStream
						skip: ((eneg or: [epos])
								ifTrue: [-2]
								ifFalse: [-1]).
					^ false].
	eneg ifTrue: [exponent := exponent negated].
	^true
)

requestor: anObjectOrNil = (
	requestor := anObjectOrNil
)

----------------------------

on: aStringOrStream = (
	^self new on: aStringOrStream
)

parse: aStringOrStream = (
	^(self new)
		on: aStringOrStream;
		nextNumber
)

parse: aStringOrStream onError: failBlock = (
	^(self new)
		on: aStringOrStream;
		failBlock: failBlock;
		nextNumber
)

comment = (^'
NumberParser is an abstract class for parsing and building numbers from string/stream.
It offers a framework with utility methods and exception handling.

Number syntax is not defined and should be subclassResponsibility.

Instance variables:
sourceStream <Stream> the stream of characters from which the number is read
base <Integer> the radix in which to interpret digits
neg <Boolean> true in case of minus sign
integerPart <Integer> the integer part of the number
fractionPart <Integer> the fraction part of the number if any
exponent <Integer> the exponent used in scientific notation if any
nDigits <Integer> number of digits read to form an Integer
lastNonZero <Integer> position of last non zero digit, starting at 1 from left, 0 if all digits are zero
requestor <TextEditor | nil> can be used to insert an error message in the requestor
failBlock <BlockClosure> Block to execute whenever an error occurs.
	The fail block can have 0, 1 or 2 arguments (errorString and source position)
')

)
