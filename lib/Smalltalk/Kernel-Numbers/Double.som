Double = Float (

+ aNumber = (
	<primitive: 41>
	^ aNumber adaptToFloat: self andSend: #+
)

- aNumber = (
	<primitive: 42>
	^ aNumber adaptToFloat: self andSend: #-
)

< aNumber = (
	<primitive: 43>
	^ aNumber adaptToFloat: self andCompare: #<
)

> aNumber = (
	<primitive: 44>
	^ aNumber adaptToFloat: self andCompare: #>
)

<= aNumber = (
	<primitive: 45>
	^ aNumber adaptToFloat: self andCompare: #<=
)

>= aNumber = (
	<primitive: 46>
	^ aNumber adaptToFloat: self andCompare: #>=
)

= aNumber = (
	<primitive: 47>
	aNumber isNumber ifFalse: [^ false].
	^ aNumber adaptToFloat: self andCompare: #=
)

~= aNumber = (
	<primitive: 48>
	^ aNumber adaptToFloat: self andCompare: #~=
)

* aNumber = (
	<primitive: 49>
	^ aNumber adaptToFloat: self andSend: #*
)

/ aNumber = (
	<primitive: 50>
	^ aNumber adaptToFloat: self andSend: #/
)

adaptToInteger: rcvr andSend: selector = (
	^ rcvr asFloat perform: selector with: self
)

adaptToInteger: rcvr andCompare: selector = (
	^ rcvr asFloat perform: selector with: self
)

arcTan = (
	<primitive: 57>
	self primitiveFailed
)

asIEEE32BitWord = (
	<primitive: -1>
	self primitiveFailed
)

asIEEE64BitWord = (
	<primitive: -1>
	self primitiveFailed
)

asString = (
	<primitive: -1>
	self primitiveFailed
)

atRandom = (
	<primitive: -1>
        self primitiveFailed: #atRandom
)

deepCopy = (
	"Answer the receiver, because SmallFloat64s are unique."
	^self
)

exp = (
	<primitive: 59>
	self primitiveFailed
)

exponent = (
	"Primitive. Consider the receiver to be represented as a power of two
	multiplied by a mantissa (between one and two). Answer with the
	SmallInteger to whose power two is raised. Optional. See Object
	documentation whatIsAPrimitive."
	<primitive: 53>
	^self primitiveFailed: #exponent
)

fractionPart = (
	<primitive: 52>
	^self - self truncated asFloat
)

identityHash = (
	<primitive: 75>
	^self primitiveFailed
)

log2 = (
	<primitive: -1>
	super log2
)

ln = (
	<primitive: 58>
	self primitiveFailed
)

printOn: aStream = (
	^self asString putOn: aStream
)

shallowCopy= (
)

sin = (
	<primitive: 56>
	self primitiveFailed: #sin
)

sqrt = (
	<primitive: 55>
	self primitiveFailed: #sqrt
)

truncated = (
	<primitive: 51>
	self primitiveFailed: #truncated
)

----

basicNew = (
	self error: 'SmallFloat64s can only be created by performing arithmetic'
)

basicNew: anInteger = (
	^self basicNew
)

fromIEEE32Bit: anInteger = (
	<primitive: -1>
	^ self primitiveFailed
)

fromIEEE64Bit: anInteger = (
	<primitive: -1>
	^ self primitiveFailed
)

fromString: aString = (
	<primitive: -1>
        self primitiveFailed: #fromString:
)

)
