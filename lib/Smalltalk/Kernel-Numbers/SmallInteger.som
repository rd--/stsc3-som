SmallInteger = Integer (

+ aNumber = (
	<primitive: 1>
	^ aNumber adaptToInteger: self andSend: #+
)

- aNumber = (
	<primitive: 2>
	^ aNumber adaptToInteger: self andSend: #-
)

< aNumber = (
	<primitive: 3>
	^ aNumber adaptToInteger: self andCompare: #<
)

> aNumber = (
	<primitive: 4>
	^ aNumber adaptToInteger: self andCompare: #>
)

<= aNumber = (
	<primitive: 5>
	^ aNumber adaptToInteger: self andCompare: #<=
)

>= aNumber = (
	<primitive: 6>
	^ aNumber adaptToInteger: self andCompare: #>=
)

= aNumber = (
	<primitive: 7>
	^super = aNumber
)

~= aNumber = (
	<primitive: 8>
	^ aNumber adaptToInteger: self andCompare: #~=
)

* aNumber = (
	<primitive: 9>
	^ aNumber adaptToInteger: self andSend: #*
)

/ aNumber = (
	<primitive: 10>
	aNumber isZero ifTrue: [self error: 'SmallInteger>>/ divide by zero'].
	(aNumber isMemberOf: SmallInteger)
		ifTrue: [^ (Fraction numerator: self denominator: aNumber) reduced].
	^ aNumber adaptToInteger: self andSend: #/
)

\\ aNumber = (
	<primitive: 11>
	^ super \\ aNumber
)

// aNumber = (
	<primitive: 12>
	^ super // aNumber
)

asFloat = (
	<primitive: 40>
	self primitiveFailed: #asFloat
)

atRandom = (
	<primitive: -1>
        self primitiveFailed: #atRandom
)

adaptToFloat: rcvr andSend: selector = (
	^ rcvr perform: selector with: self asFloat
)

adaptToFloat: rcvr andCompare: selector = (
	^ rcvr perform: selector with: self asFloat
)

bitAnd: arg = (
	<primitive: 14>
	self >= 0 ifTrue: [^arg bitAnd: self].
	^arg < 0
		ifTrue: [(arg bitInvert bitOr: self bitInvert) bitInvert]
		ifFalse: [arg bitClear: self bitInvert]
)

bitOr: arg  = (
	<primitive: 15>
	self >= 0 ifTrue: [^ arg bitOr: self].
	^ arg < 0
		ifTrue: [(self bitInvert bitAnd: arg bitInvert) bitInvert]
		ifFalse: [(self bitInvert bitClear: arg) bitInvert]
)

bitShift: arg = (
	<primitive: 17>
	self = 0 ifTrue: [^self].
	self > 0 ifTrue: [^ super bitShift: arg].
	^ arg >= 0
		ifTrue: [(self negated bitShift: arg) negated]
		ifFalse: [(self bitInvert bitShift: arg) bitInvert]
)

bitXor: arg  = (
	<primitive: 16>
	self >= 0 ifTrue: [^ arg bitXor: self].
	^ arg < 0
		ifTrue: [self bitInvert bitXor: arg bitInvert]
		ifFalse: [(self bitInvert bitXor: arg) bitInvert]
)

decimalDigitLength = (
	"Answer the number of digits printed out in base 10.
	 Note that this only works for positive SmallIntegers up to 63-bits."
	self <= 99999999 "8" ifTrue: [
		self <= 9999 "4" ifTrue: [
			self <= 99 "2" ifTrue: [
				self <= 9 "1" ifTrue: [ ^1].
				^2 ].
			self <= 999 "3" ifTrue: [ ^3].
			^4 ].
		self <= 999999 "6" ifTrue: [
			self <= 99999 "5" ifTrue: [ ^5 ].
			^6 ].
		self <= 9999999 "7" ifTrue: [ ^7 ].
		^8 ].
	self <= 1073741823 "10" ifTrue: [ "This is here only to avoid LargeInteger comparisons in 32-bit VMs"
		self <= 999999999 "9" ifTrue: [ ^9 ].
		^10 ].
	self <= 999999999999999 "15" ifTrue: [
		self <= 9999999999999 "13" ifTrue: [
			self <= 99999999999 "11" ifTrue: [
				self <= 9999999999 "10" ifTrue: [ ^10 ].
				^11 ].
			self <= 999999999999 "12" ifTrue: [ ^12 ].
			^13 ].
		self <= 99999999999999 "14" ifTrue: [ ^14 ].
		^15 ].
	self <= 99999999999999999 "17" ifTrue: [
		self <= 9999999999999999 "16" ifTrue: [ ^16 ].
		^17 ].
	self <= 999999999999999999 "18" ifTrue: [ ^18 ].
	^19 "(1 << 60 - 1) asString size"
)

deepCopy = (
	"Answer the receiver, because SmallIntegers are unique."
	^self
)

digitAt: n = (
	"Answer the value of an apparent byte-indexable field in the receiver,
	 analogous to the large integers, which are organized as bytes."
	n = 1 ifTrue: "Negate carefully in case the receiver is SmallInteger minVal"
		[self < 0 ifTrue:
			[^-256 - self bitAnd: 255].
		 ^self bitAnd: 255].
	self < 0 ifTrue:
		[^(-256 - self bitShift: -8) + 1 digitAt: n - 1].
	^(self bitShift: 8 - (n bitShift: 3)) bitAnd: 255
)

even = (
	^(self bitAnd: 1) = 0
)

gcd: anInteger  = (
	| n m |
	anInteger denominator = 1 ifFalse: [^anInteger gcd: self].
	n := self.
	m := anInteger.
	[n = 0]
		whileFalse:
			[n := m \\ (m := n)].
	^ m abs
)

hash = (
	^self
)

hashMultiply = (
	"This is a multiplication by 1664525 mod 2^28 written to avoid overflowing into large integers.
	 The primitive is able to perform the operation with modulo arihmetic."
	<primitive: 159>
	| low |
	low := self bitAnd: 16383.
	^(9741 * low + ((9741 * (self bitShift: -14) + (101 * low) bitAnd: 16383) * 16384))
			bitAnd: 268435455
)

highBit = (
	self < 0 ifTrue: [^ self error: 'highBit is not defined for negative integers'].
	^ self highBitOfPositiveReceiver
)

highBitOfByte = (
	^ #(0 1 2 2 3 3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8) at: self + 1
)

highBitOfMagnitude = (
	"Answer the index of the high order bit of the receiver, or zero if the
	receiver is zero. This method is used for negative SmallIntegers as well,
	since Squeak's LargeIntegers are sign/magnitude."
	self < 0 ifTrue: [
		"Beware: do not use highBitOfPositiveReceiver
		because self negated is not necessarily a SmallInteger
		(see SmallInteger minVal)"
		^self negated highBitOfMagnitude].
	"Implementation note: this method could be as well inlined here."
	^self highBitOfPositiveReceiver
)

highBitOfPositiveReceiver = (
	| shifted bitNo |
	shifted := self.
	bitNo := 0.
	[shifted < 65536]
		whileFalse:
			[shifted := shifted bitShift: -16.
			bitNo := bitNo + 16].
	shifted < 256
		ifFalse:
			[shifted := shifted bitShift: -8.
			bitNo := bitNo + 8].
	^bitNo + shifted highBitOfByte
)

identityHash = (
	^self
)

isLarge = (
	^false
)

lowBit = (
	" Answer the index of the low order one bit.
		2r00101000 lowBit       (Answers: 4)
		2r-00101000 lowBit      (Answers: 4)
	  First we skip bits in groups of 8, then do a lookup in a table.
	  While not optimal, this is a good tradeoff; long
	  integer #lowBit always invokes us with bytes."
	| n result lastByte |
	n := self.
	n = 0 ifTrue: [ ^ 0 ].
	result := 0.
	[(lastByte := n bitAnd: 255) = 0]
		whileTrue: [
			result := result + 8.
			n := n bitShift: -8 ].
	^result + (Integer lowBitPerByteTable at: lastByte)
)

numberOfDigitsInBase: b = (
	"Return how many digits are necessary to print this number in base b.
	Mostly same as super but an optimized version for base 10 case"
	b = 10 ifFalse: [^super numberOfDigitsInBase: b].
	self < 0 ifTrue: [^self negated numberOfDigitsInBase: b]. "We can't use #decimalDigitLength here, because the receiver might be SmallInteger minVal."
	^self decimalDigitLength
)

odd = (
	^(self bitAnd: 1) = 1
)

printOn: aStream = (
	^self printOn: aStream base: 10
)

printOn: stream base: base = (
	"Append a representation of this number in base b on aStream."
	self printOn: stream base: base length: 0 padded: false
)

printOn: stream base: base length: minimumLength padded: padWithZeroes = (
	| n numberOfDigits totalLength divisor |
	self < 0
		ifTrue: [
			n := self negated.
			totalLength := 1 ]
		ifFalse: [
			n := self.
			totalLength := 0 ].
	numberOfDigits := n numberOfDigitsInBase: base.
	totalLength := totalLength + numberOfDigits.
	padWithZeroes ifFalse: [
		[ totalLength < minimumLength ] whileTrue: [
			stream space.
			totalLength := totalLength + 1 ] ].
	self < 0 ifTrue: [ stream nextPut: $- ].
	padWithZeroes ifTrue: [
		[ totalLength < minimumLength ] whileTrue: [
			stream nextPut: $0.
			totalLength := totalLength + 1 ] ].
	numberOfDigits > 1 ifTrue: [
		divisor := base = 10
			ifTrue: [ #(1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000 10000000000 100000000000 1000000000000 10000000000000 100000000000000 1000000000000000 10000000000000000 100000000000000000 1000000000000000000) at: numberOfDigits ]
			ifFalse: [ base raisedToInteger: numberOfDigits - 1 ].
		[ divisor > 1 ] whileTrue: [
			| digit |
			digit := n // divisor.
			stream nextPut: ('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' at: digit + 1).
			n := n - (digit * divisor).
			divisor := divisor // base ] ].
	^stream nextPut: ('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' at: n + 1)
)

printStringBase: b = (
	"Return a String representation of this number in base b.
	For SmallIntegers, it is more efficient to print directly in a String,
	rather than using a Stream like super."
	self < 0
		ifTrue: [^ '-'
				, (self negated printStringBase: b)].
	self < b
		ifTrue: [^ String
				with: (Character digitValue: self)].
	^ self printStringBase: b nDigits: (self numberOfDigitsInBase: b)
)

printStringBase: b nDigits: n = (
	"Return a string representation of this number in base b with n digits (left padded with 0).
	Should be invoked with: 0 <= self < (b raisedToInteger: n)."
	| integer next result |
	result := String new: n.
	integer := self.
	n to: 1 by: -1 do: [:i |
		next := integer // b.
		result at: i put: (Character digitValue: (integer - (next * b))).
		integer := next].
	^result
)

quo: aNumber = (
	"Primitive. Divide the receiver by the argument and answer with the
	result. Round the result down towards zero to make it a whole integer.
	Fail if the argument is 0 or is not a SmallInteger. Optional. See Object
	documentation whatIsAPrimitive."
	<primitive: 13>
	aNumber = 0 ifTrue: [self error: 'SmallInteger>>quo: divide by zero'].
	(aNumber isMemberOf: SmallInteger)
		ifFalse: [^ super quo: aNumber].
	(aNumber = -1 and: [self = self class minVal])
		ifTrue: [self error: 'result is aLargeInteger'].
	self primitiveFailed
)

shallowCopy = (
)

sqrt = (
	| floatResult integerResult |
	self negative ifTrue: [ ^ DomainError signal: 'sqrt undefined for number less than zero.' ].
	floatResult := self asFloat sqrt.
	integerResult := floatResult truncated.
	integerResult * integerResult = self ifTrue: [^integerResult].
	^floatResult
)

sqrtFloor = (
	"See super. Use asFloat sqrt which is known to be exactly rounded.
	Adjust the result in case self asFloat is inexact.
	An example why it is necessary with 60 bits SmallInteger is:
		| i |
		i := (1<<28-1) squared - 1.
		i asFloat sqrt truncated squared <= i.
	What happens is that i and and next perfect square above i, s^2
	are rounded to the same Float f >= s^2.
	In other words, asFloat did cross the next perfect square boundary.
	The guess is at most off by 1, because the next next perfect square is:
		(s + 1) squared = (2*s + s squared + 1)
	s squared has at most 60 bits, and 2*s has 31 bits in this case,
	s squared highBit - (2*s) highBit < Float precision,
	so we are sure that next next perfect square is a different Float."
	| guess |
	guess := self asFloat sqrt truncated.
	guess * guess > self ifTrue: [^guess - 1].
	^guess
)

sqrtRem = (
	| s |
	s := self sqrtFloor.
	^{s. self - (s*s)}
)

threadDelayMicroseconds = (
	<primitive: -1>
	self primitiveFailed
)

threeDigitName = (
	| units answer |
	self = 0 ifTrue: [^''].
	units := #('one' 'two' 'three' 'four' 'five' 'six' 'seven' 'eight' 'nine' 'ten'
		'eleven' 'twelve' 'thirteen' 'fourteen' 'fifteen' 'sixteen' 'seventeen'
		'eighteen' 'nineteen').
	self > 99 ifTrue: [
		answer := (units at: self // 100),' hundred'.
		(self \\ 100) = 0 ifFalse: [
			answer := answer,' ',(self \\ 100) threeDigitName
		].
		^answer
	].
	self < 20 ifTrue: [
		^units at: self
	].
	answer := #('twenty' 'thirty' 'forty' 'fifty' 'sixty' 'seventy' 'eighty' 'ninety')
			at: self // 10 - 1.
	(self \\ 10) = 0 ifFalse: [
		answer := answer,'-',(units at: self \\ 10)
	].
	^answer
)

----

basicNew = (
	self error: 'SmallIntegers can only be created by performing arithmetic'
)

basicNew: sizeRequested = (
	self error: 'SmallIntegers can only be created by performing arithmetic'
)

fromString: aString = (
	<primitive: -1>
        self primitiveFailed: #fromString:
)

maxVal = (
	"maxBound :: Int"
	^ 9223372036854775807
)

minVal = (
	"minBound :: Int"
	^ -9223372036854775808
)

new = (
	self basicNew	"generates an error"
)

)
