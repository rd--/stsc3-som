SparseLargeArray = SparseLargeTable (

| arrayClass |

analyzeSpaceSaving = (
	| elems tablesTotal nonNilTables lastPage lastChunkSize |
	elems := 0.
	tablesTotal := self basicSize.
	nonNilTables := 0.
	lastPage := self basicAt: self basicSize.
	(lastChunkSize := size \\ chunkSize) = 0 ifTrue:
		[lastChunkSize := chunkSize].
	1 to: self basicSize do:
		[:i | | page |
		(page := self basicAt: i) ifNotNil:
			[nonNilTables := nonNilTables + 1.
			 1 to: (page == lastPage ifTrue: [lastChunkSize] ifFalse: [chunkSize]) do:
				[:j|
				(page at: j) ~= defaultValue ifTrue:
					[elems := elems + 1]]]].
	^String streamContents:
		[:strm |
		strm nextPutAll: 'total: '; print: size.
		strm nextPutAll: ' elements: '; print: elems.
		strm nextPutAll: ' tables: '; print: tablesTotal.
		strm nextPutAll: ' non-nil: '; print: nonNilTables]
)

atAllPut: anObject = (
	"Put anObject at every one of the receiver's indices."
	1 to: self basicSize do:
		[:i|
		self basicAt: i put: nil].
	defaultValue := anObject
)

initChunkSize: aChunkSize size: aSize arrayClass: aClass base: b defaultValue: d = (
	chunkSize := aChunkSize.
	size := aSize.
	base := b.
	defaultValue := d.
	arrayClass := aClass
)

noCheckAt: index = (
	^(self basicAt: index - base // chunkSize + 1)
		ifNil: [defaultValue]
		ifNotNil: [:chunk| chunk at: index - base \\ chunkSize + 1]
)

noCheckAt: index put: value = (
	| chunkIndex chunk lastChunkSize |
	chunkIndex := index - base // chunkSize + 1.
	(chunk := self basicAt: chunkIndex) ifNil:
		[value = defaultValue ifTrue:
			[^value].
		chunk := arrayClass
					new: ((chunkIndex == self basicSize
						   and: [(lastChunkSize := size \\ chunkSize) > 0])
							ifTrue: [lastChunkSize]
							ifFalse: [chunkSize])
					withAll: defaultValue.
		self basicAt: chunkIndex put: chunk].
	^chunk at: index - base \\ chunkSize + 1 put: value
)

)
