SparseLargeTable = ArrayedCollection (

| base size chunkSize defaultValue |

allDefaultValueSubtableAt: index = (
	| t |
	t := self basicAt: index.
	t ifNil: [^ true].
	t do: [:e |
		e ~= defaultValue ifTrue: [^ false].
	].
	^ true.
)

analyzeSpaceSaving = (
	| total elems tablesTotal nonNilTables |
	total := size - base + 1.
	elems := 0.
	base to: size do: [:i | (self at: i) ~= defaultValue ifTrue: [elems := elems + 1]].
	tablesTotal := self basicSize.
	nonNilTables := 0.
	1 to: self basicSize do: [:i | (self basicAt: i) ifNotNil: [nonNilTables := nonNilTables + 1]].
	^ String streamContents: [:strm |
		strm nextPutAll: 'total: '.
		strm nextPutAll: total printString.
		strm nextPutAll: ' elements: '.
		strm nextPutAll: elems printString.
		strm nextPutAll: ' tables: '.
		strm nextPutAll: tablesTotal printString.
		strm nextPutAll: ' non-nil: '.
		strm nextPutAll: nonNilTables printString.
	].
)

arrayClass = (
	^(self basicAt: 1) class
)

at: index = (
	self pvtCheckIndex: index.
	^self noCheckAt: index.
)

at: index put: value = (
	self pvtCheckIndex: index.
	^self noCheckAt: index put: value
)

base = (
	^ base.
)

chunkSize = (
	^chunkSize
)

copyEmpty = (
	"Answer a copy of the receiver that contains no elements."
	^self speciesNew: 0
)

findLastNonNilSubTable = (
	(self basicAt: self basicSize) ifNotNil: [^ self basicSize].
	self basicSize - 1 to: 1 by: -1 do: [:lastIndex |
		(self basicAt: lastIndex) ifNotNil: [^ lastIndex].
	].
	^ 0.
)

initChunkSize: aChunkSize size: aSize arrayClass: aClass base: b defaultValue: d = (
	| lastChunkSize |
	chunkSize := aChunkSize.
	size := aSize.
	base := b.
	defaultValue := d.
	1 to: (self basicSize - 1) do: [ :in | self basicAt: in put: (aClass new: chunkSize withAll: defaultValue) ].
	lastChunkSize := size \\ chunkSize.
	lastChunkSize = 0 ifTrue: [lastChunkSize := chunkSize].
	size = 0
		ifTrue: [self basicAt: 1 put: (aClass new: 0)]
		ifFalse: [self basicAt: self basicSize put: (aClass new: lastChunkSize withAll: defaultValue)].
)

noCheckAt: index = (
	| chunkIndex t |
	chunkIndex := index - base // chunkSize + 1.
	(chunkIndex > self basicSize or: [chunkIndex < 1]) ifTrue: [^ defaultValue].
	t := self basicAt: chunkIndex.
	t ifNil: [^ defaultValue].
	^ t at: (index - base + 1 - (chunkIndex - 1 * chunkSize))
)

noCheckAt: index put: value = (
	| chunkIndex t |
	chunkIndex := index - base // chunkSize + 1.
	chunkIndex > self basicSize ifTrue: [^ value].
	t :=  self basicAt: chunkIndex.
	t ifNil: [^ value].
	^ t at: (index - base + 1 - (chunkIndex - 1 * chunkSize)) put: value
)

postCopy = (
	super postCopy.
	1 to: self basicSize do: [:i | self basicAt: i put: (self basicAt: i) copy]
)

printElementsOn: aStream = (
	| element |
	aStream nextPut: $(.
	base to: size do: [:index | element := self at: index. aStream print: element; space].
	self isEmpty ifFalse: [aStream skip: -1].
	aStream nextPut: $)
)

printOn: aStream = (
	(#(String) includes: self arrayClass name)
		ifTrue: [^self storeOn: aStream].
	^super printOn: aStream
)

privateSize: s = (
	size := s.
)

pvtCheckIndex: index = (
	index isInteger ifFalse: [self errorNonIntegerIndex].
	index < 1 ifTrue: [self errorSubscriptBounds: index].
	index > size ifTrue: [self errorSubscriptBounds: index].
)

similarInstance = (
	^self class
		new: self size
		chunkSize: self chunkSize
		arrayClass: self arrayClass
)

similarInstance: newSize = (
	^self class
		new: newSize
		chunkSize: self chunkSize
		arrayClass: self arrayClass
)

similarSpeciesInstance = (
	^self similarInstance
)

similarSpeciesInstance: newSize = (
	^self similarInstance: newSize
)

size = (
	^size
)

sparseElementsAndIndicesDo: binaryBlock = (
	"Evaluate binaryBlock for each element and index in the receiver that has a non-default value."
	1 to: self basicSize do: [:chunkIndex |
		(self basicAt: chunkIndex) ifNotNil: [:chunk |
			chunk withIndexDo: [:element :innerIndex |
				element ~= defaultValue ifTrue: [
					binaryBlock value: element value: innerIndex + base - 1 + (chunkIndex - 1 * chunkSize)]]]].
)

speciesNew = (
	^self species
		new: self size
		chunkSize: self chunkSize
		arrayClass: self arrayClass
)

speciesNew: newSize = (
	^self species
		new: newSize
		chunkSize: self chunkSize
		arrayClass: self arrayClass
)

storeOn: aStream = (
	| x |
	(#(String) includes: self arrayClass name) ifTrue:
		[aStream nextPut: $'.
		1 to: self size do:
			[:i |
			aStream nextPut: (x := self at: i).
			x == $' ifTrue: [aStream nextPut: x]].
		aStream nextPutAll: ''' asLargeArrayChunkSize: '.
		aStream nextPutAll: self chunkSize asString.
		^self].
	^super storeOn: aStream
)

withIndexDo: binaryBlock = (
	self base to: self size do: [:index |
		binaryBlock
			value: (self at: index)
			value: index].
)

zapDefaultOnlyEntries = (
	| lastIndex newInst |
	1 to: self basicSize do: [:i |
		(self allDefaultValueSubtableAt: i) ifTrue: [self basicAt: i put: nil].
	].
	lastIndex := self findLastNonNilSubTable.
	lastIndex = 0 ifTrue: [^ self].
	newInst := self class new: lastIndex*chunkSize chunkSize: chunkSize arrayClass: (self basicAt: lastIndex) class base: base defaultValue: defaultValue.
	newInst privateSize: self size.
	base to: newInst size do: [:i | newInst at: i put: (self at: i)].
	1 to: newInst basicSize do: [:i |
		(newInst allDefaultValueSubtableAt: i) ifTrue: [newInst basicAt: i put: nil].
	].
	" this is not allowed in production: self becomeForward: newInst. "
	^ newInst.
)

----------------------------

defaultChunkSize = (
	^100
)

defaultChunkSizeForFiles = (
	^8000
)

new: size = (
	^self new: size chunkSize: self defaultChunkSize
)

new: size chunkSize: chunkSize = (
	^self new: size chunkSize: chunkSize arrayClass: Array
)

new: size chunkSize: chunkSize arrayClass: aClass = (
	^self new: size chunkSize: chunkSize arrayClass: Array base: 1.
)

new: size chunkSize: chunkSize arrayClass: aClass base: b = (
	^self new: size chunkSize: chunkSize arrayClass: Array base: 1 defaultValue: nil.
)

new: size chunkSize: chunkSize arrayClass: aClass base: b defaultValue: d = (
	| basicSize |
	(basicSize := ((size - 1) // chunkSize) + 1) = 0
		ifTrue: [basicSize := 1].
	^(self basicNew: basicSize)
		initChunkSize: chunkSize size: size arrayClass: aClass base: b defaultValue: d;
		yourself
)

comment = (^'
Derivated from Stephan Pair''s LargeArray, but to hold a sparse table, in which most of the entries are the same default value, it uses some tricks.
')

)
