Week = Timespan (

asWeek = (
	^ self
)

index = (
	^ self asMonth dayOfWeek + self dayOfMonth - 2  // 7 + 1
)

printOn: aStream = (
	aStream nextPutAll: 'a Week starting: '.
	self start printOn: aStream
)

----------------------------

| StartDay |

dayNames = (
	^ Time dayNames
)

indexOfDay: aSymbol = (
	^ Time dayNames indexOf: aSymbol
)

nameOfDay: anIndex = (
	^ Time dayNames at: anIndex
)

startDay = (
	^ StartDay ifNil: [ StartDay := Time dayNames first ]
)

startDay: aSymbol = (
	(Time dayNames includes: aSymbol)
		ifTrue: [ StartDay := aSymbol ]
		ifFalse: [ self error: aSymbol, ' is not a recognised day name' ]
)

starting: aDateAndTime duration: aDuration = (
	"Override - the duration is always one week.
	 Week will start from the Week class>>startDay"
	| midnight delta adjusted |
	midnight := aDateAndTime asDateAndTime midnight.
	delta := ((midnight dayOfWeek + 7 - (Time dayNames indexOf: self startDay)) rem: 7) abs.
	adjusted := midnight - (Duration days: delta seconds: 0).
	^ super starting: adjusted duration: (Duration weeks: 1)
)

weekdayStartIndex = (
	^self indexOfDay: self startDay
)

comment = (^'
I represent a week.

To find out what days of the week on which Squeak is fun, select the following expression, and print it:

Week dayNames
')

)
