PositionableStream = Stream (

| collection position readLimit |

atEnd = (
	"Primitive. Answer whether the receiver can access any more objects.
	Optional. See Object documentation whatIsAPrimitive."
	<primitive: 67>
	^position >= readLimit
)

back = (
	"Go back one element and return it."
	self position = 0 ifTrue: [self errorCantGoBack].
	self skip: -1.
	^ self peek
)

backUpTo: subCollection = (
	"Back up the position to he subCollection.  Position must be somewhere within the stream initially.  Leave it just after it.  Return true if succeeded.  No wildcards, and case does matter."
"Example:
	| strm | strm := ReadStream on: 'zabc abdc'.
	strm setToEnd; backUpTo: 'abc'; position
"
	| pattern startMatch |
	pattern := ReadStream on: subCollection reversed.
	startMatch := nil.
	[pattern atEnd] whileFalse:
		[self position = 0 ifTrue: [^ false].
		self skip: -1.
		(self next) = (pattern next)
			ifTrue: [pattern position = 1 ifTrue: [startMatch := self position]]
			ifFalse: [pattern position: 0.
					startMatch ifNotNil: [
						self position: startMatch-1.
						startMatch := nil]].
		self skip: -1].
	self position: startMatch.
	^ true
)

basicBack = (
	^self back
)

basicUpTo: anObject = (
	"Answer a subcollection from the current access position to the
	occurrence (if any, but not inclusive) of anObject in the receiver. If
	anObject is not in the collection, answer the entire rest of the receiver."
	| newStream element |
	newStream := WriteStream on: (self collectionSpecies new: 100).
	[self atEnd or: [(element := self next) = anObject]]
		whileFalse: [newStream nextPut: element].
	^newStream contents
)

collectionSpecies = (
	"Answer the species of collection into which the receiver can stream"
	^collection species
)

contents = (
	"Answer with a copy of my collection from 1 to readLimit."
	^collection copyFrom: 1 to: readLimit
)

errorCantGoBack = (
	self error: ' CantGoBack '
)

isEmpty = (
	"Answer whether the receiver's contents has no elements."
	"Returns true if both the set of past and future sequence values of
the receiver are empty. Otherwise returns false"
	^ self atEnd and: [position = 0]
)

last = (
	"Return the element that was read last"
	^ collection at: position
)

match: subCollection = (
	"Set the access position of the receiver to be past the next occurrence of the subCollection. Answer whether subCollection is found.  No wildcards, and case does matter."
	| pattern startMatch |
	pattern := ReadStream on: subCollection.
	startMatch := nil.
	[pattern atEnd] whileFalse:
		[self atEnd ifTrue: [^ false].
		(self next) = (pattern next)
			ifTrue: [pattern position = 1 ifTrue: [startMatch := self position]]
			ifFalse: [pattern position: 0.
					startMatch ifNotNil: [
						self position: startMatch.
						startMatch := nil]]].
	^ true
)

next: anInteger = (
	"Answer the next anInteger elements of my collection. Must override
	because default uses self contents species, which might involve a large
	collection."
	| newArray |
	newArray := self collectionSpecies new: anInteger.
	1 to: anInteger do: [:index | newArray at: index put: self next].
	^newArray
)

next: anInteger putAll: aCollection = (
	"Store the next anInteger elements from the given collection."
	^self next: anInteger putAll: aCollection startingAt: 1
)

next: anInteger putAll: aCollection startingAt: startIndex = (
	"Store the next anInteger elements from the given collection."
	startIndex to: startIndex + anInteger - 1 do: [ :index |
		self nextPut: (aCollection at: index) ].
	^aCollection
)

nextDelimited: terminator = (
	"Answer the contents of the receiver, up to the next terminator character. Doubled terminators indicate an embedded terminator character.  For example: 'this '' was a quote'. Start postioned before the initial terminator."
	| out ch |
	out := WriteStream on: (String new: 1000).
	self atEnd ifTrue: [^ ''].
	self next == terminator ifFalse: [self skip: -1].	"absorb initial terminator"
	[(ch := self next) == nil] whileFalse: [
		(ch == terminator) ifTrue: [
			self peek == terminator ifTrue: [
				self next.  "skip doubled terminator"
			] ifFalse: [
				^ out contents  "terminator is not doubled; we're done!"
			].
		].
		out nextPut: ch.
	].
	^ out contents
)

nextLine = (
	"Answer next line (may be empty) without line end delimiters, or nil if at end.
	Let the stream positioned after the line delimiter(s).
	Handle a zoo of line delimiters CR, LF, or CR-LF pair"
	self atEnd ifTrue: [^nil].
	^self upToAnyOf: CharacterSet crlf do: [:char | char = Character cr ifTrue: [self peekFor: Character lf]]
)

on: aCollection = (
	collection := aCollection.
	readLimit := aCollection size.
	position := 0.
	self reset
)

originalContents = (
	"Answer the receiver's actual contents collection, NOT a copy.  1/29/96 sw"
	^ collection
)

peek = (
	"Answer what would be returned if the message next were sent to the
	receiver. If the receiver is at the end, answer nil."
	| nextObject |
	self atEnd ifTrue: [^nil].
	nextObject := self next.
	position := position - 1.
	^nextObject
)

peekBack = (
	"Return the element at the previous position, without changing position.  Use indirect messages in case self is a StandardFileStream."
	| element |
	self position = 0 ifTrue: [self errorCantGoBack].
	self position = 1 ifTrue: [self position: 0.  ^ nil].
	self skip: -2.
	element := self next.
	self skip: 1.
	^ element
)

peekFor: anObject = (
	"Answer false and do not move over the next element if it is not equal to
	the argument, anObject, or if the receiver is at the end. Answer true
	and increment the position for accessing elements, if the next element is
	equal to anObject."
	self atEnd ifTrue: [^false].
	"gobble it if found"
	self next = anObject ifTrue: [ ^true ].
	position := position - 1.
	^false
)

position = (
	"Answer the current position of accessing the sequence of objects."
	^position
)

position: anInteger = (
	"Set the current position for accessing the objects to be anInteger, as long
	as anInteger is within the bounds of the receiver's contents. If it is not,
	create an error notification."
	(anInteger >= 0 and: [anInteger <= readLimit])
		ifTrue: [position := anInteger]
		ifFalse: [self positionError]
)

positionError = (
	"Since I am not necessarily writable, it is up to my subclasses to override
	position: if expanding the collection is preferrable to giving this error."
	self error: 'Attempt to set the position of a PositionableStream out of bounds'
)

positionOfSubCollection: subCollection = (
	"Return a position such that that element at the new position equals the first element of sub, and the next elements equal the rest of the elements of sub. Begin the search at the current position.
	If no such match is found, answer 0."
	^self positionOfSubCollection: subCollection ifAbsent: [0]
)

positionOfSubCollection: subCollection ifAbsent: exceptionBlock = (
	"Return a position such that that element at the new position equals the first element of sub, and the next elements equal the rest of the elements of sub. Begin the search at the current position.
	If no such match is found, answer the result of evaluating argument, exceptionBlock."
	| pattern startPosition currentPosition |
	pattern := subCollection readStream.
	startPosition := self position.
	[ pattern atEnd or: [ self atEnd ] ] whileFalse: [
		self next = pattern next ifFalse: [
			self position: self position - pattern position + 1.
			pattern reset ] ].
	currentPosition := self position.
	self position: startPosition.
	pattern atEnd ifTrue: [ ^currentPosition + 1 - subCollection size ].
	^exceptionBlock value
)

reset = (
	"Set the receiver's position to the beginning of the sequence of objects."
	position := 0
)

resetContents = (
	"Set the position and limits to 0."
	position := 0.
	readLimit := 0
)

setFrom: newStart to: newStop = (
	position := newStart - 1.
	readLimit := newStop
)

setToEnd = (
	"Set the position of the receiver to the end of the sequence of objects."
	position := readLimit
)

skip: anInteger = (
	"Set the receiver's position to be the current position+anInteger. A
	subclass might choose to be more helpful and select the minimum of the
	receiver's size and position+anInteger, or the maximum of 1 and
	position+anInteger for the repositioning."
	self position: position + anInteger
)

skipSeparators = (
	[self atEnd]
		whileFalse:
		[self next isSeparator ifFalse: [^ self position: self position-1]]
)

skipTo: anObject = (
	"Set the access position of the receiver to be past the next occurrence of
	anObject. Answer whether anObject is found."
	[self atEnd]
		whileFalse: [self next = anObject ifTrue: [^true]].
	^false
)

upTo: anObject = (
	"Answer a subcollection from the current access position to the
	occurrence (if any, but not inclusive) of anObject in the receiver. If
	anObject is not in the collection, answer the entire rest of the receiver."
	| newStream element |
	newStream := WriteStream on: (self collectionSpecies new: 100).
	[self atEnd or: [(element := self next) = anObject]]
		whileFalse: [newStream nextPut: element].
	^newStream contents
)

upToAll: aCollection = (
	"Answer a subcollection from the current access position to the occurrence (if any, but not inclusive) of aCollection. If aCollection is not in the stream, answer the entire rest of the stream."
	| startPos endMatch result |
	startPos := self position.
	(self match: aCollection)
		ifTrue: [endMatch := self position.
			self position: startPos.
			result := self upToPosition: endMatch - aCollection size.
			self position: endMatch.
			^ result]
		ifFalse: [self position: startPos.
			^ self upToEnd]
)

upToAnyOf: aCollection = (
	"Answer a subcollection from the current access position to the
	occurrence (if any, but not inclusive) of any object in the collection. If
	no matching object is found, answer the entire rest of the receiver."
	^self upToAnyOf: aCollection do: [:matchingObject | ]
)

upToAnyOf: subcollection do: aBlock = (
	"Answer a subcollection from the current access position to the occurrence (if any, but not inclusive) of any object in the collection.
	Evaluate aBlock with this occurence as argument.
	If no matching object is found, don't evaluate aBlock and answer the entire rest of the receiver."
	^self collectionSpecies new: 1000 streamContents: [ :stream |
		| ch |
		[ self atEnd or: [ (subcollection includes: (ch := self next)) and: [aBlock value: ch. true] ] ]
			whileFalse: [ stream nextPut: ch ] ]
)

upToEnd = (
	"Answer a subcollection from the current access position through the last element of the receiver."
	| newStream |
	newStream := WriteStream on: (self collectionSpecies new: 100).
	[self atEnd] whileFalse: [ newStream nextPut: self next ].
	^ newStream contents
)

upToPosition: anInteger = (
	"Answer a subcollection containing items starting from the current position and ending including the given position. Usefully different to #next: in that in the case of MultiByteFileStream, and perhaps others, positions measure in terms of encoded items, while #next: convention is to name a number of items, independent of their encoding in the underlying buffer."
	^ self next: anInteger - position
)

----------------------------

on: aCollection = (
	"Answer an instance of me, streaming over the elements of aCollection."
	^self basicNew on: aCollection
)

on: aCollection from: firstIndex to: lastIndex = (
	"Answer an instance of me, streaming over the elements of aCollection
	starting with the element at firstIndex and ending with the one at
	lastIndex."
	^self basicNew on: (aCollection copyFrom: firstIndex to: lastIndex)
)

comment = (^'
I represent an accessor for a sequence of objects (a collection) that are externally named by indices so that the point of access can be repositioned. I am abstract in that I do not implement the messages next and nextPut: which are inherited from my superclass Stream.
')

)
