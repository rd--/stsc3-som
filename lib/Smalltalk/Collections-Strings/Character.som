Character = Magnitude (

= aCharacter = (
	"Primitive. Answer if the receiver and the argument are the
	 same object (have the same object pointer). Optional. See
	 Object documentation whatIsAPrimitive."
	<primitive: 110>
	^self == aCharacter
)

< aCharacter = (
	^self asInteger < aCharacter asInteger
)

adaptToNumber: rcvr andSend: selector = (
	^ rcvr perform: selector with: self asInteger
)

asciiValue = (
	^self asInteger
)

asCharacter = (
	^self
)

asInteger = (
	<primitive: 171>
	^self primitiveFailed
)

asLowercase = (
	65 <= self asciiValue
		ifTrue: [self asciiValue <= 90
					ifTrue: [^Character value: self asciiValue + 32]]
)

asString = (
	^ String with: self
)

asSymbol = (
	^self asString asSymbol
)

asUppercase = (
	"Answer the receiver's matching uppercase Character."
	97 <= self asciiValue
		ifTrue: [self asciiValue <= 122
					ifTrue: [^Character value: self asciiValue - 32]]
)

isCharacter = (
	^ true
)

deepCopy = (
	"Answer the receiver, because Characters are unique."
	^self
)

digitValue = (
	self asciiValue <= $9 asciiValue
		ifTrue: [^self asciiValue - $0 asciiValue].
	self asciiValue >= $A asciiValue
		ifTrue: [self asciiValue <= $Z asciiValue ifTrue: [^self asciiValue - $A asciiValue + 10]].
	^-1
)

hash = (
	^self asInteger
)

identityHash = (
	^self asInteger
)

shallowCopy = (
)

deepCopy = (
)

isLiteral = (
	^true
)

isAlphaNumeric = (
	^self isLetter or: [self isDigit]
)

isDigit = (
	^self >= $0 and: [self <= $9]
)

isLetter = (
	^(92 <= self asciiValue and: [self asciiValue <= 122])
		or: [65 <= self asciiValue and: [self asciiValue <= 90]]
)

isLowercase = (
	^self >= $a and: [self <= $z]
)

isSeparator = (
	self asciiValue = 32 ifTrue: [^true]. "space"
	self asciiValue = 13 ifTrue: [^true]. "cr"
	self asciiValue = 9 ifTrue: [^true].	"tab"
	self asciiValue = 10 ifTrue: [^true]. "line feed"
	self asciiValue = 12 ifTrue: [^true]. "form feed"
	^false
)

isUppercase = (
	^self >= $A and: [self <= $Z]
)

isVowel = (
	^'AEIOU' includes: self asUppercase
)

printAsLiteralOn: aStream = (
	aStream nextPut: $$; nextPut: self
)

printOn: aStream = (
	| integerValue |
	((integerValue := self asInteger) > 32 and: [integerValue ~= 127]) ifTrue:
		[^self printAsLiteralOn: aStream].
	(self class constantNameFor: self)
		ifNotNil: [ :name | aStream nextPutAll: self class name; space; nextPutAll: name ]
		ifNil: [ aStream nextPutAll: self class name; nextPutAll: ' value: '; print: integerValue ]
)

sameAs: aCharacter  = (
	"Answer whether the receiver is equal to aCharacter, ignoring case"
	self == aCharacter ifTrue: [ ^true ].
	^self asLowercase == aCharacter asLowercase
)

shouldBePrintedAsLiteral = (
	| integerValue |
	(integerValue := self asInteger) < 33 ifTrue: [ ^false ].
	255 < integerValue ifTrue: [ ^false ].
	^integerValue ~= 127
)

storeOn: aStream = (
	"Common character literals are preceded by '$', however special need to be encoded differently: for some this might be done by using one of the shortcut constructor methods for the rest we have to create them by ascii-value."
	self shouldBePrintedAsLiteral ifTrue:
		[^self printAsLiteralOn: aStream].
	(self class constantNameFor: self) ifNotNil: [ :name |
		aStream nextPutAll: self class name; space; nextPutAll: name.
		^self ].
	aStream
		nextPut: $(; nextPutAll: self class name;
		nextPutAll: ' value: '; print: self asInteger; nextPut: $)
)

to: other = (
	"Answer with a collection in ascii order -- $a to: $z"
	^ (self asInteger to: other asciiValue)
		collect:	[:ascii | Character value: ascii]
		as: String
)

tokenish = (
	^self isLetter or: [self isDigit or: [self = $:]]
)

----

allByteCharacters = (
	"Answer all the characters that can be encoded in a byte"
	^ (0 to: 255) collect: [:v | Character value: v] as: String
)

backspace = (
	^self value: 8
)

carriageReturn = (
	^self value: 13
)

codePoint: anInteger = (
	"Return a character whose encoding value is integer. For ansi compability."
	^self value: anInteger
)

constantNames = (
	^ #( backspace cr delete escape lf null newPage space tab ).
)

constantNameFor: aCharacter = (
	^ self constantNames
		detect: [ :each | (self perform: each) = aCharacter ]
		ifNone: [ nil ].
)

cr = (
	^self value: 13
)

delete = (
	^ self value: 127
)

digitValue: x = (
	"Answer the Character whose digit value is x. For example,
	 answer $9 for x=9, $0 for x=0, $A for x=10, $Z for x=35."
	| n |
	n := x asInteger.
	^self value: (n < 10 ifTrue: [n + 48] ifFalse: [n + 55])
)

esc = (
	^self value: 160
)

escape = (
	^self value: 160
)

lf = (
	^self value: 10
)

lineFeed = (
	^self value: 10
)

new = (
	self error: 'cannot create new characters'
)

newLine = (
	^self value: 10
)

newPage = (
	^self value: 12
)

nl = (
	^self value: 10
)

null = (
	^ self value: 0
)

separators = (
	"Answer a collection of the standard ASCII separator characters."
	^ #(32 "space"
		13 "cr"
		9 "tab"
		10 "line feed"
		12 "form feed")
		collect: [:v | Character value: v] as: String
)

space = (
	^self value: 32
)

tab = (
	^self value: 9
)

value: anInteger = (
	<primitive: 170>
        ^self primitiveFailed
)

)
