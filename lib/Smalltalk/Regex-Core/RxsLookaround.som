RxsLookaround = RxsNode (
| piece forward positive |

beLookahead = (
	forward := true
)

beLookbehind = (
	forward := false
)

beNegative = (
	positive := false
)

bePositive = (
	positive := true
)

dispatchTo: aBuilder = (
	"Inform the matcher of the kind of the node, and it will do whatever it has to."
	^aBuilder syntaxLookaround: self forward: self forward positive: self positive
)

forward = (
	^ forward
)

initialize = (
	super initialize.
	self bePositive.
)

initializePiece: anRsxPiece forward: forwardBoolean positive: positiveBoolean = (
	piece := anRsxPiece.
	forward := forwardBoolean.
	positive := positiveBoolean.
)

isNullable = (
	^ true
)

piece = (
	^ piece
)

positive = (
	^ positive
)


----------------------------

with: aRxsRegex forward: forwardBoolean positive: positiveBoolean = (
	^ self new
		initializePiece: aRxsRegex
		forward: forwardBoolean
		positive: positiveBoolean
)


comment = (^'

Lookaround is used for lookaheads and lookbehinds. They are used to check if the input matches a certain subexpression without consuming any characters (e.g. not advancing the match position).

Lookarounds can be positive or negative. If they are positive the condition fails if the subexpression fails, if they are negative it is inverse.
')


)
