RxmLink = Object (
| next |

copyChain = (
	"Create a full copy of all the links in this chain, including branches, while letting them share and reuse non-link objects as much as possible."
	^self copyUsing: IdentityDictionary new
)

copyUsing: anIdentityDictionary = (
	"Copy the receiver if it's not present in the argument dictionary, or just return the previously made copy. The rest of the object graph will be copied by #postCopyUsing:."
	^anIdentityDictionary
		at: self
		ifAbsent: [
			"It may be tempting to use #at:ifAbsentPut: instead, but the argument block must not modify the receiver, so that wouldn't work."
			anIdentityDictionary
				at: self
				put: (self shallowCopy
					postCopyUsing: anIdentityDictionary;
					yourself) ]
)

matchAgainst: aMatcher = (
	"If a link does not match the contents of the matcher's stream,
	answer false. Otherwise, let the next matcher in the chain match."
	^next matchAgainst: aMatcher
)

next = (
	^next
)

next: aLink = (
	"Set the next link, either an RxmLink or an RxmTerminator."
	next := aLink
)

pointTailTo: anRxmLink = (
	"Propagate this message along the chain of links.
	Point `next' reference of the last link to <anRxmLink>.
	If the chain is already terminated, blow up."
	next == nil
		ifTrue: [next := anRxmLink]
		ifFalse: [next pointTailTo: anRxmLink]
)

postCopy = (
	super postCopy.
	next := next copy
)

postCopyUsing: anIdentityDictionary = (
	"Copy the rest of the chain the same way as it's done in #copyUsing:."
	next ifNotNil: [
		next := next copyUsing: anIdentityDictionary ]
)

printOn: stream = (
	super printOn: stream.
	stream
		nextPut: $(;
		print: self identityHash;
		nextPutAll: ', ';
		print: (next ifNotNil: [ next identityHash ]);
		nextPut: $)
)

terminateWith: aTerminator = (
	"Propagate this message along the chain of links, and
	make aTerminator the `next' link of the last link in the chain.
	If the chain is already reminated with the same terminator,
	do not blow up."
	next == nil
		ifTrue: [next := aTerminator]
		ifFalse: [next terminateWith: aTerminator]
)


)
