MappedCollection = Collection (

| domain map |

at: anIndex = (
	^domain at: (map at: anIndex)
)

at: anIndex put: anObject = (
	^domain at: (map at: anIndex) put: anObject
)

contents = (
	"Answer the receiver's domain for mapping, a SequenceableCollection."
	^map collect: [:mappedIndex | domain at: mappedIndex]
)

size = (
	^map size
)

add: newObject = (
	self shouldNotImplement
)

copy = (
	"This returns another MappedCollection whereas copyFrom:to: will return an
	object like my domain"
	^MappedCollection collection: domain map: map
)

collect: aBlock = (
	| aStream |
	aStream := WriteStream on: (self species new: self size).
	self do:
		[:domainValue |
		aStream nextPut: (aBlock value: domainValue)].
	^aStream contents
)

do: aBlock = (
	map do:
		[:mapValue | aBlock value: (domain at: mapValue)]
)

select: aBlock = (
	| aStream |
	aStream := WriteStream on: (self species new: self size).
	self do:
		[:domainValue |
		(aBlock value: domainValue)
			ifTrue: [aStream nextPut: domainValue]].
	^aStream contents
)

storeOn: aStream = (
	aStream nextPut: $(.
	domain storeOn: aStream.
	aStream nextPutAll: ' mappedBy: '.
	map storeOn: aStream.
	aStream nextPut: $)
)

setCollection: aCollection map: aDictionary = (
	domain := aCollection.
	map := aDictionary
)

species = (
	^domain species
)

----------------------------

collection: aCollection map: aSequenceableCollection = (
	"Answer a new instance of me that maps aCollection by aSequenceableCollection."
	^self basicNew setCollection: aCollection map: aSequenceableCollection
)

new = (
	self error: 'MappedCollections must be created using the collection:map: message'
)

comment = (^'
I am a re-ordering or subcollecting of a writeable SequenceableCollection.
')

)
