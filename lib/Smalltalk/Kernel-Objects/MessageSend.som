MessageSend = Object (

| receiver selector arguments |

= anObject = (
	^ anObject species == self species
		and: [receiver == anObject receiver
		and: [selector == anObject selector
		and: [arguments = anObject arguments]]]
)

arguments = (
	^ arguments
)

arguments: anArray = (
	arguments := anArray
)

asMessage = (
	^ Message selector: selector arguments: arguments.
)

asMinimalRepresentation = (
	^self
)

collectArguments: anArgArray = (
	"Private"
    | staticArgs |
    staticArgs := self arguments.
    ^(anArgArray size = staticArgs size)
        ifTrue: [anArgArray]
        ifFalse:
            [(staticArgs isEmpty
                ifTrue: [ staticArgs := Array new: selector numArgs]
                ifFalse: [staticArgs copy] )
                    replaceFrom: 1
                    to: (anArgArray size min: staticArgs size)
                    with: anArgArray
                    startingAt: 1]
)

cull: firstArg = (
	"Send the message with these optional arguments and answer the return value"
	selector numArgs >= 1 ifTrue: [ ^self value: firstArg ].
	^self value
)

cull: firstArg cull: secondArg = (
	"Send the message with these optional arguments and answer the return value"
	| numArgs |
	(numArgs := selector numArgs) >= 2 ifTrue: [ ^self value: firstArg value: secondArg ].
	numArgs = 1 ifTrue: [ ^self value: firstArg ].
	^self value
)

cull: firstArg cull: secondArg cull: thirdArg = (
	"Send the message with these optional arguments and answer the return value"
	| numArgs |
	(numArgs := selector numArgs) >= 2 ifTrue: [
		numArgs >= 3 ifTrue: [ ^self value: firstArg value: secondArg value: thirdArg ].
		^self value: firstArg value: secondArg ].
	numArgs = 1 ifTrue: [ ^self value: firstArg ].
	^self value
)

cull: firstArg cull: secondArg cull: thirdArg cull: fourthArg = (
	"Send the message with these optional arguments and answer the return value"
	| numArgs |
	(numArgs := selector numArgs) >= 3 ifTrue: [
		numArgs >= 4 ifTrue: [
			^self value: firstArg value: secondArg value: thirdArg value: fourthArg ].
		^self value: firstArg value: secondArg value: thirdArg ].
	numArgs = 2 ifTrue: [ ^self value: firstArg value: secondArg ].
	numArgs = 1 ifTrue: [ ^self value: firstArg ].
	^self value
)

cull: firstArg cull: secondArg cull: thirdArg cull: fourthArg cull: fifthArg = (
	"Send the message with these optional arguments and answer the return value"
	^ selector numArgs caseOf: {
		[5] -> [self value: firstArg value: secondArg value: thirdArg value: fourthArg value: fifthArg].
		[4] -> [self value: firstArg value: secondArg value: thirdArg value: fourthArg].
		[3] -> [self value: firstArg value: secondArg value: thirdArg].
		[2] -> [self value: firstArg value: secondArg].
		[1] -> [self value: firstArg].
		[0] -> [self value] }
)

hash = (
	^ receiver hash bitXor: selector hash
)

isMessageSend = (
	^true
)

isReceiverOrAnyArgumentGarbage = (
	^false
)

numArgs = (
	^ selector numArgs
)

printOn: aStream = (
        aStream
                nextPutAll: self class name;
                nextPut: $(.
        selector printOn: aStream.
        aStream nextPutAll: ' -> '.
        receiver printOn: aStream.
        aStream nextPut: $)
)

receiver = (
	^ receiver
)

receiver: anObject = (
	receiver := anObject
)

selector = (
	^ selector
)

selector: aSymbol = (
	selector := aSymbol
)

value = (
	"Send the message and answer the return value"
	arguments ifNil: [^ receiver perform: selector].
	^ receiver
		perform: selector
		withArguments: (self collectArguments: arguments)
)

value: firstArg = (
	"Send the message with these arguments and answer the return value"
	^receiver perform: selector with: firstArg
)

value: firstArg value: secondArg = (
	"Send the message with these arguments and answer the return value"
	^receiver perform: selector with: firstArg with: secondArg
)

value: firstArg value: secondArg value: thirdArg = (
	"Send the message with these arguments and answer the return value"
	^receiver perform: selector with: firstArg with: secondArg with: thirdArg
)

value: firstArg value: secondArg value: thirdArg value: fourthArg = (
	"Send the message with these arguments and answer the return value"
	^receiver perform: selector with: firstArg with: secondArg with: thirdArg with: fourthArg
)

value: firstArg value: secondArg value: thirdArg value: fourthArg value: fifthArg = (
	"Send the message with these arguments and answer the return value"
	^receiver perform: selector with: firstArg with: secondArg with: thirdArg with: fourthArg with: fifthArg
)

valueOtherwise: aBlock = (
	"Send the message and answer the return value"
	^self value
)

valueWithArguments: anArray = (
	^ receiver
		perform: selector
		withArguments: (self collectArguments: anArray)
)

valueWithArguments: anArray otherwise: aBlock = (
	^ self valueWithArguments: anArray
)

valueWithEnoughArguments: anArray = (
	"call the selector with enough arguments from arguments and anArray"
	| args |
	args := Array new: selector numArgs.
	args replaceFrom: 1
		to: (arguments size min: args size)
		with: arguments
		startingAt: 1.
	args size > arguments size ifTrue: [
		args replaceFrom: arguments size + 1
			to: (arguments size + anArray size min: args size)
			with: anArray
			startingAt: 1.
	].
	^ receiver perform: selector withArguments: args
)

valueWithPossibleArgs: anArray = (
	"Send selector to the receiver with arguments in anArray. Only use enough arguments for the arity of the selector; supply nils for missing ones."
	^receiver perform: selector withEnoughArguments: anArray
)

----------------------------

receiver: anObject selector: aSymbol = (
	^ self receiver: anObject selector: aSymbol arguments: #()
)

receiver: anObject selector: aSymbol argument: aParameter = (
	^self receiver: anObject selector: aSymbol arguments: { aParameter }
)

receiver: anObject selector: aSymbol arguments: anArray = (
	^ self new
		receiver: anObject;
		selector: aSymbol;
		arguments: anArray
)


comment = (^'

Instances of MessageSend encapsulate message sends to objects. Arguments can be either predefined or supplied when the message send is performed. 

Use #value to perform a message send with its predefined arguments and #valueWithArguments: if additonal arguments have to supplied.

Structure:
 receiver		Object -- object receiving the message send
 selector		Symbol -- message selector
 arguments		Array -- bound arguments
')


)
