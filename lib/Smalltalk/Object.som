Object = nil (

== other = (
	<primitive: 110>
	self primitiveFailed
)

=  other = (
	^self == other
)

~= anObject = (
	"Answer whether the receiver and the argument do not represent the same object."
	^self = anObject == false
)

~~ anObject = (
	<primitive: 169>
	self == anObject ifTrue: [^false].
	^true
)

-> anObject = (
	^Association basicNew key: self value: anObject
)

adaptToFloat: rcvr andCompare: selector = (
	^ self adaptToFloat: rcvr andSend: selector
)

adaptToFloat: rcvr andSend: selector = (
	^ self adaptToNumber: rcvr andSend: selector
)

adaptToFraction: rcvr andCompare: selector = (
	"If I am involved in comparison with a Fraction.
	Default behaviour is to process comparison as any other selectors."
	^ self adaptToFraction: rcvr andSend: selector
)

adaptToFraction: rcvr andSend: selector = (
	"If no method has been provided for adapting an object to a Fraction,
	then it may be adequate to simply adapt it to a number."
	^ self adaptToNumber: rcvr andSend: selector
)

adaptToInteger: rcvr andCompare: selector = (
	^ self adaptToInteger: rcvr andSend: selector
)

adaptToInteger: rcvr andSend: selector = (
	^ self adaptToNumber: rcvr andSend: selector
)

addDependent: anObject = (
	"Add anObject as one of the receiver's dependents."
	(self dependentsFields at: self ifAbsent: [self setDependents])
		add: anObject.
	^anObject
)

as: aSimilarClass = (
	"Create an object of class aSimilarClass that has similar contents to the receiver."
	^ aSimilarClass newFrom: self
)

assert: aBlock = (
	"Throw an assertion error if aBlock does not evaluates to true."
	aBlock value ifFalse: [AssertionFailure signal: 'Assertion failed']
)

asLink = (
	^ ValueLink value: self
)

asOrderedCollection = (
	"Answer an OrderedCollection with the receiver as its only element."
	^ OrderedCollection with: self
)

asSetElement = (
	"Answer an object, which can be put into a Set as element , wrapped
	by one of SetElement instance, if necessary.
	Default implementation is to answer self"
)

asString = (
	^ self printString
)

at: index = (
	<primitive: 60>
	index isInteger ifTrue:
		[self class isVariable
			ifTrue: [self errorSubscriptBounds: index]
			ifFalse: [self errorNotIndexable]].
	index isNumber
		ifTrue: [^self at: index asInteger]
		ifFalse: [self errorNonIntegerIndex]
)

at: index put: value = (
	<primitive: 61>
	index isInteger ifTrue:
		[self class isVariable
			ifTrue: [(index >= 1 and: [index <= self size])
					ifTrue: [self errorImproperStore]
					ifFalse: [self errorSubscriptBounds: index]]
			ifFalse: [self errorNotIndexable]].
	index isNumber
		ifTrue: [^self at: index asInteger put: value]
		ifFalse: [self errorNonIntegerIndex]
)

basicAt: index = (
	<primitive: 60>
	index isInteger ifTrue: [self errorSubscriptBounds: index].
	index isNumber
		ifTrue: [^self basicAt: index asInteger]
		ifFalse: [self errorNonIntegerIndex]
)

basicAt: index put: value = (
	<primitive: 61>
	index isInteger
		ifTrue: [(index >= 1 and: [index <= self size])
					ifTrue: [self errorImproperStore]
					ifFalse: [self errorSubscriptBounds: index]].
	index isNumber
		ifTrue: [^self basicAt: index asInteger put: value]
		ifFalse: [self errorNonIntegerIndex]
)

basicSize = (
	<primitive: 62>
	^0
)

breakDependents = (
	"Deallocate the soft field for the receiver's dependents."
	self dependentsFields removeKey: self ifAbsent: []
)

caseOf: aBlockAssociationCollection = (
	"The elements of aBlockAssociationCollection are associations between blocks.
	 Answer the evaluated value of the first association in aBlockAssociationCollection
	 whose evaluated key equals the receiver.  If no match is found, report an error."
	^ self caseOf: aBlockAssociationCollection otherwise: [self caseError]
)

caseOf: aBlockAssociationCollection otherwise: aBlock = (
	"The elements of aBlockAssociationCollection are associations between blocks.
	 Answer the evaluated value of the first association in aBlockAssociationCollection
	 whose evaluated key equals the receiver.  If no match is found, answer the result
	 of evaluating aBlock."
	aBlockAssociationCollection associationsDo:
		[:assoc | (assoc key value = self) ifTrue: [^assoc value value]].
	^ aBlock value
)

changed = (
	"Receiver changed in a general way; inform all the dependents by sending
	each dependent an update: message."
	self changed: self
)

changed: aParameter = (
	"Receiver changed.  The change is denoted by the argument aParameter.
	Usually the argument is a Symbol that is part of the dependent's change
	protocol.  Inform all of the dependents."
	self dependents do: [:aDependent | aDependent update: aParameter]
)

class = (
	<primitive: 111>
	self primitiveFailed
)

className = (
	"Answer a string characterizing the receiver's class, for use in list views for example"
	^ self class name asString
)

compareSafely: anObject = (
	^ self class = anObject class
		ifTrue: [ self printString < anObject printString ]
		ifFalse: [ self class name < anObject class name ]
)

copy = (
	"Answer another instance just like the receiver. Subclasses typically override postCopy; they typically do not override shallowCopy."
	^self shallowCopy postCopy
)

copySameFrom: otherObject = (
	"Copy to myself all instance variables named the same in otherObject.
	This ignores otherObject's control over its own inst vars."
	| myInstVars otherInstVars |
	myInstVars := self class allInstVarNames.
	otherInstVars := otherObject class allInstVarNames.
	myInstVars doWithIndex: [:each :index |
		| match |
		(match := otherInstVars indexOf: each) > 0 ifTrue:
			[self instVarAt: index put: (otherObject instVarAt: match)]].
	1 to: (self basicSize min: otherObject basicSize) do: [:i |
		self basicAt: i put: (otherObject basicAt: i)].
)

deepCopy = (
	"Answer a copy of the receiver with its own copy of each instance variable.
	WARNING: deepCopy does not preserve object identities in cycles in the object graph. Consider using #veryDeepCopy instead."
	| newObject class index |
	class := self class.
	(class == Object) ifTrue: [^self].
	class isVariable
		ifTrue:
			[index := self basicSize.
			newObject := class basicNew: index.
			[index > 0]
				whileTrue:
					[newObject basicAt: index put: (self basicAt: index) deepCopy.
					index := index - 1]]
		ifFalse: [newObject := class basicNew].
	index := class instSize.
	[index > 0]
		whileTrue:
			[newObject instVarAt: index put: (self instVarAt: index) deepCopy.
			index := index - 1].
	^newObject
)

dependents = (
	"Answer an OrderedCollection of the objects that are dependent on the
	receiver, that is, the objects that should be notified if the receiver changes."
	^ self dependentsFields at: self ifAbsent: [OrderedCollection new]
)

dependentsFields = (
	^ DependentsFields ifNil: [ DependentsFields := IdentityDictionary new: 4]
)

doesNotUnderstand: selector = (
	self error: ('Method ' , selector , ' not found in class ' , self class name)
)

doesNotUnderstand: selector arguments: arguments = (
	self error: ('Method ' , selector , ' not found in class ' , self class name)
)

enclosedSetElement = (
)

error = (
	"Throw a generic Error exception."
	^self error: 'Error!'.
)

error: aString = (
	"Throw a generic Error exception."
	^Error new signal: aString
)

errorImproperStore = (
	self error: 'Improper store into indexable object'
)

errorNonIntegerIndex = (
	"Create an error notification that an improper object was used as an index."
	self error: 'only integers should be used as indices'
)

errorNotIndexable = (
	self error: 'Object not indexable'
)

errorSubscriptBounds: index = (
	self error: 'subscript is out of bounds: ' , index asString
)

escapedBlock: block = (
	self error: 'Block has escaped and cannot be executed'
)

fatalError: aString = (
	Transcript show: ('Object>>fatalError: ' , aString); cr.
	Smalltalk exit: 1
)

fullPrintString = (
	"Answer a String whose characters are a description of the receiver."
	^ String streamContents: [:s | self printOn: s]
)

halt = (
	"This is the typical message to use for inserting breakpoints during
	debugging. It behaves like halt:, but does not call on halt: in order to
	avoid putting this message on the stack. Halt is especially useful when
	the breakpoint message is an arbitrary one."
	Halt signal
)

halt: aString = (
	"This is the typical message to use for inserting breakpoints during
	debugging. It creates and schedules a Notifier with the argument,
	aString, as the label."
	Halt new signal: aString
)

haltIf: condition = (
	"This is the typical message to use for inserting breakpoints during
	debugging.  Param can be a block or expression, halt if true.
	If the Block has one arg, the receiver is bound to that.
 	If the condition is a selector, we look up in the callchain. Halt if
	any method's selector equals selector."
	| cntxt |
	condition isSymbol ifTrue:[
		"only halt if a method with selector symbol is in callchain"
		cntxt := thisContext.
		[cntxt sender isNil] whileFalse: [
			cntxt := cntxt sender.
			(cntxt selector = condition) ifTrue: [self halt].
			].
		^self.
	].
	(condition isBlock
			ifTrue: [condition cull: self]
			ifFalse: [condition]
	) ifTrue: [
		self halt
	].
)

haltIfNil = (
)

hash = (
	^self identityHash
)

identityHash = (
	<primitive: 75>
	self primitiveFailed
)

ifNil: nilBlock = (
	"Return self, or evaluate the block if I'm == nil (q.v.)"
	^ self
)

ifNil: ifNilBlock ifNotNil: ifNotNilBlock = (
	^ifNotNilBlock cull: self
)

ifNotNil: ifNotNilBlock = (
	"Evaluate the block, unless I'm == nil (q.v.)"
	^ ifNotNilBlock cull: self
)

ifNotNil: notNilBlock ifNil: nilBlock = (
	^ notNilBlock cull: self
)

in: aBlock = (
	"Evaluate the given block with the receiver as its argument."
	^ aBlock value: self
)

initialize = (
	"Subclasses should redefine this method to perform initializations on instance creation"
)

inspect = (
	<primitive: -1>
	self primitiveFailed
)

instVarNamed: aString = (
	"Return the value of the instance variable in me with that name.  Slow and unclean, but very useful. "
	^ self instVarAt: (self class
						instVarIndexFor: aString "asString?"
						ifAbsent: [self error: 'no such inst var'])
)

instVarNamed: aString put: aValue = (
	"Store into the value of the instance variable in me of that name.  Slow and unclean, but very useful. "
	^self
		instVarAt: (self class
						instVarIndexFor: aString "asString?"
						ifAbsent: [self error: 'no such inst var'])
		put: aValue
)

isArray = (
	^false
)

isBlock = (
	^ false
)

isCollection = (
	^false
)

isColor = (
	^ false
)

isComplex = (
	"Answer true if receiver is a Complex number. False by default."
	^ false
)

isContext = (
	^false
)

isDictionary = (
	^false
)

isException = (
	^ false
)

isFloat = (
	^ false
)

isFraction = (
	"Answer true if the receiver is a Fraction."
	^ false
)

isHeap = (
	^ false
)

isInteger = (
	^ false
)

isInterval = (
	^ false
)

isKindOf: aClass = (
	^ self class == aClass or: [ self class inheritsFrom: aClass ]
)

isLiteral = (
	^false
)

isMemberOf: aClass = (
	"Answer whether the receiver is an instance of the class, aClass."
	^self class == aClass
)

isNil = (
	^false
)

isNumber = (
	^false
)

isStream = (
	^false
)

isString = (
	^ false
)

isSymbol = (
	^ false
)

notNil = (
	^true
)

instVarAt: index = (
	"Primitive. Answer a fixed variable in an object. The numbering of the variables
	 corresponds to the named instance variables, followed by the indexed instance
	 variables. Fail if the index is not an Integer or is not the index of a fixed or
	 indexed variable. Essential. See Object documentation whatIsAPrimitive."
	<primitive: 73>
	self primitiveFailed
)

instVarAt: index put: anObject = (
	"Primitive. Store a value into a fixed variable in an object. The numbering of the
	 variables corresponds to the named instance variables, followed by the indexed
	 instance variables. Fail if the index is not an Integer or is not the index of a fixed
	 or indexed variable. Essential. See Object documentation whatIsAPrimitive."
	<primitive: 74>
	self primitiveFailed
)

literalEqual: other = (
	^ self class == other class and: [self = other]
)

newFrom: aSimilarObject = (
	"Create an object that has similar contents to aSimilarObject.
	If the classes have any instance varaibles with the same names, copy them across.
	If this is bad for a class, override this method."
	^ (self isVariable
		ifTrue: [self basicNew: aSimilarObject basicSize]
		ifFalse: [self basicNew]
	  ) copySameFrom: aSimilarObject
)

perform: aSymbol = (
	<primitive: 83>
	^ self perform: aSymbol withArguments: {}
)

perform: aSymbol with: anObject = (
	<primitive: 83>
	^ self perform: aSymbol withArguments: { anObject }
)

perform: aSymbol with: firstObject with: secondObject = (
	"Send the selector, aSymbol, to the receiver with the given arguments.
	Fail if the number of arguments expected by the selector is not two.
	Primitive. Optional. See Object documentation whatIsAPrimitive."
	<primitive: 83>
	^ self perform: aSymbol withArguments: { firstObject. secondObject }
)

perform: aSymbol with: firstObject with: secondObject with: thirdObject = (
	"Send the selector, aSymbol, to the receiver with the given arguments.
	Fail if the number of arguments expected by the selector is not three.
	Primitive. Optional. See Object documentation whatIsAPrimitive."
	<primitive: 83>
	^ self perform: aSymbol withArguments: { firstObject. secondObject. thirdObject }
)

perform: aSymbol with: firstObject with: secondObject with: thirdObject with: fourthObject = (
	"Send the selector, aSymbol, to the receiver with the given arguments.
	Fail if the number of arguments expected by the selector is not four.
	Primitive. Optional. See Object documentation whatIsAPrimitive."
	<primitive: 83>
	^ self perform: aSymbol withArguments: { firstObject. secondObject. thirdObject. fourthObject }
)

perform: aSymbol with: firstObject with: secondObject with: thirdObject with: fourthObject with: fifthObject = (
	"Send the selector, aSymbol, to the receiver with the given arguments.
	Fail if the number of arguments expected by the selector is not five.
	Primitive. Optional. See Object documentation whatIsAPrimitive."
	<primitive: 83>
	^ self perform: aSymbol withArguments: { firstObject. secondObject. thirdObject. fourthObject. fifthObject }
)

perform: selector withArguments: argArray = (
	<primitive: 84>
	^ self perform: selector withArguments: argArray inSuperclass: self class
)

perform: selector withArguments: argArray inSuperclass: lookupClass = (
	<primitive: 100>
	(selector isSymbol)
		ifFalse: [^ self error: 'selector argument must be a Symbol'].
	(selector numArgs = argArray size)
		ifFalse: [^ self error: 'incorrect number of arguments'].
	(self class == lookupClass or: [self class inheritsFrom: lookupClass])
		ifFalse: [^ self error: 'lookupClass is not in my inheritance chain'].
	self primitiveFailed
)

perform: selector withEnoughArguments: anArray = (
	"Send selector to the receiver with arguments in anArray. Only use enough arguments for the arity of the selector; supply nils for missing ones."
	| numArgs args |
	(numArgs := selector numArgs) = anArray size
		ifTrue: [ args := anArray asArray ]
		ifFalse: [
			args := Array new: numArgs.
			args
				replaceFrom: 1
				to: (anArray size min: args size)
				with: anArray
				startingAt: 1 ].
	^self perform: selector withArguments: args
)

postCopy = (
	"self is a shallow copy, subclasses should copy fields as necessary to complete the full copy"
	^ self
)

primitiveFailed = (
	self error: 'primitiveFailed'
)

primitiveFailed: selector = (
	"Announce that a primitive has failed and there is no appropriate Smalltalk code to run."
	self error: selector asString, ' failed'
)

printOn: aStream = (
	"Append to the argument, aStream, a sequence of characters that  identifies the receiver."
	| title |
	title := self class name.
	aStream
		nextPutAll: (title first isVowel ifTrue: ['an '] ifFalse: ['a ']);
		nextPutAll: title
)

printString = (
	"Answer a String whose characters are a description of the receiver."
	| aStream |
	aStream := WriteStream on: (String new: 16).
	self printOn: aStream.
	^aStream contents
)

printStringLimitedTo: limit = (
	| limitedString |
	limitedString := self printString.
	limitedString size < limit ifTrue: [^ limitedString].
	^ (limitedString copyFrom: 1 to: limit) , '...etc...'
)

putOn:aStream = (
	^aStream nextPut:self.
)

release = (
	"Remove references to objects that may refer to the receiver. Answers self.
	This message should be overidden by subclasses with any cycles, in which
	case the subclass should also include the expression super release."
	self breakDependents
)

removeDependent: anObject = (
	"Remove the argument, anObject, as one of the receiver's dependents."
	| dependents |
	dependents := self dependentsFields at: self ifAbsent: [^ anObject].
	dependents remove: anObject ifAbsent: [].
	dependents isEmpty ifTrue: [self breakDependents].
	^anObject
)

setDependents = (
	"Allocate the soft field for the receiver's dependents."
	| dependents |
	dependents := OrderedCollection new.
	self dependentsFields add: (Association key: self value: dependents).
	^ dependents
)

shallowCopy = (
	<primitive: 148>
	self primitiveFailed
)

size = (
	"Primitive. Answer the number of indexable variables in the receiver.
	This value is the same as the largest legal subscript. Essential. See Object
	documentation whatIsAPrimitive."
	<primitive: 62>
	self class isVariable ifFalse: [self errorNotIndexable].
	^ 0
)

species = (
	"Answer the preferred class for reconstructing the receiver.  For example,
	collections create new collections whenever enumeration messages such as
	collect: or select: are invoked.  The new kind of collection is determined by
	the species of the original collection.  Species and class are not always the
	same.  For example, the species of Interval is Array."
	<primitive: 111>
	^self class
)

storeString = (
	| aStream |
	aStream := WriteStream on: (String new: 16).
	self storeOn: aStream.
	^aStream contents
)

readFromString: aString = (
	"Create an object based on the contents of aString."
	^self readFrom: (ReadStream on: aString)
)

respondsTo: aSymbol = (
	"Answer whether the method dictionary of the receiver's class contains aSymbol as a message selector."
	^self class canUnderstand: aSymbol
)

shouldNotImplement = (
	self error: 'shouldNotImplement'
)

subclassResponsibility = (
	self error: 'This method is abstract and should be overridden'
)

unknownGlobal: name = (
	^Smalltalk resolve: name
)

update: aParameter = (
	"Receive a change notice from an object of whom the receiver is a
	dependent. The default behavior is to do nothing; a subclass might want
	to change itself in some way."
	^ self
)

value = (
	^self
)

yourself = (
	^self
)

----

| DependentsFields |

initialize = (
	DependentsFields ifNil:[self initializeDependentsFields].
)

initializeDependentsFields = (
	DependentsFields := IdentityDictionary new: 4.
)

initializedInstance = (
	self isAbstract ifTrue: [^nil].
	^ self new
)

)
