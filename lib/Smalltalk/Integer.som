Integer = Number (

= aNumber = (
	aNumber isInteger ifTrue: [ ^false ].
	aNumber isNumber ifFalse: [ ^false ].
	^aNumber adaptToInteger: self andCompare: #=
)

<< shiftAmount = (
	"left shift"
	shiftAmount < 0 ifTrue: [self error: 'negative arg'].
	^ self bitShift: shiftAmount
)

>> shiftAmount  = (
	"right shift"
	shiftAmount < 0 ifTrue: [self error: 'negative arg'].
	^ self bitShift: 0 - shiftAmount
)

allMask: mask = (
	"Treat the argument as a bit mask. Answer whether all of the bits that are 1 in the argument are 1 in the receiver."
	^mask = (self bitAnd: mask)
)

anyMask: mask = (
	"Treat the argument as a bit mask. Answer whether any of the bits that are 1 in the argument are 1 in the receiver."
	^0 ~= (self bitAnd: mask)
)

asCharacter = (
	^Character value: self
)

asFloat = (
	"Answer a Float that best approximates the value of the receiver."
	self subclassResponsibility
)

asInteger = (
)

asStringWithCommas = (
	"123456789 asStringWithCommas"
	"-123456789 asStringWithCommas"
	^ self asStringWithCommasSigned: false
)

asStringWithCommasSigned: aBoolean = (
	"123456789 asStringWithCommasSigned: true"
	"-123456789 asStringWithCommasSigned: false"
	| digits |
	digits := self abs printString.
	^ String streamContents:
		[:strm |
		self sign = -1 ifTrue: [strm nextPut: $-] ifFalse: [aBoolean ifTrue: [strm nextPut: $+]].
		1 to: digits size do:
			[:i | strm nextPut: (digits at: i).
			(i < digits size and: [(i - digits size) \\ 3 = 0])
				ifTrue: [strm nextPut: $,]]]
)

asWords = (
	"SmallInteger maxVal asWords"
	| mils minus three num answer milCount |
	self = 0 ifTrue: [^'zero'].
	mils := #('' ' thousand' ' million' ' billion' ' trillion' ' quadrillion' ' quintillion' ' sextillion' ' septillion' ' octillion' ' nonillion' ' decillion' ' undecillion' ' duodecillion' ' tredecillion' ' quattuordecillion' ' quindecillion' ' sexdecillion' ' septendecillion' ' octodecillion' ' novemdecillion' ' vigintillion').
	num := self.
	minus := ''.
	self < 0 ifTrue: [
		minus := 'negative '.
		num := num negated.
	].
	answer := String new.
	milCount := 1.
	[num > 0] whileTrue: [
		three := (num \\ 1000) threeDigitName.
		num := num // 1000.
		three isEmpty ifFalse: [
			answer isEmpty ifFalse: [
				answer := ', ',answer
			].
			answer := three,(mils at: milCount),answer.
		].
		milCount := milCount + 1.
	].
	^minus,answer
)

asYear = (
	^ Year year: self
)

benchFib  "Handy send-heavy benchmark" = (
	"(result // seconds to run) = approx calls per second"
	" | r t |
	  t := Time millisecondsToRun: [r := 26 benchFib].
	  (r * 1000) // t"
	"138000 on a Mac 8100/100"
	^ self < 2
		ifTrue: [1]
		ifFalse: [(self-1) benchFib + (self-2) benchFib + 1]
)

benchmark = (
	"Handy bytecode-heavy benchmark"
	"(500000 // time to run) = approx bytecodes per second"
	"5000000 // (Time millisecondsToRun: [10 benchmark]) * 1000"
	"3059000 on a Mac 8100/100"
    | size flags prime k count |
    size := 8190.
    1 to: self do:
        [:iter |
        count := 0.
        flags := (Array new: size) atAllPut: true.
        1 to: size do:
            [:i | (flags at: i) ifTrue:
                [prime := i+1.
                k := i + prime.
                [k <= size] whileTrue:
                    [flags at: k put: false.
                    k := k + prime].
                count := count + 1]]].
    ^ count
)

bitAt: anInteger = (
	"Answer 1 if the bit at position anInteger is set to 1, 0 otherwise.
	self is considered an infinite sequence of bits, so anInteger can be any strictly positive integer.
	Bit at position 1 is the least significant bit.
	Negative numbers are in two-complements.
	This is a naive implementation that can be refined in subclass for speed"
	^(self bitShift: 1 - anInteger) bitAnd: 1
)

bitInvert = (
	^ -1 - self
)

bitShift: shiftCount = (
	"Answer an Integer whose value (in twos-complement representation) is
	the receiver's value (in twos-complement representation) shifted left by
	the number of bits indicated by the argument. Negative arguments
	shift right. Zeros are shifted in from the right in left shifts."
	| magnitudeShift |
	magnitudeShift := self bitShiftMagnitude: shiftCount.
	^ ((self negative and: [shiftCount negative])
		and: [self anyBitOfMagnitudeFrom: 1 to: shiftCount negated])
		ifTrue: [magnitudeShift - 1]
		ifFalse: [magnitudeShift]
)

crossSumBase: aBase = (
	|aResult|
	"Precondition"
	self assert:[aBase isInteger and: [aBase >=2]].
	self < 0 ifTrue: [^self negated crossSumBase: aBase].
	self < aBase ifTrue: [^ self].
	aResult := self \\ aBase + (self // aBase crossSumBase: aBase).
	"Postcondition
	E.g. 18 crossSumBase: 10 -> 9 => 18\\(10-1) = 0"
	self assert: [((aResult \\ (aBase - 1) = 0)) = ((self \\ (aBase - 1)) =0)].
	^aResult
)

denominator = (
	"Let an Integer be polymorphic to a Fraction. See #isFraction."
	^1
)

floor = (
)

highBit = (
	^ self subclassResponsibility
)

highBitOfMagnitude = (
	"Answer the index of the high order bit of the magnitude of the
	receiver, or zero if the receiver is zero."
	^ self subclassResponsibility
)

factorial = (
	self = 0 ifTrue: [^ 1].
	self > 0 ifTrue: [^ self * (self - 1) factorial].
	self error: 'Not valid for negative integers'
)

fractionPart = (
	^0
)

highBit = (
	^ self subclassResponsibility
)

integerPart = (
	^self
)

isFraction = (
	"Each Integer is considered as a special kind of Fraction with self as numerator and a unit denominator.
	Rationale: A Fraction with a unit denominator will be automatically reduced to an Integer.
	Hence Integer has to be polymorphic to Fraction."
	^true
)

isInteger = (
	^ true
)

isLiteral = (
	^true
)

isPowerOfTwo = (
	"Return true if the receiver is an integral power of two."
	^self strictlyPositive and: [ (self bitAnd: self - 1) = 0 ]
)

isProbablyPrime = (
	"See isProbablyPrimeWithK:andQ: for the algoritm description."
	| k q |
	self <= 1 ifTrue: [ ^false ].
	self even ifTrue: [ ^self = 2 ].
	"Factor self into (2 raisedTo: k) * q + 1, where q odd"
	q := self bitShift: -1.
	k := q lowBit.
	q := q bitShift: 1 - k.
	"Repeat the probabilistic until false (the probability of false negative is null) or until probability is very low."
	25 timesRepeat: [ (self isProbablyPrimeWithK: k andQ: q) ifFalse: [ ^false ] ].
	"The probability of false positive after 25 iterations is less than (1/4 raisedTo: 25) < 1.0e-15"
	^true
)

isProbablyPrimeWithK: k andQ: q  = (
	"Algorithm P, probabilistic primality test, from
	Knuth, Donald E. 'The Art of Computer Programming', Vol 2,
	Third Edition, section 4.5.4, page 395, P1-P5 refer to Knuth description..
	Note that this is a Miller Rabin test which may answer false positives (known as pseudoprimes) for at most 1/4 of the possible bases x."
	| x j y minusOne |
	"P1"
	x := (self - 2) atRandom + 1.
	"P2"
	j := 0.
	y := x raisedTo: q modulo: self.
	minusOne := self - 1.
	["P3"
	y = 1 ifTrue: [^j = 0].
	y = minusOne ifTrue: [^true].
	"P4"
	(j := j + 1) < k]
		whileTrue:
			[y := y squared \\ self].
	"P5"
	^false
)

isPrime = (
	"Answer true if the receiver is a prime number. See isProbablyPrime for a probabilistic
	implementation that is much faster for large integers, and that is correct to an extremely
	high statistical level of confidence (effectively deterministic)."
	| probe step limit |
	self <= 3 ifTrue: [ ^self >= 2 ].
	self \\ 2 = 0 ifTrue: [ ^false ].
	self \\ 3 = 0 ifTrue: [ ^false ].
	self <= 1073741823 ifFalse: [ "1 << 30 - 1. For numbers larger than this (on 64-bit platforms) #isProbablyPrime is usually quicker."
		^self isProbablyPrime ].
	probe := 5.
	step := 2. "Step will oscillate between 2 and 4 because at this point self \\ 6 is either 1 or 5."
	limit := self sqrtFloor. "On 64-bit platforms this could be written as self asFloat sqrt truncated (+ 1), which is faster because it creates no intermediate objects. Knowing that self has at most 30 bits because of the check above, this value will never be larger than 32767."
	[ probe <= limit ] whileTrue: [
		self \\ probe = 0 ifTrue: [ ^false ].
		probe := probe + step.
		step := 6 - step ].
	^true
)

lcm: n = (
	^self // (self gcd: n) * n
)

noMask: mask = (
	"Treat the argument as a bit mask. Answer whether none of the bits that are 1 in the argument are 1 in the receiver."
	^0 = (self bitAnd: mask)
)

normalize = (
	"SmallInts OK; LgInts override"
	^ self
)

numberOfDigitsInBase: b = (
	"Return how many digits are necessary to print this number in base b.
	This does not count any place for minus sign, radix prefix or whatever."
	| nDigits q total |
	self negative ifTrue: [^self negated numberOfDigitsInBase: b].
	self < b ifTrue: [^1].
	b isPowerOfTwo ifTrue: [^self highBit + b highBit - 2 quo: b highBit - 1].
	"A conversion from base 2 to base b has to be performed.
	This algorithm avoids Float computations like (self log: b) floor + 1,
	1) because they are inexact
	2) because LargeInteger might overflow
	3) because this algorithm might be cheaper than conversion"
	q := self.
	total := 0.
	["Make an initial nDigits guess that is lower than or equal to required number of digits"
	nDigits := b = 10
		ifTrue: [((q highBit - 1) * 1233 >> 12) + 1. "This is because (2 log)/(10 log)*4096 is slightly greater than 1233"]
		ifFalse: [q highBit quo: b highBit].
	total := total + nDigits.
	"See how many digits remains above these first nDigits guess"
	(q := q quo: (b raisedToInteger: nDigits)) < b] whileFalse.
	^q = 0
		ifTrue: [total]
		ifFalse: [total + 1]
)

numerator = (
	"Let an Integer be polymorphic to a Fraction. See #isFraction."
	^self
)

printAsLiteralOn: aStream = (
	^self printOn: aStream
)

printOn: aStream asFixedPoint: base = (
	"assume I am a fixedpoint decimal scaled by base"
	"String streamContents: [:s | 1234 printOn: s asFixedPoint: 1000]"
	| b n |
	self < 0 ifTrue: [aStream nextPut: $-.
		^self negated printOn: aStream asFixedPoint: base].
	b := base.
	n := self.
	[aStream print: n // b.
	(n := n \\ b) = 0] whileFalse: [
		b = base ifTrue: [aStream nextPut: $.].
		b := b // 10].
)

quo: aNumber = (
	"Refer to the comment in Number quo: "
	| quo |
	aNumber isInteger ifTrue:
		[quo := (self divideByInteger: aNumber) at: 1.
		^ quo normalize].
	^ aNumber adaptToInteger: self andSend: #quo:
)

radix: base = (
	^ self printStringBase: base
)

raisedTo: n modulo: m = (
	"Answer the modular exponential."
	| a s mInv |
	n = 0 ifTrue: [^1].
	(self >= m or: [self < 0]) ifTrue: [^self \\ m raisedTo: n modulo: m].
	n < 0 ifTrue: [^(self reciprocalModulo: m) raisedTo: n negated modulo: m].
	^self slidingLeftRightRaisedTo: n modulo: m
)

raisedToInteger: exp modulo: m = (
	(exp = 0) ifTrue: [^ 1].
	exp even
		ifTrue: [^ (self raisedToInteger: (exp // 2) modulo: m) squared \\ m]
		ifFalse: [^ (self * (self raisedToInteger: (exp - 1) modulo: m)) \\ m].
)

rounded = (
)

significantDigits: aNumber = (
	"Round to preserve aNumber significant digits:
	987654321 significantDigits: 1 ==> 1000000000
	987654321 significantDigits: 2 ==> 990000000"
	| digits |
	digits := self numberOfDigitsInBase: 10.
	^self roundTo: (10 raisedTo: digits - aNumber)
)

slidingLeftRightRaisedTo: n modulo: m = (
	"Private - compute (self raisedTo: n) \\ m,
	Note: this method has to be fast because it is generally used with large integers in cryptography.
	It thus operate on exponent bits from left to right by packets with a sliding window rather than bit by bit (see below)."
	| pow j k w index oddPowersOfSelf square |
	"Precompute powers of self for odd bit patterns xxxx1 up to length w + 1.
	The width w is chosen with respect to the total bit length of n,
	such that each bit pattern will on average be encoutered P times in the whole bit sequence of n.
	This costs (2 raisedTo: w) multiplications, but more will be saved later (see below)."
	k := n highBit.
	w := (k highBit - 1 >> 1 min: 16) max: 1.
	oddPowersOfSelf := Array new: 1 << w.
	oddPowersOfSelf at: 1 put: (pow := self).
	square := self * self \\ m.
	2 to: oddPowersOfSelf size do: [:i | pow := oddPowersOfSelf at: i put: pow * square \\ m].
	"Now exponentiate by searching precomputed bit patterns with a sliding window"
	pow := 1.
	[k > 0]
		whileTrue:
			[pow := pow * pow \\ m.
			"Skip bits set to zero (the sliding window)"
			(n bitAt: k) = 0
				ifFalse:
					["Find longest odd bit pattern up to window length (w + 1)"
					j := k - w max: 1.
					[j < k and: [(n bitAt: j) = 0]] whileTrue: [j := j + 1].
					"We found an odd bit pattern of length k-j+1;
					perform the square powers for each bit
					(same cost as bitwise algorithm);
					compute the index of this bit pattern in the precomputed powers."
					index := 0.
					[k > j] whileTrue:
						[pow := pow * pow \\ m.
						index := index * 2 + (n bitAt: k).
						k := k - 1].
					"Perform a single multiplication for the whole bit pattern.
					This saves up to (k-j) multiplications versus a naive algorithm operating bit by bit"
					pow := pow * (oddPowersOfSelf at: index + 1) \\ m].
			k := k - 1].
	^pow
)

sqrtFloor = (
	"Return the integer part of the square root of self
	Assume self >= 0
	The following post-conditions apply:
	1) self sqrtFloor squared <= self
	2) (self sqrtFloor + 1) squared > self"
	self subclassResponsibility
)

sqrtRem = (
	"Return an array with floor sqrt and sqrt remainder.
	Assume self >= 0.
	The following invariants apply:
	1) self  sqrtRem first squared <= self
	2) (self sqrtRem first + 1) squared > self
	3) self sqrtRem first squared + self sqrtRem last = self"
	self subclassResponsibility
)

take: kk = (
	"Return the number of combinations of (self) elements taken kk at a time.  For 6 take 3, this is 6*5*4 / (1*2*3).  Zero outside of Pascal's triangle.  Use a trick to go faster."
	" 6 take: 3  "
	| num denom |
	kk < 0 ifTrue: [^ 0].
	kk > self ifTrue: [^ 0].
	num := 1.
	self to: (kk max: self-kk) + 1 by: -1 do: [:factor | num := num * factor].
	denom := 1.
	1 to: (kk min: self-kk) do: [:factor | denom := denom * factor].
	^ num // denom
)

timesRepeat: aBlock = (
	| remaining |
	remaining := self.
	[ (remaining := remaining - 1) >= 0 ] whileTrue: [
		aBlock value ]
)

truncated = (
	"Refer to the comment in Number|truncated."
)

----

basicNew = (
	self == Integer ifTrue: [
		^ self error: 'Integer is an abstract class.  Make a concrete subclass.'].
	^ super basicNew
)

initializedInstance = (
	^ 2468
)

lowBitPerByteTable = (
	^#(1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 8 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1)
)

new = (
	self == Integer ifTrue: [
		^ self error: 'Integer is an abstract class.  Make a concrete subclass.'].
	^ super new
)

primesUpTo: max = (
	"Return a list of prime integers up to the given integer."
	"Integer primesUpTo: 100"
	^Array streamContents:[:s| self primesUpTo: max do:[:prime| s nextPut: prime]]
)

primesUpTo: max do: aBlock = (
	"Compute aBlock with all prime integers up to the given integer."
	"Integer primesUpTo: 100"
	| index sieve increment limit limitSqrtFloor |
	limit := max asInteger.
	limit := limit - 1. "upTo:"
	limit <= 1 ifTrue: [ ^self ].
	aBlock value: 2.
	limit <= 2 ifTrue: [ ^self ].
	aBlock value: 3.
	sieve := Array new: limit withAll: 1. "1 = prime, 0 = not prime"
	sieve at: 1 put: 0.
	"Filter multiples of 2."
	index := 4.
	[ index <= limit ] whileTrue: [
		sieve at: index put: 0.
		index := index + 2 ].
	"Filter multiples of 3."
	index := 9.
	[ index <= limit ] whileTrue: [
		sieve at: index put: 0.
		index := index + 3 ].
	"Filter the rest of the primes."
	limitSqrtFloor := limit sqrtFloor.
	index := 5.
	increment := 2.
	[ index <= limitSqrtFloor ] whileTrue: [
		(sieve at: index) = 1 ifTrue: [
			| originalIndex originalIncrement |
			aBlock value: index.
			originalIndex := index.
			originalIncrement := increment.
			increment := index + index.
			index := index * index.
			[ index <= limit ] whileTrue: [
				sieve at: index put: 0.
				index := index + increment ].
			index := originalIndex.
			increment := originalIncrement ].
		index := index + increment.
		increment := 6 - increment ].
	"No more new primes here."
	[ index <= limit ] whileTrue: [
		(sieve at: index) = 1 ifTrue: [
			aBlock value: index ].
		index := index + increment.
		increment := 6 - increment ]
)

readFrom: aStringOrStream = (
	^self readFrom: aStringOrStream base: 10
)

readFrom: aStringOrStream ifFail: aBlock = (
	^(FortranNumberParser on: aStringOrStream) nextIntegerBase: 10 ifFail: aBlock
)

readFrom: aStringOrStream base: base = (
	^(FortranNumberParser on: aStringOrStream) nextIntegerBase: base
)

)
