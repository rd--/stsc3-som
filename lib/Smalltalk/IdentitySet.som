IdentitySet = Set (

asIdentitySet = (
	^self
)

scanFor: anObject = (
	"Scan the key array for the first slot containing either a nil (indicating an empty slot) or an element that matches anObject. Answer the index of that slot or raise an error if no slot is found. This method will be overridden in various subclasses that have different interpretations for matching elements."
	| index start size |
	index := start := anObject identityHash \\ (size := array size) + 1.
	[
		| element |
		((element := array at: index) == nil or: [ element enclosedSetElement == anObject ])
			ifTrue: [ ^index ].
		(index := index \\ size + 1) = start ] whileFalse.
	self errorNoFreeSpace
)

scanForEmptySlotFor: anObject = (
	"Scan the key array for the first slot containing an empty slot (indicated by a nil). Answer the index of that slot. This method will be overridden in various subclasses that have different interpretations for matching elements."
	| index start size |
	index := start := anObject identityHash \\ (size := array size) + 1.
	[
		(array at: index) ifNil: [ ^index ].
		(index := index \\ size + 1) = start ] whileFalse.
	self errorNoFreeSpace
)

----

comment = (^'
The same as a Set, except that items are compared using #== instead of #=.

Almost any class named IdentityFoo is the same as Foo except for the way items are compared.  In Foo, #= is used, while in IdentityFoo, #== is used.  That is, identity collections will treat items as the same only if they have the same identity.

For example, note that copies of a string are equal but they are not identical.

A regular Set will only include equal objects once, an IdentitySet will include multiple equal objects if they are not identical.
')

)
