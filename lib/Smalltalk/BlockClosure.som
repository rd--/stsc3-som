BlockClosure = (

ascending = (
	"Return a SortFunction around the receiver. If the receiver is a 2 arg block, it is assumed it will do the collation directly itself, returning -1, 0, or 1. If the receiver is a one arg block, it will be evaluated for each a and b and of the sort input, and the result of sending <=> to those will be used."
	^self asSortFunction
)

asSortFunction = (
	"Return a SortFunction around the receiver. If the receiver is a 2 arg block, it is assumed it will do the collation directly itself, returning -1, 0, or 1. If the receiver is a one arg block, it will be evaluated for each a and b and of the sort input, and the result of sending <=> to those will be used"
	self numArgs = 1 ifTrue: [^PropertySortFunction property: self].
	self numArgs = 2 ifTrue: [^CollatorBlockFunction usingBlock: self].
	self error: 'Cant be converted to sort function. It should has one or two args'
)

collatedBy: aSortFunction = (
	"Return a SortFunction around the receiver. If the receiver is a 2 arg block, it is assumed it will do the collation directly itself, returning -1, 0, or 1. If the receiver is a one arg block, it will be evaluated for each a and b and of the sort input, and the result of using aSortFunction on those will be used"
	self numArgs = 1 ifTrue: [^PropertySortFunction property: self collatedWith: aSortFunction asSortFunction].
	self error: 'Cant be converted to sort function. It should hava one arg'
)

cull: firstArg = (
	"Activate the receiver, with one or zero arguments."
	self numArgs >= 1 ifTrue: [ ^self value: firstArg ].
	^self value
)

cull: firstArg cull: secondArg = (
	"Activate the receiver, with two or less arguments."
	self numArgs >= 2 ifTrue: [ ^self value: firstArg value: secondArg ].
	self numArgs = 1 ifTrue: [ ^self value: firstArg ].
	^self value
)

cull: firstArg cull: secondArg cull: thirdArg = (
	"Activate the receiver, with three or less arguments."
	self numArgs >= 2 ifTrue: [
		self numArgs >= 3 ifTrue: [ ^self value: firstArg value: secondArg value: thirdArg ].
		^self value: firstArg value: secondArg ].
	self numArgs = 1 ifTrue: [ ^self value: firstArg ].
	^self value
)

cull: firstArg cull: secondArg cull: thirdArg cull: fourthArg = (
	"Activate the receiver, with four or less arguments."
	self numArgs >= 3 ifTrue: [
		self numArgs >= 4 ifTrue: [
			^self value: firstArg value: secondArg value: thirdArg value: fourthArg ].
		^self value: firstArg value: secondArg value: thirdArg ].
	self numArgs = 2 ifTrue: [ ^self value: firstArg value: secondArg ].
	self numArgs = 1 ifTrue: [ ^self value: firstArg ].
	^self value
)

descending = (
	"Opposite direction as ascending."
	^self asSortFunction reversed
)

fork = (
	<primitive: -1>
	^self primtiveFailed
)

ifError: errorHandlerBlock = (
	"Evaluate the block represented by the receiver, and normally return it's value.  If an error occurs, the errorHandlerBlock is evaluated, and it's value is instead returned.  The errorHandlerBlock must accept zero, one, or two parameters (the error message and the receiver)."
	"Examples:
		[1 whatsUpDoc] ifError: [:err :rcvr | 'huh?'].
		[1 / 0] ifError: [:err :rcvr |
			'ZeroDivide' = err
				ifTrue: [Float infinity]
				ifFalse: [self error: err]]
"
	^ self on: Error do: [:ex |
		errorHandlerBlock cull: ex description cull: ex receiver ]
)

isBlock = (
	^ true
)

numArgs = (
	<primitive: -1>
	^self primitiveFailed
)

numArgsError: numArgsForInvocation = (
	| printNArgs |
	printNArgs := [:n| n printString, ' argument', (n = 1 ifTrue: [''] ifFalse:['s'])].
	self error:
			'This block accepts ', (printNArgs value: self numArgs),
			', but was called with ', (printNArgs value: numArgsForInvocation), '.'
)

on: exceptionOrExceptionSet do: handlerAction = (
	"Evaluate the receiver in the scope of an exception handler."
	<primitive: -1>
	self numArgs ~= 0 ifTrue: [self numArgsError: 0].
	^self valueWithArguments: #()
)

repeat = (
	"Evaluate the receiver repeatedly, ending only if the block explicitly returns."
	[self value. true] whileTrue
)

sender = (
	self error: 'sender'
)

value = (
	"Activate the receiver, creating a closure activation (Context)
	 whose closure is the receiver and whose caller is the sender of this
	 message. Supply the copied values to the activation as its copied
	 temps. Primitive. Essential."
	<primitive: 81>
	self numArgs ~= 0 ifTrue: [self numArgsError: 0].
	^self valueWithArguments: #()
)

value: firstArg = (
	"Activate the receiver, creating a closure activation (Context)
	 whose closure is the receiver and whose caller is the sender of this
	 message. Supply the argument and copied values to the activation
	 as its argument and copied temps. Primitive. Essential."
	<primitive: 81>
	self numArgs ~= 1 ifTrue: [self numArgsError: 1].
	^self valueWithArguments: (Array with: firstArg)
)

value: arg1 value: arg2 = (
	<primitive: 81>
	self numArgs ~= 1 ifTrue: [self numArgsError: 2].
	^self valueWithArguments: (Array with: arg1 with: arg2)
)

value: arg1 value: arg2 value: arg3 = (
	<primitive: 81>
	self numArgs ~= 1 ifTrue: [self numArgsError: 3].
	^self valueWithArguments: (Array with: arg1 with: arg2 with: arg3)
)

value: firstArg value: secondArg value: thirdArg value: fourthArg = (
	<primitive: 81>
	self numArgs ~= 1 ifTrue: [self numArgsError: 4].
	^self valueWithArguments: (Array with: firstArg with: secondArg with: thirdArg with: fourthArg)
)

value: firstArg value: secondArg value: thirdArg value: fourthArg value: fifthArg = (
	<primitive: 81>
	self numArgs ~= 1 ifTrue: [self numArgsError: 5].
	^self valueWithArguments: (Array with: firstArg with: secondArg with: thirdArg with: fourthArg with: fifthArg)
)

valueError = (
	self error: 'Incompatible number of args, or already active'
)

valueWithArguments: anArray = (
	<primitive: 82>
	nargs = anArray size
		ifTrue: [self valueError]
		ifFalse: [self error: 'The block needs more or fewer arguments defined']
)

valueWithPossibleArgs: anArray = (
	^self numArgs = 0
		ifTrue: [self value]
		ifFalse:
			[self valueWithArguments:
				(self numArgs = anArray size
					ifTrue: [anArray]
					ifFalse:
						[self numArgs > anArray size
							ifTrue: [anArray, (Array new: self numArgs - anArray size)]
							ifFalse: [anArray copyFrom: 1 to: self numArgs]])]
)

valueWithPossibleArgument: anArg = (
	"Evaluate the block represented by the receiver. If the block requires one argument, use anArg, if it requires more than one, fill up the rest with nils. See also #cull: if you want to raise an exception for incompatible blocks instead."
	| a |
	self numArgs = 0 ifTrue: [^self value].
	self numArgs = 1 ifTrue: [^self value: anArg].
	a := Array new: self numArgs.
	a at: 1 put: anArg.
	^self valueWithArguments: a
)

whileFalse: aBlock = (
	self value ifTrue: [ ^nil ] ifFalse: [ aBlock value. ^self whileFalse: aBlock ]
)

whileFalse = (
	^ self whileFalse: []
)

whileTrue: aBlock = (
	self value ifFalse: [ ^nil ] ifTrue: [ aBlock value. ^ self whileTrue: aBlock ]
)

whileTrue = (
	^ self whileTrue: []
)

)
