WeekTest = ClassTestCase (

| week restoredStartDay |

classToBeTested = (
	^ Week
)

selectorsToBeIgnored = (
	| deprecated private special |
	deprecated := #().
	private := #( #printOn: ).
	special := #( #next #do: ).
	^ super selectorsToBeIgnored, deprecated, private, special.
)

setUp = (
	"June 1998, 5th week"
	super setUp.
	restoredStartDay := Week startDay.
	Week startDay: #Sunday.
	week := Week starting: '4 July 1998' asDate
)

tearDown = (
	super tearDown.
	Week startDay: restoredStartDay.
	week := nil.
)

testDayNames = (
	self assert: (Week dayNames) = #(#Sunday #Monday #Tuesday #Wednesday #Thursday #Friday #Saturday).
)

testEnumerating = (
	| days |
	days := OrderedCollection new.
	0 to: 6 do: [ :i | days add: ('28 June 1998' asDate addDays: i) ].
	week datesDo: [ :d | days remove: d ].
	self assert: days isEmpty.
)

testIndexOfDay = (
	| days |
	days := #(#Sunday #Monday #Tuesday #Wednesday #Thursday #Friday #Saturday).
	days withIndexDo: [:item :index | self assert: (Week indexOfDay: item) = index].
	"This should probably raise an error rather than returning 0."
	self assert: (Week indexOfDay: 0) = 0.
	self assert: (Week indexOfDay: 1) = 0.
	self assert: (Week indexOfDay: 7) = 0.
	self assert: (Week indexOfDay: 8) = 0.
	self assert: (Week indexOfDay: #Sunnyday) = 0.
)

testInquiries = (
	self
		assert: week start asDate = '28 June 1998' asDate;
		assert: week end asDate = '4 July 1998' asDate;
		assert: week index = 5;
		assert: week duration = (7 days).
)

testNameOfDay = (
	| days |
	days := #(#Sunday #Monday #Tuesday #Wednesday #Thursday #Friday #Saturday).
	days withIndexDo: [:item :index | self assert: (Week nameOfDay: index) = item].
)

testPreviousNext = (
	self
		assert: week next = (Week starting: '6 July 1998' asDate);
		assert: week previous = (Week starting:  '22 June 1998' asDate)
)


)
