TestResource = Object (

| name description |

description = (

	^description ifNil: [ '' ]

)

description: aString = (

	description := aString
)

initialize = (
	super initialize.
	self setUp

)

isAvailable = (
	"override to provide information on the
	readiness of the resource"

	^true
)

isUnavailable = (
	"override to provide information on the
	readiness of the resource"

	^self isAvailable not
)

name = (

	^name ifNil: [ self printString]

)

name: aString = (

	name := aString
)

printOn: aStream = (

	aStream nextPutAll: self class printString
)

resources = (
	^self class resources
)

setUp = (
	"Does nothing. Subclasses should override this
	to initialize their resource"
)

signalInitializationError = (
	^self class signalInitializationError
)

tearDown = (
	"Does nothing. Subclasses should override this
	to tear down their resource"
)

----------------------------

cleanUp: aggressive = (

	aggressive ifTrue: [
		self withAllSubclassesDo: [:cls | cls reset]].

)

current = (
	^ current ifNil: [ current := self new]
)

current: aTestResource = (

	current := aTestResource
)

isAbstract = (
	"Override to true if a TestResource subclass is Abstract and should not have
	TestCase instances built from it"

	^self name = #TestResource
)

isAvailable = (
	^self current notNil and: [self current isAvailable]
)

isUnavailable = (

	^self isAvailable not
)

reset = (
	current ifNotNil: [:oldCurrent |
		current := nil.
		oldCurrent tearDown]

)

resources = (
	^#()
)

signalInitializationError = (
	^TestResult signalErrorWith: 'Resource ' , self name , ' could not be initialized'
)


comment = (^'
No comment
')


)
