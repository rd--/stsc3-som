DictionaryTest = ClassTestCase (

testAdd = (
	| dict |
	dict := Dictionary new.
	dict add: #a -> 1.
	dict add: #b -> 2.
	self assert: (dict at: #a) = 1.
	self assert: (dict at: #b) = 2
)

testAddAll = (
	| dict1 dict2 |
	dict1 := Dictionary new.
	dict1 at: #a put:1 ; at: #b put: 2.
	dict2 := Dictionary new.
	dict2 at: #a put: 3 ; at: #c put: 4.
	dict1 addAll: dict2.
	self assert: (dict1 at: #a) = 3.
	self assert: (dict1 at: #b) = 2.
	self assert: (dict1 at: #c) = 4.
	dict1 := Dictionary new.
	dict1 at: #a put:1 ; at: #b put: 2.
	dict1 addAll: {#a -> 3. #c -> 4}.
	self assert: (dict1 at: #a) = 3.
	self assert: (dict1 at: #b) = 2.
	self assert: (dict1 at: #c) = 4.
)

testAddAssociation = (
	| dict |
	dict := Dictionary new.
	dict at: #a put: 1.
	dict at: #b put: 2.
	self assert: (dict at: #a) = 1.
	self assert: (dict at: #b) = 2.
	dict at: #a put: 10.
	dict at: #c put: 2.
	self assert: (dict at: #a) = 10.
	self assert: (dict at: #b) = 2.
	self assert: (dict at: #c) = 2
)

testAsSet = (
	| aDictionary aSet assoc0 assoc1 |
	aDictionary := Dictionary new.
	aSet := aDictionary asSet.
	assoc0 := #first -> 0.
	assoc1 := #first -> 1.
	aSet add: assoc0 copy; add: assoc1.
	self
		assert: (assoc0 copy ~= assoc1) ==> (aSet size > 1)
		description:
  			'When adding two different elements, the set size should be greater than one'
)

testAssociationsSelect = (
	| answer d |
	d := Dictionary new.
	d at: (Array with: #hello with: #world)
	  put: #fooBar.
	d at: Smalltalk put: #'Smalltalk is the key'.
	d at: #Smalltalk put: Smalltalk.
	answer := d
				associationsSelect: [:assoc | assoc key == #Smalltalk
						and: [assoc value == Smalltalk]].
	self
		should: [answer isKindOf: Dictionary].
	self
		should: [answer size = 1].
	self
		should: [(answer at: #Smalltalk)
				== Smalltalk].
	answer := d
				associationsSelect: [:assoc | assoc key == #NoSuchKey
						and: [assoc value == #NoSuchValue]].
	self
		should: [answer isKindOf: Dictionary].
	self
		should: [answer size = 0]
)

testAtError = (
	| dict |
	dict := Dictionary new.
	dict at: #a put: 666.
	self shouldnt: [ dict at: #a ] raise: KeyNotFound.
	self should: [ dict at: #b ] raise: KeyNotFound.
)

testAtIfAbsent = (
	| dict |
	dict := Dictionary new.
	dict at: #a put: 666.
	self assert: (dict at: #a ifAbsent: [nil]) = 666.
	self assert: (dict at: #b ifAbsent: [nil]) isNil.
)

testAtIfPresentIfAbsent = (
	| dict present absent |
	dict := Dictionary new.
	present := absent := false.
	dict at: #foo ifPresent:[:v| present := true] ifAbsent:[absent := true].
	self deny: present.
	self assert: absent.
	dict at: #foo put: #bar.
	present := absent := false.
	dict at: #foo ifPresent:[:v| present := true] ifAbsent:[absent := true].
	self assert: present.
	self deny: absent.
	present := absent := false.
	dict at: #foo ifPresent:[:v| present := true. nil] ifAbsent:[absent := true].
	self assert: present.
	self deny: absent.
)

testAtIfPresentIfAbsentPut = (
	| dict present absent |
	dict := Dictionary new.
	present := absent := false.
	self assert: (dict at: #foo ifPresent:[:v| present := true. v] ifAbsentPut:[absent := true. #present])
		equals: #present.
	self deny: present.
	self assert: absent.
	present := absent := false.
	self assert: (dict at: #foo ifPresent:[:v| present := true. v] ifAbsentPut:[absent := true. #absent])
		equals: #present.
	self assert: present.
	self deny: absent.
)

testAtNil = (
	| dict1  |
	dict1 := Dictionary new.
	dict1 at: nil put: #none.
	self assert: (dict1 at: nil) = #none.
)

testAtPut = (
	| adictionary |
	adictionary := Dictionary new.
	adictionary at: #a put: 3.
	self assert: (adictionary at: #a) = 3.
	adictionary at: #a put: 3.
	adictionary at: #a put: 4.
	self assert: (adictionary at: #a) = 4.
	adictionary at: nil put: 666.
	self assert: (adictionary at: nil) = 666
)

testAtPutNil = (
	| dict |
	dict := Dictionary new.
	dict at: nil put: 1.
	self assert: (dict at: nil) = 1.
	dict at: #a put: nil.
	self assert: (dict at: #a) = nil.
	dict at: nil put: nil.
	self assert: (dict at: nil) = nil.
)

testCapcityOfNew = (
	| goodPrimes |
	goodPrimes := HashedCollection goodPrimes.
	self assert: (goodPrimes includes: Dictionary new capacity).
	0 to: 100 do: [ :size |
		| dictionary |
		dictionary := Dictionary new: size.
		self assert: (goodPrimes includes: dictionary capacity) ]
)

testCollect = (
	| dict expected result |
	dict := Dictionary newFromPairs:{
		#first.		1.
		#second.	2.
		#third.		3.
		#fourth.	4.
		#fifth.		5.
	}.
	result := dict collect:[:each| each asWords].
	expected := Dictionary newFromPairs:{
		#first.		'one'.
		#second.	'two'.
		#third.		'three'.
		#fourth.	'four'.
		#fifth.		'five'.
	}.
	self assert: result = expected.
)

testCollectAs = (
	| classes collection dictionary |
	classes := {Array . OrderedCollection . Set . Bag}.
	classes do: [:originClass |
			collection := originClass with: 1 with: 2 with: 3.
			dictionary := collection collect: [:v | v -> (v + 1)] as: Dictionary.
			self
				assert: collection size equals: dictionary size;
				assert: (dictionary associations includesAllOf: { 1 -> 2 . 2 -> 3. 3 -> 4})]
)

testComma = (
	| dict1 dict2 dict3 |
	dict1 := Dictionary new.
	dict1 at: #a put:1 ; at: #b put: 2.
	dict2 := Dictionary new.
	dict2 at: #a put: 3 ; at: #c put: 4.
	dict3 := dict1, dict2.
	self assert: (dict3 at: #a) = 3.
	self assert: (dict3 at: #b) = 2.
	self assert: (dict3 at: #c) = 4.
)

testDictionaryConcatenation = (
	| dict1 dict2 dict3 |
	dict1 := Dictionary new.
	dict1 at: #a put: 'Nicolas' ; at: #b put: 'Damien'.
	dict2 := Dictionary new.
	dict2 at: #a put: 'Christophe' ; at: #c put: 'Anthony'.
	dict3 := dict1, dict2.
	self assert: (dict3 at: #a) = 'Christophe'.
	self assert: (dict3 at: #b) = 'Damien'.
	self assert: (dict3 at: #c) = 'Anthony'.
)

testIncludesAssociation = (
	| dict |
	dict := Dictionary new.
	dict at: #a put: 1.
	dict at: #b put: 2.
	self assert: (dict includesAssociation: (#a -> 1)).
	self assert: (dict includesAssociation: (#b -> 2)).
)

testIncludesAssociationNoValue = (
	| dict a1 a3 |
	a1 := Association key: #Italie.
	a3 := Association key: #France value: 'Paris'.
	self assert: (a1 key = #Italie).
	self assert: (a1 value isNil).
	dict := Dictionary new.
	dict add: a1.
	dict add: a3.
	self assert: (dict includesKey: #France).
	self assert: (dict includesKey: #Italie).
	self assert: (dict at: #Italie) isNil.
	self assert: (dict at: #France) = 'Paris'
)

testIncludesKey = (
	| dict a1 a2 a3 |
	a1 := Association key: 'Italie'.
	a2 := Association new.
	a3 := Association key: 'France' value: 'Paris'.
	dict := Dictionary new.
	dict add: a1 .
	dict add: a2.
	dict add: a3.
	"self assert: (dict includesKey: #France)."
	self assert: (dict includesKey: 'France').
	"self assert: (dict includesKey: #Italie)."
	self assert: (dict includesKey: nil).
	self assert: (dict at: 'France' ) = 'Paris'.
)

testKeyAtValue = (
	| dict |
	dict := Dictionary new.
	dict at: #a put: 1.
	dict at: #b put: 2.
	dict at: #c put: 1.
	self assert: (dict keyAtValue: 2) = #b.
	self assert: ((dict keyAtValue: 1) = #a or: [(dict keyAtValue: 1) = #c]).
	self should: [dict keyAtValue: 0] raise: Error
)

testKeys = (
	| a1 a2  dict |
	a1 := Association key: 'France' value: 'Paris'.
	a2 := Association key: 'Italie' value: 'Rome'.
	dict := Dictionary new.
	dict add: a1.
	dict add: a2.
	self assert: (dict keys size) = 2.
	self assert: (dict keys includes: 'France')
	"self assert: (dict keys includes: #France)"
)

testKeysDo = (
	| dict res |
	dict := Dictionary new.
	dict at: #a put: 33.
	dict at: #b put: 66.
	res := OrderedCollection new.
	dict keysDo: [ :each | res add: each].
	self assert: res asSet = #(a b) asSet.
)

testNewFromIsolation = (
	| dict1 dict2 |
	dict1 := Dictionary new.
	dict1 at: #one put: 'foo'; at: #two put: 0@0.
	dict2 := Dictionary newFrom: dict1.
	dict2 at: #one put: 'bar'.

	self assert: (dict1 at: #one) = 'foo'.

)

testNilHashCollision = (
	| dict key |
	dict := Dictionary new.
	key := nil hash.
	dict at: key hash put: 1.
	dict at: nil put: 2.
	self assert: (dict includesKey: nil).
	dict removeKey: key.
	self assert: (dict includesKey: nil).
)

testOccurrencesOf = (
	| dict |
	dict := Dictionary new.
	dict at: #a put: 1.
	dict at: #b put: 2.
	dict at: #c put: 1.
	dict at: #d put: 3.
	dict at: nil put: nil.
	dict at: #z put: nil.
	self assert: (dict occurrencesOf: 1 ) = 2.
	self assert: (dict occurrencesOf: nil ) = 2.
)

testPseudoVariablesAreValidKeys = (
	| dict1  |
	dict1 := Dictionary new.
	dict1 at: true put: #true.
	self assert: (dict1 at: true) = #true.
	dict1 at: false put: #false.
	self assert: (dict1 at: false) = #false.
)

testReject = (
	| dict expected result |
	dict := Dictionary newFromPairs:{
		#first.		1.
		#second.	2.
		#third.		3.
		#fourth.	4.
		#fifth.		5.
	}.
	result := dict reject:[:each| each odd].
	expected := Dictionary newFromPairs:{
		#second.	2.
		#fourth.	4.
	}.
	self assert: result = expected.
)

testRemoveAll = (
	| dict1 dict2 s2 |
	dict1 := Dictionary new.
	dict1 at: #a put:1 ; at: #b put: 2.
	dict2 := dict1 copy.
	s2 := dict2 size.
	dict1 removeAll.
	self assert: dict1 size = 0.
	self assert: dict2 size = s2 description: 'the copy has not been modified'.
)

testRemoveKey = (
	| dict |
	dict := Dictionary new.
	dict at: #a put: 1.
	dict at: #b put: 2.
	self assert: (dict keys size) = 2.
	dict removeKey: #a.
	self assert: dict keys size  = 1.
	self should: [dict at: #a] raise: KeyNotFound.
	self assert: (dict at: #b) = 2
)

testSelect = (
	| dict expected result |
	dict := Dictionary newFromPairs:{
		#first.		1.
		#second.	2.
		#third.		3.
		#fourth.	4.
		#fifth.		5.
	}.
	result := dict select:[:each| each odd].
	expected := Dictionary newFromPairs:{
		#first.		1.
		#third.		3.
		#fifth.		5.
	}.
	self assert: result = expected.
	result at: #first put: 0.
	self assert: (dict at: #first) = 1

)

testValues = (
	| a1 a2 a3 dict |
	a1 := Association key: 'France' value: 'Paris'.
	a2 := Association key: 'Italie' value: 'Rome'.
	dict := Dictionary new.
	dict add: a1.
	dict add: a2.

	self assert: (dict values size ) = 2.
	self assert: (dict values includes: 'Paris').

	a3 := Association new.
	dict add: a3.
	self assert: (dict values size ) = 3.
	self assert: (dict values includes: nil).











)

testWithAll = (

	| dict1 dict2 |
	dict1 := Dictionary withAll: {#a -> 1. #b -> 2}.
	self assert: (dict1 at: #a) = 1.
	self assert: (dict1 at: #b) = 2.

	dict2 := Dictionary withAll: dict1.
	self assert: (dict2 at: #a) = 1.
	self assert: (dict2 at: #b) = 2.

)


)
