SortFunctionTest = TestCase (

testAsSortFunction = (
	| function |
	function := #name ascending.
	self assert: function equals: function asSortFunction.
	function := #name asSortFunction.
	self assert: function equals: function asSortFunction.
	function := [ :each | each name ] ascending.
	self assert: function equals: function asSortFunction.
	function := [ :x :y | x <=> y ] asSortFunction.
	self assert: function equals: function asSortFunction.
)

testComparisonOfFunctionsDefinedByBlock = (
	| collatorBlock |
	collatorBlock := [ :a :b | 1 ].
	self assert: collatorBlock ascending equals: collatorBlock ascending.
	self assert: collatorBlock ascending hash equals: collatorBlock ascending hash.
	self deny: collatorBlock ascending = collatorBlock descending.
	self deny: collatorBlock ascending = [ :a :b | -1 ] ascending
)

testComparisonOfFunctionsDefinedBySymbol = (
	self assert: #name ascending equals: #name ascending.
	self assert: #name ascending hash equals: #name ascending hash.
	self deny: #name ascending = #name descending.
	self deny: #name ascending = #name2 ascending.
	self deny: #name ascending undefinedFirst = #name ascending undefinedLast
)

testDirectionToggling = (
	| function |
	function := #x ascending.
	self assert: (function value: 0 @ 2 value: 1 @ 1).
	self assert: (function value: 1 @ 2 value: 1 @ 1).
	self deny: (function value: 2 @ 2 value: 1 @ 1).
	function := function reversed.
	self deny: (function value: 1 @ 2 value: 2 @ 1).
	self assert: (function value: 1 @ 2 value: 1 @ 1).
	self assert: (function value: 2 @ 2 value: 1 @ 1).
	function := function reversed.
	self assert: (function value: 0 @ 2 value: 1 @ 1).
	self assert: (function value: 1 @ 2 value: 1 @ 1).
	self deny: (function value: 2 @ 2 value: 1 @ 1)
)

testPropertyWithOddCollator = (
	| function |
	function := #y collatedBy: [:a :b | "sort the odd first" (b bitAnd: 1) - (a bitAnd: 1)].
	self assert: (function value: 0@1 value: 0@0).
	self assert: (function value: 0@1 value: 0@2).
	self deny: (function value: 0@2 value: 0@1).
	self deny: (function value: 0@2 value: 0@3).
)

testSingleArgBlock = (
	| function block |
	block := [:point | point x / point y].
	function := block ascending.
	self assert: (function value: 0 @ 2 value: 1 @ 1).
	self assert: (function value: 1 @ 2 value: 2 @ 4).
	self deny: (function value: 2 @ 2 value: 1 @ 2).
	function := block descending.
	self deny: (function value: 1 @ 2 value: 2 @ 1).
	self assert: (function value: 2 @ 2 value: 1 @ 1).
	self assert: (function value: 3 @ 2 value: 1 @ 1)
)

testTwoArgBlock = (
	| function block |
	block :=
			[:a :b |
			a odd = b odd ifTrue: [0] ifFalse: [a odd ifTrue: [-1] ifFalse: [1]]].
	function := block ascending.
	self assert: (function value: 2 value: 4).
	self assert: (function value: 1 value: 3).
	self assert: (function value: 1 value: 4).
	self deny: (function value: -2 value: 1).
	function := block descending.
	self assert: (function value: 2 value: 4).
	self assert: (function value: 1 value: 3).
	self deny: (function value: 1 value: 4).
	self assert: (function value: -2 value: 1)
)

testUnarySymbol = (
	| function |
	function := #x ascending.
	self assert: (function value: 0 @ 2 value: 1 @ 1).
	self assert: (function value: 1 @ 2 value: 1 @ 1).
	self deny: (function value: 2 @ 2 value: 1 @ 1).
	function := #x descending.
	self deny: (function value: 1 @ 2 value: 2 @ 1).
	self assert: (function value: 1 @ 2 value: 1 @ 1).
	self assert: (function value: 2 @ 2 value: 1 @ 1)
)

testUndefinedFirst = (
	| function |
	function := #value ascending undefinedFirst .
	self assert: (function value: 1->nil value: 2->'foo').
	self assert: (function collate: 1->nil with: 2->nil) = 0.
	self assert: (function value: 2->'bar' value: 1->'foo').
	self deny: (function value: 2->'foo' value: 1->'bar').
	self deny: (function value: 1->'foo' value: 2->nil).
)

testUndefinedFirstUnary = (
	| function |
	function := #y ascending undefinedFirst.
	self assert: (function value: 0 @ nil value: 1 @ 1).
	self assert: (function value: 1 @ 2 value: 1 @ 2).
	self deny: (function value: 2 @ 2 value: 1 @ 1).
	function := #y descending undefinedFirst.
	self assert: (function value: 1 @ nil value: 2 @ 1).
	self deny: (function value: 1 @ 2 value: 1 @ 3).
	self deny: (function value: 2 @ 2 value: 1 @ 3)
)

testUndefinedLast = (
	| function |
	function := #value ascending undefinedLast .
	self deny: (function value: 1->nil value: 2->'foo').
	self assert: (function collate: 1->nil with: 2->nil) = 0.
	self assert: (function value: 2->'bar' value: 1->'foo').
	self deny: (function value: 2->'foo' value: 1->'bar').
	self assert: (function value: 1->'foo' value: 2->nil).
)

testUndefinedLastUnary = (
	| function |
	function := #y ascending undefinedLast.
	self assert: (function value: 0 @ 2 value: 1 @ nil).
	self assert: (function value: 1 @ 2 value: 1 @ 2).
	self deny: (function value: 2 @ 2 value: 1 @ 1).
	function := #y descending undefinedLast.
	self assert: (function value: 1 @ 2 value: 2 @ nil).
	self deny: (function value: 1 @ 2 value: 1 @ 3).
	self deny: (function value: 2 @ 2 value: 1 @ 3)
)


)
