GeneratorTest = TestCase (

fibonacciSequence = (
	"Yields an infinite sequence of fibonacci numbers."
	^ Generator on: [ :generator |
		| a b |
		a := 0. b := 1.
		[ a := b + (b := a).
		  generator yield: a ]
			repeat ]
)

numbersBetween: aStartInteger and: aStopInteger = (
	"Yields the nubmers between aStartInteger and aStopInteger."
	^ Generator on: [ :generator |
		aStartInteger to: aStopInteger
			do: [ :value | generator yield: value ] ]
)

testAtEnd = (
	| generator |
	generator := self numbersBetween: 1 and: 3.
	self deny: generator atEnd.
	generator next.
	self deny: generator atEnd.
	generator next.
	self deny: generator atEnd.
	generator next.
	self assert: generator atEnd
)

testClose = (
	| generator doEnsure notEnsure |
	doEnsure := notEnsure := 0.
	[ generator := Generator on: [ :g |
		[ g yield: 1; yield: 2 ]
			ensure: [ doEnsure := doEnsure + 1 ] ].
	self assert: doEnsure = 0; assert: notEnsure = 0.
	self assert: generator peek = 1.
	self assert: doEnsure = 0; assert: notEnsure = 0.
	generator close.
	self assert: doEnsure = 1; assert: notEnsure = 0 ]
		ensure: [ notEnsure := notEnsure + 1 ].
	self assert: doEnsure = 1; assert: notEnsure = 1
)

testContents = (
	| generator |
	generator := self numbersBetween: 1 and: 3.
	self assert: generator contents = #(1 2 3)
)

testEmpty = (
	| generator |
	generator := Generator on: [ :g | ].
	self assert: generator atEnd.
	self assert: generator peek isNil.
	self assert: generator next isNil
)

testEnsure = (
	| generator |
	generator := Generator on: [ :g |
		[ g yield: 1; yield: 2 ]
			ensure: [ g yield: 3 ] ].
	self assert: generator upToEnd asArray = #( 1 2 3 )
)

testErrorPropagation = (
	"Ensure that errors in the generator block are properly propagated"
	| generator |
	generator := Generator on: [ :g | g yield: 1. g error: 'yo'].
	self should:[generator next] raise: Error.
)

testFibonacci = (
	| generator |
	generator := self fibonacciSequence.
	self assert: (generator next: 10) asArray = #( 1 1 2 3 5 8 13 21 34 55 )
)

testNext = (
	| generator |
	generator := self numbersBetween: 1 and: 3.
	self assert: generator next = 1.
	self assert: generator next = 2.
	self assert: generator next = 3.
	self assert: generator next isNil
)

testPeek = (
	| generator |
	generator := self numbersBetween: 1 and: 3.
	self assert: generator peek = 1.
	self assert: generator peek = 1.
	generator next.
	self assert: generator peek = 2
)

testReset = (
	| generator |
	generator := self numbersBetween: 1 and: 3.
	self assert: generator next = 1.
	self assert: generator next = 2.
	generator reset.
	self assert: generator next = 1.
	self assert: generator next = 2.
	self assert: generator next = 3.
	self assert: generator next = nil.
	generator reset.
	self assert: generator next = 1
)

testResetUnwind = (
	"Just like close, just using reset"
	| generator doEnsure notEnsure |
	doEnsure := notEnsure := 0.
	[ generator := Generator on: [ :g |
		[ g yield: 1; yield: 2 ]
			ensure: [ doEnsure := doEnsure + 1 ] ].
	self assert: doEnsure = 0; assert: notEnsure = 0.
	self assert: generator peek = 1.
	self assert: doEnsure = 0; assert: notEnsure = 0.
	generator reset.
	self assert: doEnsure = 1; assert: notEnsure = 0 ]
		ensure: [ notEnsure := notEnsure + 1 ].
	self assert: doEnsure = 1; assert: notEnsure = 1
)

testSimple = (
	| generator |
	generator := Generator on: [ :g | g yield: 1; yield: 2 ].
	self assert: generator upToEnd asArray = #( 1 2 )
)

testYieldLookAhead = (
	"Check the look-ahead in our current implementation. See http://forum.world.st/Generators-td4941886.html."
	| x gen result |
	x := 0.
	gen := Generator on: [:g |
		x := 1.
		g yield: nil.
		x := 2.
		g yield: nil.
		x := 3.
		g yield: nil].
	result := OrderedCollection new.
	gen do: [:i | result add: x].
	self deny: (result hasEqualElements: #(1 2 3)).
	self assert: (result hasEqualElements: #(2 3 3)).
)

)
