ClassTestCase = TestCase (

classToBeTested = (
	self subclassResponsibility
)

selectorsNotTested = (
	^ self selectorsToBeTested difference: self selectorsTested.
)

selectorsTested = (
	| literals |
	literals := Set new.
	self class
		selectorsAndMethodsDo: [ :s :m | (s beginsWith: 'test')
			ifTrue: [ literals addAll: (m messages)] ].
	^ literals sorted
)

selectorsToBeIgnored = (
	^ #(#DoIt #DoItIn:)
)

selectorsToBeTested = (
	^ ( { self classToBeTested. self classToBeTested class } gather: [:c | c selectors])
			difference: self selectorsToBeIgnored
)

targetClass = (
  |className|
  className := self class name asString copyFrom: 1 to: self class name size - 4.
  ^ Smalltalk at: className asString asSymbol
)

testCoverage = (
	| untested |
	self class mustTestCoverage ifTrue:
		[ untested := self selectorsNotTested.
		self assert: untested isEmpty
		description: untested size asString, ' selectors are not covered' ]
)

testNew = (
	"This should not throw an exception."
	self targetClass new.
)

----------------------------

isAbstract = (
	"Override to true if a TestCase subclass is Abstract and should not have
	TestCase instances built from it"
	^self name = #ClassTestCase
)

mustTestCoverage = (
	^ false
)

comment = (^'
This class is intended for unit tests of individual classes and their metaclasses.
It provides methods to determine the coverage of the unit tests.
Subclasses are expected to re-implement #classesToBeTested and #selectorsToBeIgnored.
They should also implement to confirm that all methods have been tested.
#testCoverage
	super testCoverage.
')

)
