FloatTest = ClassTestCase (

| exactInteger float greaterInexactInt smallerInexactInt greaterFloat smallerFloat |

setUp = (
	exactInteger := 1 << (Float precision + 2).
	float := exactInteger asFloat.
	greaterInexactInt := exactInteger + 1.
	smallerInexactInt := exactInteger - 1.
	greaterFloat := float successor.
	smallerFloat := float predecessor.
)

testArCosh = (
	self assert: 1.0 arCosh = 0.0.
	self deny: Float infinity arCosh isFinite.
	self assert: (2.5 arCosh cosh closeTo: 2.5).
)

testArSinh = (
	self assert: 0.0 arSinh = 0.0.
	self deny: Float infinity arSinh isFinite.
	self assert: (0.5 arSinh negated closeTo: 0.5 negated arSinh).
	self assert: (0.5 arSinh sinh closeTo: 0.5).
	self assert: (-2.5 arSinh sinh closeTo: -2.5).
)

testArTanh = (
	self assert: 0.0 arTanh = 0.0.
	"self deny: 1 arTanh isFinite."
	self assert: (0.5 arTanh negated closeTo: 0.5 negated arTanh).
	self assert: (0.5 arTanh tanh closeTo: 0.5).
	self assert: (-0.5 arTanh tanh closeTo: -0.5).
)

testArcTan = (
	self assert: ((100 arcTan: 100) closeTo: Float pi / 4).
	self assert: ((-100 arcTan: 100) closeTo: Float pi / -4).
	self assert: ((100 arcTan: -100) closeTo: Float pi * 3 / 4).
	self assert: ((-100 arcTan: -100) closeTo: Float pi * -3 / 4).
	self assert: ((0 arcTan: 100) closeTo: 0).
	self assert: ((0 arcTan: -100) closeTo: Float pi).
	self assert: ((100 arcTan: 0) closeTo: Float pi / 2).
	self assert: ((-100 arcTan: 0) closeTo: Float pi / -2).
	self assert: (0 arcTan: 0) = 0.
)

testCeiling = (
	self assert: 1.0 ceiling = 1.
	self assert: 1.1 ceiling = 2.
	self assert: -2.0 ceiling = -2.
	self assert: -2.1 ceiling = -2.
)

testCharacterization = (
	"Test the relative precision"
	self assert: Float one + Float epsilon > Float one.
	self assert: Float one + Float epsilon = Float one successor.
	"Test sucessors and predecessors"
	self assert: Float one predecessor successor = Float one.
	self assert: Float one successor predecessor = Float one.
	self assert: Float one negated predecessor successor = Float one negated.
	self assert: Float one negated successor predecessor = Float one negated.
	self assert: Float infinity successor = Float infinity.
	self assert: Float negativeInfinity predecessor = Float negativeInfinity.
	self assert: Float nan predecessor isNaN.
	self assert: Float nan successor isNaN.
)

testCloseTo = (
	self deny: (Float nan closeTo: Float nan) description: 'NaN isn''t close to anything'.
	self deny: (Float nan closeTo: 1.0) description: 'NaN isn''t close to anything'.
	self deny: (1.0 closeTo: Float nan) description: 'NaN isn''t close to anything'.

	self deny: (-1.0 closeTo: 1.0).
	self deny: (1.0 closeTo: Float infinity).
	self assert: (Float infinity closeTo: Float infinity) description: 'since they are =, they also are closeTo:'.

	self assert: (1.0/3.0 closeTo: 1/3).
	self assert: (1.0e-8 closeTo: 0).
	self assert: (0 closeTo: 1.0e-8).
	self assert: (1+1.0e-8 closeTo: 1.0).

	self assert: (1000000001.0 closeTo: 1000000000.0).
	self deny: (1000000001 closeTo: 1000000000) description: 'exact representation are considered closeTo: only if equal'.
)

testComparisonWhenPrimitiveFails = (
	self deny: 0.5 < (1/4).
	self deny: 0.5 < (1/2).
	self assert: 0.5 < (3/4).
	self deny: 0.5 <= (1/4).
	self assert: 0.5 <= (1/2).
	self assert: 0.5 <= (3/4).
	self assert: 0.5 > (1/4).
	self deny: 0.5 > (1/2).
	self deny: 0.5 > (3/4).
	self assert: 0.5 >= (1/4).
	self assert: 0.5 >= (1/2).
	self deny: 0.5 >= (3/4).
	self deny: 0.5 = (1/4).
	self assert: 0.5 = (1/2).
	self deny: 0.5 = (3/4).
	self assert: 0.5 ~= (1/4).
	self deny: 0.5 ~= (1/2).
	self assert: 0.5 ~= (3/4).
)

testCopy = (
	"Elementary tests"
	self assert: 2.0 copy = 2.0.
	self assert: -0.5 copy = -0.5.
	"Are exceptional Floats preserved by the copy ?"
	self assert: Float nan copy isNaN.
	self assert: Float infinity copy = Float infinity.
	self assert: Float negativeInfinity copy = Float negativeInfinity.
)

testCopySign = (
	self assert: (0.0 copySignTo: 1) = 1.
)

testCosh = (
	self assert: (0.0 cosh closeTo: 1).
	self deny: Float infinity cosh isFinite.
	self assert: (2.0 cosh squared - 2.0 sinh squared closeTo: 1).
	self assert: (2.0 cosh closeTo: 2.0 negated cosh).
)

testDegreeCos = (
	"Following tests use approximate equality, because cosine are generally evaluated using inexact Floating point arithmetic"
	self assert: (45.0 degreeCos squared - 0.5) abs <= Float epsilon.
	self assert: (60.0 degreeCos - 0.5) abs <= Float epsilon.
	self assert: (120.0 degreeCos + 0.5) abs <= Float epsilon.
	-360.0 to: 360.0 do: [:i |
		self assert: (i degreeCos closeTo: i degreesToRadians cos)].
)

testDegreeCosForExceptionalValues = (
	self assert: Float nan degreeCos isNaN.
	self assert: Float infinity degreeCos isNaN.
	self assert: Float negativeInfinity degreeCos isNaN.
)

testDegreeSin = (
	"Following tests use approximate equality, because sine are generally evaluated using inexact Floating point arithmetic"
	self assert: (45.0 degreeSin squared - 0.5) abs <= Float epsilon.
	self assert: (30.0 degreeSin - 0.5) abs <= Float epsilon.
	self assert: (-30.0 degreeSin + 0.5) abs <= Float epsilon.
	-360.0 to: 360.0 do: [:i |
		self assert: (i degreeSin closeTo: i degreesToRadians sin)].
)

testDegreeSinForExceptionalValues = (
	self assert: Float nan degreeSin isNaN.
	self assert: Float infinity degreeSin isNaN.
	self assert: Float negativeInfinity degreeSin isNaN.
)

testDivide = (
	self assert: 1.5 / 2.0 = 0.75.
	self assert: 2.0 / 1 = 2.0.
)

testFloor = (
	self assert: 1.0 floor = 1.
	self assert: 1.1 floor = 1.
	self assert: -2.0 floor = -2.
	self assert: -2.1 floor = -3.
)

testInfinity1 = (
   "FloatTest new testInfinity1"
	| i1  i2 |
	i1 := 10000 exp.
	i2 := 1000000000 exp.
	self assert: i1 isInfinite & i2 isInfinite & (i1 = i2).
	"All infinities are equal. (This is a very substantial difference to NaN's, which are never equal."
)

testInfinity2 = (
   "FloatTest new testInfinity2"
	| i1  i2 |
	i1 := 10000 exp.
	i2 := 1000000000 exp.
	i2 := 0 - i2. " this is entirely ok. You can compute with infinite values."
	self assert: i1 isInfinite & i2 isInfinite & i1 positive & i2 negative.
	self deny: i1 = i2.
  	"All infinities are signed. Negative infinity is not equal to Infinity"
)

testInfinityCloseTo = (
	"This is a test for bug http://bugs.squeak.org/view.php?id=6729:"
 	"FloatTest new testInfinityCloseTo"
	self deny: (Float infinity closeTo: Float negativeInfinity).
	self deny: (Float negativeInfinity closeTo: Float infinity).
)

testIsZero = (
	self assert: 0.0 isZero.
	self assert: Float negativeZero isZero.
	self deny:  0.1 isZero.
)

testNaN1 = (
   	"FloatTest new testNaN1"
	self assert: Float nan == Float nan.
	self deny: Float nan = Float nan.
	"a NaN is not equal to itself."
)

testNaN3 = (
   "FloatTest new testNaN3"
   	| set item identitySet |
	set := Set new.
	set add: (item := Float nan).
	self deny: (set includes: item).
	identitySet := IdentitySet new.
	identitySet add: (item := Float nan).
	self assert: (identitySet includes: item).
	"as a NaN is not equal to itself, it can not be retrieved from a set"
)

testNaN4 = (
   	"FloatTest new testNaN4"
	| dict |
	dict := Dictionary new.
	dict at: Float nan put: #NaN.
	self deny: (dict includes: Float nan).
	"as a NaN is not equal to itself, it can not be retrieved when it is used as a dictionary key"
)

testNaNisLiteral = (
	self deny: Float nan isLiteral description: 'there is no literal representation of NaN'
)

testReciprocal = (
	self
		assert: 1.0 reciprocal = 1.0;
		assert: 2.0 reciprocal = 0.5;
		assert: -1.0 reciprocal = -1.0;
		assert: -2.0 reciprocal = -0.5.
)

testRounded = (
	self assert: 0.9 rounded = 1.
	self assert: 1.0 rounded = 1.
	self assert: 1.1 rounded = 1.
	self assert: -1.9 rounded = -2.
	self assert: -2.0 rounded = -2.
	self assert: -2.1 rounded = -2.
	"In case of tie, round to upper magnitude"
	self assert: 1.5 rounded = 2.
	self assert: -1.5 rounded = -2.
)

testSetOfFloat = (
	"Classical disagreement between hash and = did lead to a bug.
	This is a non regression test from http://bugs.squeak.org/view.php?id=3360"
	| size3 size4 |
	size3 := (Set new: 3) add: 3; add: 3.0; size.
	size4 := (Set new: 4) add: 3; add: 3.0; size.
	self assert: size3 = size4 description: 'The size of a Set should not depend on its capacity.'
)

testSign = (
	"Set up"
	| negatives positives strictNegatives strictPositives zero |
	strictPositives := {2. 2.5. Float infinity}.
	strictNegatives := {-3. -3.25. Float negativeInfinity}.
	zero := 0.0.
	positives := strictPositives copyWith: zero.
	negatives := strictNegatives.
	"The sign of non zeros"
	strictPositives do: [:aPositive | self assert: aPositive sign = 1].
	strictNegatives do: [:aNegative | self assert: aNegative sign = -1].
	"The sign of zeros"
	self assert: zero sign = 0.
	"Test the copy sign functions"
	positives do: [:aPositiveSign |
		positives do: [:aPositive |
			self assert: (aPositive sign: aPositiveSign) = aPositive].
		negatives do: [:aNegative |
			self assert: (aNegative sign: aPositiveSign) = aNegative negated].
		(zero sign: aPositiveSign) signBit = 0].
	negatives do: [:aNegativeSign |
		positives do: [:aPositive |
			self assert: (aPositive sign: aNegativeSign) = aPositive negated].
		negatives do: [:aNegative |
			self assert: (aNegative sign: aNegativeSign) = aNegative].
		(zero sign: aNegativeSign) signBit = 1].
)

testSinh = (
	self assert: 0.0 sinh = 0.
	self assert: Float negativeZero sinh = 0.
	self deny: Float infinity sinh isFinite.
	self assert: (2.0 cosh squared - 2.0 sinh squared closeTo: 1).
	self assert: (2.0 sinh negated closeTo: 2.0 negated sinh).
)

testStringAsNumber = (
	"This covers parsing in Number>>readFrom:"
	| aFloat |
	aFloat := '-12.3456' asNumber.
	self assert: -12.3456 = aFloat.
	aFloat := '-12.3456e2' asNumber.
	self assert: -1234.56 = aFloat.
)

testTanh = (
	self assert: 0.0 tanh = 0.
	self assert: (Float infinity tanh closeTo: 1).
	self assert: (2.0 cosh squared - 2.0 sinh squared closeTo: 1).
	self assert: (2.0 tanh negated closeTo: 2.0 negated tanh).
)

testTruncated = (
	self assert: 1.0 truncated = 1.
	self assert: 1.1 truncated = 1.
	self assert: -2.0 truncated = -2.
	self assert: -2.1 truncated = -2.
)

testZero1 = (
	"FloatTest new testZero1"
	self assert: Float negativeZero = 0 asFloat.
)

)
